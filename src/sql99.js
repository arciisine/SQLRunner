/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,28],$V3=[1,25],$V4=[1,23],$V5=[1,29],$V6=[1,9],$V7=[1,21],$V8=[1,22],$V9=[1,24],$Va=[1,26],$Vb=[1,27],$Vc=[6,7],$Vd=[1,37],$Ve=[9,10,11,13,16,21,69,70,71,78,81,82,83,84,85,86],$Vf=[2,196],$Vg=[1,46],$Vh=[1,47],$Vi=[1,49],$Vj=[1,93,97,135,136,137,138,141,156,157,164,171,172],$Vk=[1,54],$Vl=[1,55],$Vm=[1,77],$Vn=[1,78],$Vo=[1,79],$Vp=[1,74],$Vq=[1,86],$Vr=[1,70],$Vs=[1,65],$Vt=[1,66],$Vu=[1,63],$Vv=[1,73],$Vw=[1,80],$Vx=[1,81],$Vy=[1,82],$Vz=[1,83],$VA=[1,84],$VB=[1,85],$VC=[6,7,13,21,22,24,35,75,97,116,117,118,124,126,129,135,160,168,179,185,192,195,196],$VD=[1,92],$VE=[2,209],$VF=[2,144],$VG=[1,101],$VH=[159,165],$VI=[24,159,165],$VJ=[1,106],$VK=[1,107],$VL=[1,108],$VM=[1,109],$VN=[6,7,22,24,33,34,35,45,46,47,48,49,50,53,54,60,69,70,71,72,75,97,124,126,159,160,165,185,192,195,196],$VO=[2,76],$VP=[6,7,22,24,33,34,35,45,46,47,48,49,50,53,54,58,60,69,70,71,72,75,97,124,126,159,160,165,185,192,195,196,200,201],$VQ=[6,7,22,24,33,34,35,45,46,47,48,49,50,53,54,60,69,70,71,72,75,97,116,117,118,124,126,159,160,165,185,192,195,196],$VR=[6,7,24,160],$VS=[1,120],$VT=[1,128],$VU=[1,129],$VV=[6,7,24,97,124,126],$VW=[1,133],$VX=[1,134],$VY=[6,7,33,34],$VZ=[2,28],$V_=[1,138],$V$=[1,137],$V01=[1,149],$V11=[6,7,22,97,124,126,185,192,195,196],$V21=[1,150],$V31=[6,7,24,159],$V41=[1,154],$V51=[1,159],$V61=[1,167],$V71=[6,7,97,126],$V81=[1,189],$V91=[1,185],$Va1=[1,186],$Vb1=[1,187],$Vc1=[1,188],$Vd1=[1,190],$Ve1=[6,7,22,185],$Vf1=[1,194],$Vg1=[1,195],$Vh1=[6,7,22,33,34,97,124,126,185,192,195,196],$Vi1=[22,33,34],$Vj1=[1,200],$Vk1=[1,204],$Vl1=[1,205],$Vm1=[1,206],$Vn1=[1,207],$Vo1=[1,208],$Vp1=[1,209],$Vq1=[1,201],$Vr1=[1,202],$Vs1=[1,203],$Vt1=[1,212],$Vu1=[1,217],$Vv1=[22,24],$Vw1=[1,219],$Vx1=[6,7,22,24,33,34,35,45,46,47,48,49,50,53,54,60,69,70,75,97,124,126,159,160,165,185,192,195,196],$Vy1=[24,128],$Vz1=[9,10,11,13,16,21,64,65,66,69,70,78,81,82,83,84,85,86],$VA1=[1,267],$VB1=[2,226],$VC1=[1,271],$VD1=[6,7,22,24,97,124,126,160,185,192,195,196],$VE1=[2,53],$VF1=[1,292],$VG1=[2,230],$VH1=[1,303],$VI1=[1,312],$VJ1=[1,313],$VK1=[1,315],$VL1=[1,314],$VM1=[1,326],$VN1=[6,7,22,97,124,126],$VO1=[1,352],$VP1=[6,7,22,24,97,124,126,185,195,196],$VQ1=[22,24,35,116,117,118],$VR1=[1,380],$VS1=[6,7,22,24,185],$VT1=[2,238],$VU1=[1,401],$VV1=[1,402];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"sql_list":4,"sql":5,"SEMICOLON":6,"EOF":7,"literal":8,"STRING_LITERAL":9,"NUMBER_LITERAL":10,"SCIENTIFIC_NUMBER_LITERAL":11,"column":12,"IDENTIFIER":13,"cursor":14,"parameter":15,"PARAMETER":16,"range_variable":17,"userName":18,"data_type":19,"CHARACTER":20,"LEFT_PAREN":21,"RIGHT_PAREN":22,"NUMERIC":23,"COMMA":24,"DECIMAL":25,"INTEGER":26,"SMALLINT":27,"FLOAT":28,"REAL":29,"DOUBLE":30,"PRECISION":31,"search_condition":32,"OR":33,"AND":34,"NOT":35,"predicate":36,"comparison_predicate":37,"between_predicate":38,"like_predicate":39,"test_for_null":40,"in_predicate":41,"all_or_any_predicate":42,"existence_test":43,"comparison":44,"EQUAL":45,"NOT_EQUAL":46,"LESS_THAN":47,"GREATER_THAN":48,"LESS_THAN_EQUAL":49,"GREATER_THAN_EQUAL":50,"scalar_exp":51,"subquery":52,"BETWEEN":53,"LIKE":54,"opt_escape":55,"ESCAPE":56,"column_ref":57,"IS":58,"NULLX":59,"IN":60,"atom_commalist":61,"atom":62,"any_all_some":63,"ANY":64,"ALL":65,"SOME":66,"EXISTS":67,"select_inner_statement":68,"PLUS":69,"MINUS":70,"ASTERISK":71,"DIVIDE":72,"function_ref":73,"scalar_exp_commalist":74,"AS":75,"alias":76,"parameter_ref":77,"USER":78,"INDICATOR":79,"builtin_fn":80,"ABS":81,"AVG":82,"MIN":83,"MAX":84,"SUM":85,"COUNT":86,"DISTINCT":87,"table":88,"PERIOD":89,"schema":90,"cursor_def":91,"manipulative_statement":92,"WHENEVER":93,"FOUND":94,"when_action":95,"SQLERROR":96,"CREATE":97,"SCHEMA":98,"AUTHORIZATION":99,"opt_schema_element_list":100,"schema_element_list":101,"schema_element":102,"base_table_def":103,"view_def":104,"privilege_def":105,"TABLE":106,"base_table_element_commalist":107,"base_table_element":108,"column_def":109,"table_constraint_def":110,"column_def_opt_list":111,"column_def_opt":112,"UNIQUE":113,"PRIMARY":114,"KEY":115,"DEFAULT":116,"CHECK":117,"REFERENCES":118,"column_commalist":119,"FOREIGN":120,"VIEW":121,"opt_column_commalist":122,"opt_with_check_option":123,"WITH":124,"OPTION":125,"GRANT":126,"privileges":127,"ON":128,"TO":129,"grantee_commalist":130,"opt_with_grant_option":131,"PRIVILEGES":132,"operation_commalist":133,"operation":134,"SELECT":135,"INSERT":136,"DELETE":137,"UPDATE":138,"grantee":139,"PUBLIC":140,"DECLARE":141,"CURSOR":142,"FOR":143,"query_exp":144,"close_statement":145,"commit_statement":146,"delete_statement_positioned":147,"delete_statement_searched":148,"fetch_statement":149,"insert_statement":150,"open_statement":151,"rollback_statement":152,"select_statement":153,"update_statement_positioned":154,"update_statement_searched":155,"CLOSE":156,"COMMIT":157,"WORK":158,"FROM":159,"WHERE":160,"CURRENT":161,"OF":162,"opt_where_clause":163,"FETCH":164,"INTO":165,"target_commalist":166,"values_or_query_spec":167,"VALUES":168,"insert_atom_commalist":169,"insert_atom":170,"OPEN":171,"ROLLBACK":172,"opt_into_clause":173,"opt_all_distinct":174,"selection":175,"table_exp":176,"select_read_only_statement":177,"table_exp_inner":178,"SET":179,"assignment_commalist":180,"assignment":181,"target":182,"where_clause":183,"query_term":184,"UNION":185,"from_clause":186,"opt_group_by_clause":187,"opt_having_clause":188,"opt_order_by_clause":189,"table_ref_commalist":190,"table_ref":191,"GROUP":192,"BY":193,"column_ref_commalist":194,"HAVING":195,"ORDER":196,"ordering_spec_commalist":197,"ordering_spec":198,"opt_asc_desc":199,"ASC":200,"DESC":201,"GOTO":202,"CONTINUE":203,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SEMICOLON",7:"EOF",9:"STRING_LITERAL",10:"NUMBER_LITERAL",11:"SCIENTIFIC_NUMBER_LITERAL",13:"IDENTIFIER",16:"PARAMETER",20:"CHARACTER",21:"LEFT_PAREN",22:"RIGHT_PAREN",23:"NUMERIC",24:"COMMA",25:"DECIMAL",26:"INTEGER",27:"SMALLINT",28:"FLOAT",29:"REAL",30:"DOUBLE",31:"PRECISION",33:"OR",34:"AND",35:"NOT",45:"EQUAL",46:"NOT_EQUAL",47:"LESS_THAN",48:"GREATER_THAN",49:"LESS_THAN_EQUAL",50:"GREATER_THAN_EQUAL",53:"BETWEEN",54:"LIKE",56:"ESCAPE",58:"IS",59:"NULLX",60:"IN",64:"ANY",65:"ALL",66:"SOME",67:"EXISTS",69:"PLUS",70:"MINUS",71:"ASTERISK",72:"DIVIDE",75:"AS",76:"alias",78:"USER",79:"INDICATOR",81:"ABS",82:"AVG",83:"MIN",84:"MAX",85:"SUM",86:"COUNT",87:"DISTINCT",89:"PERIOD",93:"WHENEVER",94:"FOUND",96:"SQLERROR",97:"CREATE",98:"SCHEMA",99:"AUTHORIZATION",106:"TABLE",113:"UNIQUE",114:"PRIMARY",115:"KEY",116:"DEFAULT",117:"CHECK",118:"REFERENCES",120:"FOREIGN",121:"VIEW",124:"WITH",125:"OPTION",126:"GRANT",128:"ON",129:"TO",132:"PRIVILEGES",135:"SELECT",136:"INSERT",137:"DELETE",138:"UPDATE",140:"PUBLIC",141:"DECLARE",142:"CURSOR",143:"FOR",156:"CLOSE",157:"COMMIT",158:"WORK",159:"FROM",160:"WHERE",161:"CURRENT",162:"OF",164:"FETCH",165:"INTO",168:"VALUES",171:"OPEN",172:"ROLLBACK",179:"SET",185:"UNION",192:"GROUP",193:"BY",195:"HAVING",196:"ORDER",200:"ASC",201:"DESC",202:"GOTO",203:"CONTINUE"},
productions_: [0,[3,1],[4,2],[4,3],[4,2],[4,3],[8,1],[8,1],[8,1],[12,1],[14,1],[15,1],[17,1],[18,1],[19,1],[19,4],[19,1],[19,4],[19,6],[19,1],[19,4],[19,6],[19,1],[19,1],[19,1],[19,4],[19,1],[19,2],[32,0],[32,3],[32,3],[32,2],[32,3],[32,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[36,1],[44,1],[44,1],[44,1],[44,1],[44,1],[44,1],[37,3],[37,3],[38,6],[38,5],[39,5],[39,4],[55,0],[55,2],[40,4],[40,3],[41,6],[41,5],[41,6],[41,5],[61,1],[61,3],[42,4],[63,1],[63,1],[63,1],[43,2],[52,3],[51,3],[51,3],[51,3],[51,3],[51,2],[51,2],[51,1],[51,1],[51,1],[51,3],[74,1],[74,3],[74,3],[74,5],[62,1],[62,1],[62,1],[77,1],[77,2],[77,3],[80,1],[80,1],[80,1],[80,1],[80,1],[80,1],[73,4],[73,5],[73,5],[73,4],[88,1],[88,3],[57,1],[57,3],[57,5],[5,1],[5,1],[5,1],[5,4],[5,3],[90,5],[100,0],[100,1],[101,1],[101,2],[102,1],[102,1],[102,1],[103,6],[107,1],[107,3],[108,1],[108,1],[109,3],[111,0],[111,2],[112,2],[112,3],[112,4],[112,2],[112,2],[112,2],[112,4],[112,2],[112,5],[110,4],[110,5],[110,7],[110,10],[110,4],[119,1],[119,3],[104,7],[123,0],[123,3],[122,0],[122,3],[105,7],[131,0],[131,3],[127,2],[127,1],[127,1],[133,1],[133,3],[134,1],[134,1],[134,1],[134,2],[134,2],[130,1],[130,3],[139,1],[139,1],[91,5],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[92,1],[145,2],[146,2],[146,1],[147,7],[148,4],[149,4],[150,5],[167,4],[167,1],[169,1],[169,3],[170,1],[170,1],[151,2],[152,2],[152,1],[173,2],[173,0],[153,5],[177,4],[68,4],[174,0],[174,1],[174,1],[154,8],[180,0],[180,1],[180,3],[181,3],[181,3],[155,5],[166,1],[166,3],[182,1],[163,0],[163,1],[144,1],[144,3],[144,4],[184,1],[184,3],[175,1],[175,1],[176,5],[178,4],[186,2],[190,1],[190,3],[191,1],[191,2],[183,2],[187,0],[187,3],[194,1],[194,3],[188,0],[188,2],[189,0],[189,3],[197,1],[197,3],[198,2],[198,2],[199,0],[199,1],[199,1],[95,2],[95,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:3,90:4,91:5,92:6,93:$V0,97:$V1,135:$V2,136:$V3,137:$V4,138:$V5,141:$V6,145:10,146:11,147:12,148:13,149:14,150:15,151:16,152:17,153:18,154:19,155:20,156:$V7,157:$V8,164:$V9,171:$Va,172:$Vb},{1:[3]},{1:[2,1],5:30,90:4,91:5,92:6,93:$V0,97:$V1,135:$V2,136:$V3,137:$V4,138:$V5,141:$V6,145:10,146:11,147:12,148:13,149:14,150:15,151:16,152:17,153:18,154:19,155:20,156:$V7,157:$V8,164:$V9,171:$Va,172:$Vb},{6:[1,31],7:[1,32]},o($Vc,[2,104]),o($Vc,[2,105]),o($Vc,[2,106]),{35:[1,33],96:[1,34]},{98:[1,35]},{13:$Vd,14:36},o($Vc,[2,164]),o($Vc,[2,165]),o($Vc,[2,166]),o($Vc,[2,167]),o($Vc,[2,168]),o($Vc,[2,169]),o($Vc,[2,170]),o($Vc,[2,171]),o($Vc,[2,172]),o($Vc,[2,173]),o($Vc,[2,174]),{13:$Vd,14:38},o($Vc,[2,177],{158:[1,39]}),{159:[1,40]},{13:$Vd,14:41},{165:[1,42]},{13:$Vd,14:43},o($Vc,[2,190],{158:[1,44]}),o($Ve,$Vf,{174:45,65:$Vg,87:$Vh}),{13:$Vi,88:48},{6:[1,50]},o($Vj,[2,2],{7:[1,51]}),o($Vj,[2,4]),{94:[1,52]},{95:53,202:$Vk,203:$Vl},{99:[1,56]},{142:[1,57]},o([6,7,142,165],[2,10]),o($Vc,[2,175]),o($Vc,[2,176]),{13:$Vi,88:58},{165:[1,59]},{13:$Vi,88:60},o($Vc,[2,188]),o($Vc,[2,189]),{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:64,57:68,62:67,69:$Vs,70:$Vt,71:$Vu,73:69,74:62,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,175:61},o($Ve,[2,197]),o($Ve,[2,198]),{179:[1,87]},o($VC,[2,99],{89:[1,88]}),o($Vj,[2,5]),o($Vj,[2,3]),{95:89,202:$Vk,203:$Vl},o($Vc,[2,108]),{13:[1,90]},o($Vc,[2,242]),{13:$VD,18:91},{143:[1,93]},o($Vc,$VE,{163:95,183:96,160:[1,94]}),{15:76,16:$Vq,77:99,166:97,182:98},o([135,168],$VF,{122:100,21:$VG}),{159:[2,192],165:[1,103],173:102},o($VH,[2,216],{24:[1,104]}),o($VH,[2,217]),o($VI,[2,79],{69:$VJ,70:$VK,71:$VL,72:$VM,75:[1,105]}),{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:110,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:111,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VN,[2,75]),o($VN,$VO),o($VN,[2,77]),{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:112,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VN,[2,83]),o($VN,[2,84]),o($VN,[2,85]),o($VP,[2,101],{89:[1,113]}),{21:[1,114]},o($VN,[2,86],{15:115,16:$Vq,79:[1,116]}),o($VQ,[2,6]),o($VQ,[2,7]),o($VQ,[2,8]),{21:[2,89]},{21:[2,90]},{21:[2,91]},{21:[2,92]},{21:[2,93]},{21:[2,94]},o([6,7,16,22,24,33,34,35,45,46,47,48,49,50,53,54,60,69,70,71,72,75,79,97,124,126,159,160,165,185,192,195,196],[2,11]),o($VR,[2,200],{180:117,181:118,12:119,13:$VS}),{13:[1,121]},o($Vc,[2,107]),o($Vc,[2,241]),o($Vc,[2,110],{100:122,101:123,102:124,103:125,104:126,105:127,97:$VT,126:$VU}),o($VV,[2,13]),{21:$VW,135:$VX,144:130,177:132,184:131},o($VY,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,32:136,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,161:[1,135]}),o($Vc,[2,179]),o($V11,[2,210]),o($Vc,[2,180],{24:$V21}),o($V31,[2,206]),o($V31,[2,208]),{68:153,135:$V41,167:151,168:[1,152]},{12:156,13:$VS,119:155},{159:$V51,176:157,186:158},{15:76,16:$Vq,77:99,166:160,182:98},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:161,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{76:[1,162]},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:163,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:164,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:165,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:166,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($VN,[2,73]),o($VN,[2,74]),{22:$V61,69:$VJ,70:$VK,71:$VL,72:$VM},{13:[1,168]},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:172,57:68,62:67,65:[1,171],69:$Vs,70:$Vt,71:[1,169],73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,87:[1,170]},o($VN,[2,87]),{15:173,16:$Vq},o($Vc,$VE,{183:96,163:175,24:[1,176],160:[1,174]}),o($VR,[2,201]),{45:[1,177]},o([20,22,23,24,25,26,27,28,29,30,45],[2,9]),o($VC,[2,100]),o($Vc,[2,109]),o($Vc,[2,111],{103:125,104:126,105:127,102:178,97:$VT,126:$VU}),o($V71,[2,112]),o($V71,[2,114]),o($V71,[2,115]),o($V71,[2,116]),{106:[1,179],121:[1,180]},{65:[1,182],118:$V81,127:181,133:183,134:184,135:$V91,136:$Va1,137:$Vb1,138:$Vc1},o($Vc,[2,163],{185:$Vd1}),o($Ve1,[2,211]),o($Ve1,[2,214]),{21:$VW,135:$VX,144:191,177:132,184:131},o($Ve,$Vf,{174:192,65:$Vg,87:$Vh}),{162:[1,193]},o($V11,[2,225],{33:$Vf1,34:$Vg1}),o($Vh1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:196,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($Vi1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,57:148,32:197,51:198,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($Vh1,[2,33]),o($Vh1,[2,34]),o($Vh1,[2,35]),o($Vh1,[2,36]),o($Vh1,[2,37]),o($Vh1,[2,38]),o($Vh1,[2,39]),o($Vh1,[2,40]),{35:$Vj1,44:199,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,53:$Vq1,54:$Vr1,60:$Vs1,69:$VJ,70:$VK,71:$VL,72:$VM},o([22,35,45,46,47,48,49,50,53,54,60,69,70,71,72],$VO,{58:[1,210]}),{21:$Vt1,52:211},{15:76,16:$Vq,77:99,182:213},o($Vc,[2,181]),{21:[1,214]},o($Vc,[2,183]),o($Ve,$Vf,{174:215,65:$Vg,87:$Vh}),{22:[1,216],24:$Vu1},o($Vv1,[2,139]),o($Vc,[2,193]),o([6,7,22,185,192,195,196],$VE,{183:96,163:218,160:$Vw1}),{13:$Vi,88:222,190:220,191:221},{24:$V21,159:[2,191]},o($VI,[2,81],{69:$VJ,70:$VK,71:$VL,72:$VM,75:[1,223]}),o($VI,[2,80]),o($Vx1,[2,69],{71:$VL,72:$VM}),o($Vx1,[2,70],{71:$VL,72:$VM}),o($VN,[2,71]),o($VN,[2,72]),o($VN,[2,78]),o($VP,[2,102],{89:[1,224]}),{22:[1,225]},{13:$Vp,57:226},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:227,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{22:[1,228],69:$VJ,70:$VK,71:$VL,72:$VM},o($VN,[2,88]),o($VY,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,32:136,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,161:[1,229]}),o($Vc,[2,205]),{12:119,13:$VS,181:230},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:231,57:68,59:[1,232],62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($V71,[2,113]),{13:$Vi,88:233},{13:$Vi,88:234},{128:[1,235]},{128:[2,150],132:[1,236]},{24:[1,237],128:[2,151]},o($Vy1,[2,152]),o($Vy1,[2,154]),o($Vy1,[2,155]),o($Vy1,[2,156]),o($Vy1,$VF,{122:238,21:$VG}),o($Vy1,$VF,{122:239,21:$VG}),{21:$VW,65:[1,241],135:$VX,177:132,184:240},{22:[1,242],185:$Vd1},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:64,57:68,62:67,69:$Vs,70:$Vt,71:$Vu,73:69,74:62,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,175:243},{13:$Vd,14:244},o($Vh1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:245,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($Vh1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:246,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($Vh1,[2,31]),{22:[1,247],33:$Vf1,34:$Vg1},{22:$V61,35:$Vj1,44:199,45:$Vk1,46:$Vl1,47:$Vm1,48:$Vn1,49:$Vo1,50:$Vp1,53:$Vq1,54:$Vr1,60:$Vs1,69:$VJ,70:$VK,71:$VL,72:$VM},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:[1,251],51:248,52:249,57:68,62:67,63:250,64:[1,252],65:[1,253],66:[1,254],69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{53:[1,255],54:[1,256],60:[1,257]},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:258,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{9:[1,259]},{21:[1,260]},o($Vz1,[2,41]),o($Vz1,[2,42]),o($Vz1,[2,43]),o($Vz1,[2,44]),o($Vz1,[2,45]),o($Vz1,[2,46]),{35:[1,261],59:[1,262]},o($Vh1,[2,67]),{68:263,135:$V41},o($V31,[2,207]),{8:72,9:$Vm,10:$Vn,11:$Vo,15:76,16:$Vq,59:$VA1,62:266,77:71,78:$Vv,169:264,170:265},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:64,57:68,62:67,69:$Vs,70:$Vt,71:$Vu,73:69,74:62,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,175:268},o([24,75,128,135,168],[2,145]),{12:269,13:$VS},o([6,7,22,185,195,196],$VB1,{187:270,192:$VC1}),o($Vh1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,32:136,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o([6,7,22,97,124,126,160,185,192,195,196],[2,220],{24:[1,272]}),o($VD1,[2,221]),o($VD1,[2,223],{17:273,13:[1,274]}),{76:[1,275]},{13:[1,276]},o($VN,[2,95]),{22:[1,277]},{22:[1,278],69:$VJ,70:$VK,71:$VL,72:$VM},o($VN,[2,98]),{162:[1,279]},o($VR,[2,202]),o($VR,[2,203],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($VR,[2,204]),{21:[1,280]},{21:$VG,75:$VF,122:281},{13:$Vi,88:282},{128:[2,149]},{118:$V81,134:283,135:$V91,136:$Va1,137:$Vb1,138:$Vc1},o($Vy1,[2,157]),o($Vy1,[2,158]),o($Ve1,[2,212]),{21:$VW,135:$VX,177:132,184:284},o($Ve1,[2,215]),{159:$V51,176:285,186:158},o($Vc,[2,178]),o([6,7,22,33,97,124,126,185,192,195,196],[2,29],{34:$Vg1}),o($Vh1,[2,30]),o($Vh1,[2,32]),o($Vh1,[2,47],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($Vh1,[2,48]),{21:$Vt1,52:286},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:112,57:68,62:67,68:263,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB,135:$V41},{21:[2,64]},{21:[2,65]},{21:[2,66]},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:287,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},{9:[1,288]},{21:[1,289]},{34:[1,290],69:$VJ,70:$VK,71:$VL,72:$VM},o($Vh1,$VE1,{55:291,56:$VF1}),{8:72,9:$Vm,10:$Vn,11:$Vo,15:76,16:$Vq,21:$Vt1,52:293,61:294,62:295,77:71,78:$Vv},{59:[1,296]},o($Vh1,[2,56]),{22:[1,297]},{22:[1,298],24:[1,299]},o($Vv1,[2,184]),o($Vv1,[2,186]),o($Vv1,[2,187]),{159:$V51,178:300,186:301},o($Vv1,[2,140]),o([6,7,22,185,196],$VG1,{188:302,195:$VH1}),{193:[1,304]},{13:$Vi,88:222,191:305},o($VD1,[2,224]),o($VD1,[2,12]),o($VI,[2,82]),o($VP,[2,103]),o($VN,[2,96]),o($VN,[2,97]),{13:$Vd,14:306},{12:311,13:$VS,107:307,108:308,109:309,110:310,113:$VI1,114:$VJ1,117:$VK1,120:$VL1},{75:[1,316]},{129:[1,317]},o($Vy1,[2,153]),o($Ve1,[2,213]),o($Ve1,[2,194]),o($Vh1,[2,63]),{34:[1,318],69:$VJ,70:$VK,71:$VL,72:$VM},o($Vh1,$VE1,{55:319,56:$VF1}),{8:72,9:$Vm,10:$Vn,11:$Vo,15:76,16:$Vq,21:$Vt1,52:320,61:321,62:295,77:71,78:$Vv},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:322,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vh1,[2,52]),{9:[1,323]},{22:[1,324]},{22:[1,325],24:$VM1},o($Vv1,[2,61]),o($Vh1,[2,55]),o($Vh1,[2,68]),o($Vc,[2,182]),{8:72,9:$Vm,10:$Vn,11:$Vo,15:76,16:$Vq,59:$VA1,62:266,77:71,78:$Vv,170:327},o($VN1,[2,195]),o([6,7,22,97,124,126,192,195],$VE,{183:96,163:328,160:$Vw1}),o($Ve1,[2,232],{189:329,196:[1,330]}),o([6,7,22,33,34,97,124,126,185,196],$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:331,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),{13:$Vp,57:333,194:332},o($VD1,[2,222]),o($Vc,[2,199]),{22:[1,334],24:[1,335]},o($Vv1,[2,118]),o($Vv1,[2,120]),o($Vv1,[2,121]),{19:336,20:[1,337],23:[1,338],25:[1,339],26:[1,340],27:[1,341],28:[1,342],29:[1,343],30:[1,344]},{21:[1,345]},{115:[1,346]},{115:[1,347]},{21:[1,348]},{68:349,135:$V41},{13:$VD,18:353,130:350,139:351,140:$VO1},{8:72,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:76,16:$Vq,21:$Vr,51:354,57:68,62:67,69:$Vs,70:$Vt,73:69,77:71,78:$Vv,80:75,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB},o($Vh1,[2,51]),{22:[1,355]},{22:[1,356],24:$VM1},o($Vh1,[2,50],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($Vh1,[2,54]),o($Vh1,[2,58]),o($Vh1,[2,60]),{8:72,9:$Vm,10:$Vn,11:$Vo,15:76,16:$Vq,62:357,77:71,78:$Vv},o($Vv1,[2,185]),o([6,7,22,97,124,126,195],$VB1,{187:358,192:$VC1}),o($Ve1,[2,218]),{193:[1,359]},o([6,7,22,97,124,126,185,196],[2,231],{33:$Vf1,34:$Vg1}),o([6,7,22,97,124,126,185,195,196],[2,227],{24:[1,360]}),o($VP1,[2,228]),o($V71,[2,117]),{12:311,13:$VS,108:361,109:309,110:310,113:$VI1,114:$VJ1,117:$VK1,120:$VL1},o($VQ1,[2,123],{111:362}),o($VQ1,[2,14],{21:[1,363]}),o($VQ1,[2,16],{21:[1,364]}),o($VQ1,[2,19],{21:[1,365]}),o($VQ1,[2,22]),o($VQ1,[2,23]),o($VQ1,[2,24],{21:[1,366]}),o($VQ1,[2,26]),{31:[1,367]},{12:156,13:$VS,119:368},{21:[1,369]},{21:[1,370]},o($Vi1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:371,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($V71,[2,142],{123:372,124:[1,373]}),o($V71,[2,147],{131:374,24:[1,375],124:[1,376]}),o($VV,[2,159]),o($VV,[2,161]),o($VV,[2,162]),o($Vh1,[2,49],{69:$VJ,70:$VK,71:$VL,72:$VM}),o($Vh1,[2,57]),o($Vh1,[2,59]),o($Vv1,[2,62]),o($VN1,$VG1,{188:377,195:$VH1}),{10:$VR1,13:$Vp,57:381,197:378,198:379},{13:$Vp,57:382},o($Vv1,[2,119]),o($Vv1,[2,122],{112:383,35:[1,384],116:[1,385],117:[1,386],118:[1,387]}),{10:[1,388]},{10:[1,389]},{10:[1,390]},{10:[1,391]},o($VQ1,[2,27]),{22:[1,392],24:$Vu1},{12:156,13:$VS,119:393},{12:156,13:$VS,119:394},{22:[1,395],33:$Vf1,34:$Vg1},o($V71,[2,141]),{117:[1,396]},o($V71,[2,146]),{13:$VD,18:353,139:397,140:$VO1},{126:[1,398]},o($VN1,[2,219]),o($Ve1,[2,233],{24:[1,399]}),o($VS1,[2,234]),o($VS1,$VT1,{199:400,200:$VU1,201:$VV1}),o($VS1,$VT1,{199:403,200:$VU1,201:$VV1}),o($VP1,[2,229]),o($VQ1,[2,124]),{59:[1,404]},{8:405,9:$Vm,10:$Vn,11:$Vo,59:[1,406],78:[1,407]},{21:[1,408]},{13:$Vi,88:409},{22:[1,410]},{22:[1,411],24:[1,412]},{22:[1,413],24:[1,414]},{22:[1,415]},o($Vv1,[2,134]),{22:[1,416],24:$Vu1},{22:[1,417],24:$Vu1},o($Vv1,[2,138]),{125:[1,418]},o($VV,[2,160]),{125:[1,419]},{10:$VR1,13:$Vp,57:381,198:420},o($VS1,[2,236]),o($VS1,[2,239]),o($VS1,[2,240]),o($VS1,[2,237]),o($VQ1,[2,125],{113:[1,421],114:[1,422]}),o($VQ1,[2,128]),o($VQ1,[2,129]),o($VQ1,[2,130]),o($Vi1,$VZ,{62:67,73:69,77:71,8:72,80:75,15:76,36:139,37:140,38:141,39:142,40:143,41:144,42:145,43:146,51:147,57:148,32:423,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,21:$V_,35:$V$,67:$V01,69:$Vs,70:$Vt,78:$Vv,81:$Vw,82:$Vx,83:$Vy,84:$Vz,85:$VA,86:$VB}),o($VQ1,[2,132],{21:[1,424]}),o($VQ1,[2,15]),o($VQ1,[2,17]),{10:[1,425]},o($VQ1,[2,20]),{10:[1,426]},o($VQ1,[2,25]),o($Vv1,[2,135]),{118:[1,427]},o($V71,[2,143]),o($V71,[2,148]),o($VS1,[2,235]),o($VQ1,[2,126]),{115:[1,428]},{22:[1,429],33:$Vf1,34:$Vg1},{12:156,13:$VS,119:430},{22:[1,431]},{22:[1,432]},{13:$Vi,88:433},o($VQ1,[2,127]),o($VQ1,[2,131]),{22:[1,434],24:$Vu1},o($VQ1,[2,18]),o($VQ1,[2,21]),o($Vv1,[2,136],{21:[1,435]}),o($VQ1,[2,133]),{12:156,13:$VS,119:436},{22:[1,437],24:$Vu1},o($Vv1,[2,137])],
defaultActions: {80:[2,89],81:[2,90],82:[2,91],83:[2,92],84:[2,93],85:[2,94],236:[2,149],252:[2,64],253:[2,65],254:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 65;
break;
case 1:return 34;
break;
case 2:return 82;
break;
case 3:return 83;
break;
case 4:return 84;
break;
case 5:return 85;
break;
case 6:return 86;
break;
case 7:return 64;
break;
case 8:return 75;
break;
case 9:return 200;
break;
case 10:return 99;
break;
case 11:return 53;
break;
case 12:return 193;
break;
case 13:return 20;
break;
case 14:return 117;
break;
case 15:return 156;
break;
case 16:return 157;
break;
case 17:return 203;
break;
case 18:return 97;
break;
case 19:return 161;
break;
case 20:return 142;
break;
case 21:return 25;
break;
case 22:return 141;
break;
case 23:return 116;
break;
case 24:return 137;
break;
case 25:return 201;
break;
case 26:return 87;
break;
case 27:return 30;
break;
case 28:return 56;
break;
case 29:return 67;
break;
case 30:return 164;
break;
case 31:return 28;
break;
case 32:return 143;
break;
case 33:return 120;
break;
case 34:return 94;
break;
case 35:return 159;
break;
case 36:return 202;
break;
case 37:return 126;
break;
case 38:return 192;
break;
case 39:return 195;
break;
case 40:return 60;
break;
case 41:return 79;
break;
case 42:return 136;
break;
case 43:return 26;
break;
case 44:return 165;
break;
case 45:return 58;
break;
case 46:return 115;
break;
case 47:return 'LANGUAGE';
break;
case 48:return 54;
break;
case 49:return 35;
break;
case 50:return 59;
break;
case 51:return 23;
break;
case 52:return 162;
break;
case 53:return 128;
break;
case 54:return 171;
break;
case 55:return 125;
break;
case 56:return 33;
break;
case 57:return 196;
break;
case 58:return 31;
break;
case 59:return 114;
break;
case 60:return 132;
break;
case 61:return 'PROCEDURE';
break;
case 62:return 140;
break;
case 63:return 29;
break;
case 64:return 118;
break;
case 65:return 172;
break;
case 66:return 98;
break;
case 67:return 135;
break;
case 68:return 179;
break;
case 69:return 27;
break;
case 70:return 66;
break;
case 71:return 'SQLCODE';
break;
case 72:return 106;
break;
case 73:return 129;
break;
case 74:return 185;
break;
case 75:return 138;
break;
case 76:return 78;
break;
case 77:return 168;
break;
case 78:return 121;
break;
case 79:return 93;
break;
case 80:return 160;
break;
case 81:return 124;
break;
case 82:return 158;
break;
case 83:return 9;
break;
case 84:return 10;
break;
case 85:return 11;
break;
case 86:return 13;
break;
case 87:return 'COMMENT';
break;
case 88:return PARAMETER;
break;
case 89:return 'DOUBLE_QUOTE';
break;
case 90:return 'PERCENT';
break;
case 91:return 'AMPERSAND';
break;
case 92:return 'QUOTE';
break;
case 93:return 21;
break;
case 94:return 22;
break;
case 95:return 89;
break;
case 96:return 'COLON';
break;
case 97:return 24;
break;
case 98:return 6;
break;
case 99:return 'VERTICAL_BAR';
break;
case 100:return 'QUESTION_MARK';
break;
case 101:return 'CARET';
break;
case 102:return 71;
break;
case 103:return 72;
break;
case 104:return 69;
break;
case 105:return 70;
break;
case 106:return 45;
break;
case 107:return 46;
break;
case 108:return 47;
break;
case 109:return 48;
break;
case 110:return 'LESS_THAN_OR_EQUAL';
break;
case 111:return 'GREATER_THAN_OR_EQUAL';
break;
case 112:/* Skip */;
break;
case 113:return 7;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:AVG\b)/,/^(?:MIN\b)/,/^(?:MAX\b)/,/^(?:SUM\b)/,/^(?:COUNT\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_.]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}