/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7],$V1=[1,8],$V2=[1,28],$V3=[1,25],$V4=[1,23],$V5=[1,29],$V6=[1,9],$V7=[1,21],$V8=[1,22],$V9=[1,24],$Va=[1,26],$Vb=[1,27],$Vc=[6,7],$Vd=[1,37],$Ve=[9,10,11,13,16,22,70,71,72,79,81],$Vf=[2,192],$Vg=[1,46],$Vh=[1,47],$Vi=[1,49],$Vj=[1,88,92,130,131,132,133,136,151,152,161,168,169],$Vk=[1,54],$Vl=[1,55],$Vm=[1,79],$Vn=[1,80],$Vo=[1,81],$Vp=[1,76],$Vq=[1,82],$Vr=[1,72],$Vs=[1,67],$Vt=[1,68],$Vu=[1,64],$Vv=[1,75],$Vw=[1,77],$Vx=[6,7,13,22,23,25,36,76,92,111,112,113,119,121,123,124,130,157,165,176,182,191,192,193,194,202,205,206],$Vy=[1,88],$Vz=[2,228],$VA=[1,94],$VB=[1,95],$VC=[1,96],$VD=[1,97],$VE=[6,7,13,23,25,92,119,121,123,157,182,191,192,193,194,202,205,206],$VF=[2,232],$VG=[1,99],$VH=[2,140],$VI=[1,104],$VJ=[154,162],$VK=[25,154,162],$VL=[1,114],$VM=[1,110],$VN=[1,111],$VO=[1,112],$VP=[1,113],$VQ=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,54,55,61,70,71,72,73,76,92,119,121,154,157,162,182,191,192,193,194,202,205,206],$VR=[2,77],$VS=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,54,55,59,61,70,71,72,73,76,92,119,121,154,157,162,182,191,192,193,194,202,205,206,210,211],$VT=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,54,55,61,70,71,72,73,76,92,111,112,113,119,121,154,157,162,182,191,192,193,194,202,205,206],$VU=[6,7,25,157],$VV=[1,125],$VW=[1,133],$VX=[1,134],$VY=[6,7,25,92,119,121],$VZ=[1,138],$V_=[1,139],$V$=[2,205],$V01=[6,7,23,92,119,121,157,182,202,205,206],$V11=[6,7,23,92,119,121,157,182,191,192,193,194,202,205,206],$V21=[1,146],$V31=[2,217],$V41=[6,7,23,25,92,119,121,123,157,182,191,192,193,194,202,205,206],$V51=[2,234],$V61=[1,151],$V71=[1,152],$V81=[6,7,25,154],$V91=[1,156],$Va1=[1,162],$Vb1=[1,170],$Vc1=[6,7,92,121],$Vd1=[1,192],$Ve1=[1,188],$Vf1=[1,189],$Vg1=[1,190],$Vh1=[1,191],$Vi1=[1,193],$Vj1=[6,7,23,182],$Vk1=[6,7,34,35],$Vl1=[2,29],$Vm1=[1,199],$Vn1=[1,198],$Vo1=[1,210],$Vp1=[6,7,23,92,119,121,182,202,205,206],$Vq1=[1,213],$Vr1=[1,218],$Vs1=[23,25],$Vt1=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,54,55,61,70,71,76,92,119,121,154,157,162,182,191,192,193,194,202,205,206],$Vu1=[25,123],$Vv1=[1,246],$Vw1=[1,247],$Vx1=[6,7,23,34,35,92,119,121,157,182,191,192,193,194,202,205,206],$Vy1=[23,34,35],$Vz1=[1,252],$VA1=[1,256],$VB1=[1,257],$VC1=[1,258],$VD1=[1,259],$VE1=[1,260],$VF1=[1,261],$VG1=[1,253],$VH1=[1,254],$VI1=[1,255],$VJ1=[1,264],$VK1=[1,271],$VL1=[6,7,23,92,119,121,182,205,206],$VM1=[6,7,23,25,92,119,121,157,182,191,192,193,194,202,205,206],$VN1=[9,10,11,13,16,22,65,66,67,70,71,79,81],$VO1=[1,316],$VP1=[6,7,23,92,119,121,182,206],$VQ1=[1,328],$VR1=[1,329],$VS1=[1,331],$VT1=[1,330],$VU1=[2,54],$VV1=[1,340],$VW1=[6,7,23,25,182],$VX1=[2,252],$VY1=[1,350],$VZ1=[1,351],$V_1=[1,374],$V$1=[1,384],$V02=[6,7,23,25,92,119,121,182,205,206],$V12=[23,25,36,111,112,113];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"stmt_list":4,"stmt":5,"SEMICOLON":6,"EOF":7,"literal":8,"STRING_LITERAL":9,"NUMBER_LITERAL":10,"SCIENTIFIC_NUMBER_LITERAL":11,"column":12,"IDENTIFIER":13,"cursor":14,"parameter":15,"PARAMETER":16,"range_variable":17,"userName":18,"alias":19,"data_type":20,"CHARACTER":21,"LEFT_PAREN":22,"RIGHT_PAREN":23,"NUMERIC":24,"COMMA":25,"DECIMAL":26,"INTEGER":27,"SMALLINT":28,"FLOAT":29,"REAL":30,"DOUBLE":31,"PRECISION":32,"search_condition":33,"OR":34,"AND":35,"NOT":36,"predicate":37,"comparison_predicate":38,"between_predicate":39,"like_predicate":40,"test_for_null":41,"in_predicate":42,"all_or_any_predicate":43,"existence_test":44,"comparison":45,"EQUAL":46,"NOT_EQUAL":47,"LESS_THAN":48,"GREATER_THAN":49,"LESS_THAN_EQUAL":50,"GREATER_THAN_EQUAL":51,"scalar_exp":52,"subquery":53,"BETWEEN":54,"LIKE":55,"opt_escape":56,"ESCAPE":57,"column_ref":58,"IS":59,"NULLX":60,"IN":61,"atom_commalist":62,"atom":63,"any_all_some":64,"ANY":65,"ALL":66,"SOME":67,"EXISTS":68,"select_inner_statement":69,"PLUS":70,"MINUS":71,"ASTERISK":72,"DIVIDE":73,"function_ref":74,"selection_scalar":75,"AS":76,"selection_commalist":77,"parameter_ref":78,"USER":79,"INDICATOR":80,"BUILTIN_FUNCTION":81,"DISTINCT":82,"table":83,"PERIOD":84,"schema":85,"cursor_def":86,"manipulative_statement":87,"WHENEVER":88,"FOUND":89,"when_action":90,"SQLERROR":91,"CREATE":92,"SCHEMA":93,"AUTHORIZATION":94,"opt_schema_element_list":95,"schema_element_list":96,"schema_element":97,"base_table_def":98,"view_def":99,"privilege_def":100,"TABLE":101,"base_table_element_commalist":102,"base_table_element":103,"column_def":104,"table_constraint_def":105,"column_def_opt_list":106,"column_def_opt":107,"UNIQUE":108,"PRIMARY":109,"KEY":110,"DEFAULT":111,"CHECK":112,"REFERENCES":113,"column_commalist":114,"FOREIGN":115,"VIEW":116,"opt_column_commalist":117,"opt_with_check_option":118,"WITH":119,"OPTION":120,"GRANT":121,"privileges":122,"ON":123,"TO":124,"grantee_commalist":125,"opt_with_grant_option":126,"PRIVILEGES":127,"operation_commalist":128,"operation":129,"SELECT":130,"INSERT":131,"DELETE":132,"UPDATE":133,"grantee":134,"PUBLIC":135,"DECLARE":136,"CURSOR":137,"FOR":138,"query_exp":139,"close_statement":140,"commit_statement":141,"delete_statement_positioned":142,"delete_statement_searched":143,"fetch_statement":144,"insert_statement":145,"open_statement":146,"rollback_statement":147,"select_statement":148,"update_statement_positioned":149,"update_statement_searched":150,"CLOSE":151,"COMMIT":152,"WORK":153,"FROM":154,"table_ref":155,"opt_join_ref_list":156,"WHERE":157,"CURRENT":158,"OF":159,"opt_where_clause":160,"FETCH":161,"INTO":162,"target_commalist":163,"values_or_query_spec":164,"VALUES":165,"insert_atom_commalist":166,"insert_atom":167,"OPEN":168,"ROLLBACK":169,"opt_into_clause":170,"opt_all_distinct":171,"selection":172,"table_exp":173,"select_read_only_statement":174,"table_exp_inner":175,"SET":176,"assignment_commalist":177,"assignment":178,"target":179,"where_clause":180,"query_term":181,"UNION":182,"opt_order_by_clause":183,"from_clause":184,"opt_group_by_clause":185,"opt_having_clause":186,"dynamic_table_ref_commalist":187,"opt_join_outer":188,"OUTER":189,"join_type":190,"LEFT":191,"RIGHT":192,"FULL":193,"INNER":194,"opt_join_on_clause":195,"join_ref":196,"JOIN":197,"dynamic_table_ref":198,"join_ref_list":199,"opt_as":200,"opt_range":201,"GROUP":202,"BY":203,"column_ref_commalist":204,"HAVING":205,"ORDER":206,"ordering_spec_commalist":207,"ordering_spec":208,"opt_asc_desc":209,"ASC":210,"DESC":211,"GOTO":212,"CONTINUE":213,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SEMICOLON",7:"EOF",9:"STRING_LITERAL",10:"NUMBER_LITERAL",11:"SCIENTIFIC_NUMBER_LITERAL",13:"IDENTIFIER",16:"PARAMETER",21:"CHARACTER",22:"LEFT_PAREN",23:"RIGHT_PAREN",24:"NUMERIC",25:"COMMA",26:"DECIMAL",27:"INTEGER",28:"SMALLINT",29:"FLOAT",30:"REAL",31:"DOUBLE",32:"PRECISION",34:"OR",35:"AND",36:"NOT",46:"EQUAL",47:"NOT_EQUAL",48:"LESS_THAN",49:"GREATER_THAN",50:"LESS_THAN_EQUAL",51:"GREATER_THAN_EQUAL",54:"BETWEEN",55:"LIKE",57:"ESCAPE",59:"IS",60:"NULLX",61:"IN",65:"ANY",66:"ALL",67:"SOME",68:"EXISTS",70:"PLUS",71:"MINUS",72:"ASTERISK",73:"DIVIDE",76:"AS",79:"USER",80:"INDICATOR",81:"BUILTIN_FUNCTION",82:"DISTINCT",84:"PERIOD",88:"WHENEVER",89:"FOUND",91:"SQLERROR",92:"CREATE",93:"SCHEMA",94:"AUTHORIZATION",101:"TABLE",108:"UNIQUE",109:"PRIMARY",110:"KEY",111:"DEFAULT",112:"CHECK",113:"REFERENCES",115:"FOREIGN",116:"VIEW",119:"WITH",120:"OPTION",121:"GRANT",123:"ON",124:"TO",127:"PRIVILEGES",130:"SELECT",131:"INSERT",132:"DELETE",133:"UPDATE",135:"PUBLIC",136:"DECLARE",137:"CURSOR",138:"FOR",151:"CLOSE",152:"COMMIT",153:"WORK",154:"FROM",157:"WHERE",158:"CURRENT",159:"OF",161:"FETCH",162:"INTO",165:"VALUES",168:"OPEN",169:"ROLLBACK",176:"SET",182:"UNION",189:"OUTER",191:"LEFT",192:"RIGHT",193:"FULL",194:"INNER",197:"JOIN",202:"GROUP",203:"BY",205:"HAVING",206:"ORDER",210:"ASC",211:"DESC",212:"GOTO",213:"CONTINUE"},
productions_: [0,[3,1],[4,2],[4,3],[4,2],[4,3],[8,1],[8,1],[8,1],[12,1],[14,1],[15,1],[17,1],[18,1],[19,1],[20,1],[20,4],[20,1],[20,4],[20,6],[20,1],[20,4],[20,6],[20,1],[20,1],[20,1],[20,4],[20,1],[20,2],[33,0],[33,3],[33,3],[33,2],[33,3],[33,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[38,3],[38,3],[39,6],[39,5],[40,5],[40,4],[56,0],[56,2],[41,4],[41,3],[42,6],[42,5],[42,6],[42,5],[62,1],[62,3],[43,4],[64,1],[64,1],[64,1],[44,2],[53,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,2],[52,1],[52,1],[52,1],[52,3],[75,1],[75,2],[75,3],[77,1],[77,3],[63,1],[63,1],[63,1],[78,1],[78,2],[78,3],[74,4],[74,5],[74,5],[74,4],[83,1],[83,3],[58,1],[58,3],[58,5],[5,1],[5,1],[5,1],[5,4],[5,3],[85,5],[95,0],[95,1],[96,1],[96,2],[97,1],[97,1],[97,1],[98,6],[102,1],[102,3],[103,1],[103,1],[104,3],[106,0],[106,2],[107,2],[107,3],[107,4],[107,2],[107,2],[107,2],[107,4],[107,2],[107,5],[105,4],[105,5],[105,7],[105,10],[105,4],[114,1],[114,3],[99,7],[118,0],[118,3],[117,0],[117,3],[100,7],[126,0],[126,3],[122,2],[122,1],[122,1],[128,1],[128,3],[129,1],[129,1],[129,1],[129,2],[129,2],[125,1],[125,3],[134,1],[134,1],[86,5],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[87,1],[140,2],[141,2],[141,1],[142,8],[143,5],[144,4],[145,5],[164,4],[164,1],[166,1],[166,3],[167,1],[167,1],[146,2],[147,2],[147,1],[170,2],[170,0],[148,5],[174,4],[69,4],[171,0],[171,1],[171,1],[149,8],[177,0],[177,1],[177,3],[178,3],[178,3],[150,5],[163,1],[163,3],[179,1],[160,0],[160,1],[139,1],[139,3],[139,4],[181,1],[181,3],[172,1],[172,1],[173,2],[175,4],[184,3],[188,0],[188,1],[190,2],[190,2],[190,2],[190,1],[195,0],[195,2],[196,4],[199,1],[199,2],[156,0],[156,1],[187,1],[187,3],[200,0],[200,1],[201,0],[201,1],[155,3],[198,1],[198,5],[180,2],[185,0],[185,3],[204,1],[204,3],[186,0],[186,2],[183,0],[183,3],[207,1],[207,3],[208,2],[208,2],[209,0],[209,1],[209,1],[90,2],[90,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{3:1,4:2,5:3,85:4,86:5,87:6,88:$V0,92:$V1,130:$V2,131:$V3,132:$V4,133:$V5,136:$V6,140:10,141:11,142:12,143:13,144:14,145:15,146:16,147:17,148:18,149:19,150:20,151:$V7,152:$V8,161:$V9,168:$Va,169:$Vb},{1:[3]},{1:[2,1],5:30,85:4,86:5,87:6,88:$V0,92:$V1,130:$V2,131:$V3,132:$V4,133:$V5,136:$V6,140:10,141:11,142:12,143:13,144:14,145:15,146:16,147:17,148:18,149:19,150:20,151:$V7,152:$V8,161:$V9,168:$Va,169:$Vb},{6:[1,31],7:[1,32]},o($Vc,[2,100]),o($Vc,[2,101]),o($Vc,[2,102]),{36:[1,33],91:[1,34]},{93:[1,35]},{13:$Vd,14:36},o($Vc,[2,160]),o($Vc,[2,161]),o($Vc,[2,162]),o($Vc,[2,163]),o($Vc,[2,164]),o($Vc,[2,165]),o($Vc,[2,166]),o($Vc,[2,167]),o($Vc,[2,168]),o($Vc,[2,169]),o($Vc,[2,170]),{13:$Vd,14:38},o($Vc,[2,173],{153:[1,39]}),{154:[1,40]},{13:$Vd,14:41},{162:[1,42]},{13:$Vd,14:43},o($Vc,[2,186],{153:[1,44]}),o($Ve,$Vf,{171:45,66:$Vg,82:$Vh}),{13:$Vi,83:48},{6:[1,50]},o($Vj,[2,2],{7:[1,51]}),o($Vj,[2,4]),{89:[1,52]},{90:53,212:$Vk,213:$Vl},{94:[1,56]},{137:[1,57]},o([6,7,137,162],[2,10]),o($Vc,[2,171]),o($Vc,[2,172]),{13:$Vi,83:59,155:58},{162:[1,60]},{13:$Vi,83:61},o($Vc,[2,184]),o($Vc,[2,185]),{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:66,58:70,63:69,70:$Vs,71:$Vt,72:$Vu,74:71,75:65,77:63,78:73,79:$Vv,81:$Vw,172:62},o($Ve,[2,193]),o($Ve,[2,194]),{176:[1,83]},o($Vx,[2,95],{84:[1,84]}),o($Vj,[2,5]),o($Vj,[2,3]),{90:85,212:$Vk,213:$Vl},o($Vc,[2,104]),{13:[1,86]},o($Vc,[2,256]),{13:$Vy,18:87},{138:[1,89]},o([6,7,157],$Vz,{156:90,199:91,196:92,190:93,191:$VA,192:$VB,193:$VC,194:$VD}),o($VE,$VF,{200:98,76:$VG}),{15:78,16:$Vq,78:102,163:100,179:101},o([130,165],$VH,{117:103,22:$VI}),{154:[2,188],162:[1,106],170:105},o($VJ,[2,212],{25:[1,107]}),o($VJ,[2,213]),o($VK,[2,83]),o($VK,[2,80],{19:108,13:$VL,70:$VM,71:$VN,72:$VO,73:$VP,76:[1,109]}),{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:115,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:116,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($VQ,[2,76]),o($VQ,$VR),o($VQ,[2,78]),{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:117,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($VQ,[2,85]),o($VQ,[2,86]),o($VQ,[2,87]),o($VS,[2,97],{84:[1,118]}),{22:[1,119]},o($VQ,[2,88],{15:120,16:$Vq,80:[1,121]}),o($VT,[2,6]),o($VT,[2,7]),o($VT,[2,8]),o([6,7,13,16,23,25,34,35,36,46,47,48,49,50,51,54,55,61,70,71,72,73,76,80,92,119,121,154,157,162,182,191,192,193,194,202,205,206],[2,11]),o($VU,[2,196],{177:122,178:123,12:124,13:$VV}),{13:[1,126]},o($Vc,[2,103]),o($Vc,[2,255]),o($Vc,[2,106],{95:127,96:128,97:129,98:130,99:131,100:132,92:$VW,121:$VX}),o($VY,[2,13]),{22:$VZ,130:$V_,139:135,174:137,181:136},o($Vc,$V$,{160:141,180:142,157:[1,140]}),o($V01,[2,229],{190:93,196:143,191:$VA,192:$VB,193:$VC,194:$VD}),o($V11,[2,226]),{197:[1,144]},{188:145,189:$V21,197:$V31},{188:147,189:$V21,197:$V31},{188:148,189:$V21,197:$V31},{197:[2,222]},o($V41,$V51,{201:149,17:150,13:$V61}),o($VE,[2,233]),o($Vc,[2,176],{25:$V71}),o($V81,[2,202]),o($V81,[2,204]),{69:155,130:$V91,164:153,165:[1,154]},{12:158,13:$VV,114:157},{154:$Va1,173:159,175:160,184:161},{15:78,16:$Vq,78:102,163:163,179:101},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:66,58:70,63:69,70:$Vs,71:$Vt,74:71,75:164,78:73,79:$Vv,81:$Vw},o($VK,[2,81]),{13:$VL,19:165},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:166,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:167,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:168,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:169,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($VK,[2,14]),o($VQ,[2,74]),o($VQ,[2,75]),{23:$Vb1,70:$VM,71:$VN,72:$VO,73:$VP},{13:[1,171]},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:175,58:70,63:69,66:[1,174],70:$Vs,71:$Vt,72:[1,172],74:71,78:73,79:$Vv,81:$Vw,82:[1,173]},o($VQ,[2,89]),{15:176,16:$Vq},o($Vc,$V$,{180:142,160:178,25:[1,179],157:[1,177]}),o($VU,[2,197]),{46:[1,180]},o([21,23,24,25,26,27,28,29,30,31,46],[2,9]),o($Vx,[2,96]),o($Vc,[2,105]),o($Vc,[2,107],{98:130,99:131,100:132,97:181,92:$VW,121:$VX}),o($Vc1,[2,108]),o($Vc1,[2,110]),o($Vc1,[2,111]),o($Vc1,[2,112]),{101:[1,182],116:[1,183]},{66:[1,185],113:$Vd1,122:184,128:186,129:187,130:$Ve1,131:$Vf1,132:$Vg1,133:$Vh1},o($Vc,[2,159],{182:$Vi1}),o($Vj1,[2,207]),o($Vj1,[2,210]),{22:$VZ,130:$V_,139:194,174:137,181:136},o($Ve,$Vf,{171:195,66:$Vg,82:$Vh}),o($Vk1,$Vl1,{63:69,74:71,78:73,8:74,15:78,33:197,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw,158:[1,196]}),o($Vc,[2,175]),o($Vp1,[2,206]),o($V11,[2,227]),{13:$Vi,22:$Vq1,83:59,155:212,198:211},{197:[2,219]},{197:[2,218]},{197:[2,220]},{197:[2,221]},o($V41,[2,236]),o($V41,[2,235]),o($V41,[2,12]),{15:78,16:$Vq,78:102,179:214},o($Vc,[2,177]),{22:[1,215]},o($Vc,[2,179]),o($Ve,$Vf,{171:216,66:$Vg,82:$Vh}),{23:[1,217],25:$Vr1},o($Vs1,[2,135]),o($Vc,[2,189]),o($Vj1,[2,246],{183:219,206:[1,220]}),o($Vp1,$V$,{180:142,160:221,157:[1,222]}),{13:$Vi,22:$Vq1,83:59,155:212,187:223,198:224},{25:$V71,154:[2,187]},o($VK,[2,84]),o($VK,[2,82]),o($Vt1,[2,70],{72:$VO,73:$VP}),o($Vt1,[2,71],{72:$VO,73:$VP}),o($VQ,[2,72]),o($VQ,[2,73]),o($VQ,[2,79]),o($VS,[2,98],{84:[1,225]}),{23:[1,226]},{13:$Vp,58:227},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:228,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{23:[1,229],70:$VM,71:$VN,72:$VO,73:$VP},o($VQ,[2,90]),o($Vk1,$Vl1,{63:69,74:71,78:73,8:74,15:78,33:197,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw,158:[1,230]}),o($Vc,[2,201]),{12:124,13:$VV,178:231},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:232,58:70,60:[1,233],63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($Vc1,[2,109]),{13:$Vi,83:234},{13:$Vi,83:235},{123:[1,236]},{123:[2,146],127:[1,237]},{25:[1,238],123:[2,147]},o($Vu1,[2,148]),o($Vu1,[2,150]),o($Vu1,[2,151]),o($Vu1,[2,152]),o($Vu1,$VH,{117:239,22:$VI}),o($Vu1,$VH,{117:240,22:$VI}),{22:$VZ,66:[1,242],130:$V_,174:137,181:241},{23:[1,243],182:$Vi1},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:66,58:70,63:69,70:$Vs,71:$Vt,72:$Vu,74:71,75:65,77:63,78:73,79:$Vv,81:$Vw,172:244},{159:[1,245]},o($Vp1,[2,239],{34:$Vv1,35:$Vw1}),o($Vx1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:248,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($Vy1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,58:209,33:249,52:250,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($Vx1,[2,34]),o($Vx1,[2,35]),o($Vx1,[2,36]),o($Vx1,[2,37]),o($Vx1,[2,38]),o($Vx1,[2,39]),o($Vx1,[2,40]),o($Vx1,[2,41]),{36:$Vz1,45:251,46:$VA1,47:$VB1,48:$VC1,49:$VD1,50:$VE1,51:$VF1,54:$VG1,55:$VH1,61:$VI1,70:$VM,71:$VN,72:$VO,73:$VP},o([23,36,46,47,48,49,50,51,54,55,61,70,71,72,73],$VR,{59:[1,262]}),{22:$VJ1,53:263},o($V11,[2,223],{195:265,123:[1,266]}),o($V41,[2,237]),{69:267,130:$V91},o($V81,[2,203]),{8:74,9:$Vm,10:$Vn,11:$Vo,15:78,16:$Vq,60:$VK1,63:270,78:73,79:$Vv,166:268,167:269},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:66,58:70,63:69,70:$Vs,71:$Vt,72:$Vu,74:71,75:65,77:63,78:73,79:$Vv,81:$Vw,172:272},o([25,76,123,130,165],[2,141]),{12:273,13:$VV},o($Vj1,[2,214]),{203:[1,274]},o($VL1,[2,240],{185:275,202:[1,276]}),o([6,7,23,34,35,92,119,121,182,202,205,206],$Vl1,{63:69,74:71,78:73,8:74,15:78,33:197,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($V01,$Vz,{199:91,196:92,190:93,156:277,25:[1,278],191:$VA,192:$VB,193:$VC,194:$VD}),o($VM1,[2,230]),{13:[1,279]},o($VQ,[2,91]),{23:[1,280]},{23:[1,281],70:$VM,71:$VN,72:$VO,73:$VP},o($VQ,[2,94]),{159:[1,282]},o($VU,[2,198]),o($VU,[2,199],{70:$VM,71:$VN,72:$VO,73:$VP}),o($VU,[2,200]),{22:[1,283]},{22:$VI,76:$VH,117:284},{13:$Vi,83:285},{123:[2,145]},{113:$Vd1,129:286,130:$Ve1,131:$Vf1,132:$Vg1,133:$Vh1},o($Vu1,[2,153]),o($Vu1,[2,154]),o($Vj1,[2,208]),{22:$VZ,130:$V_,174:137,181:287},o($Vj1,[2,211]),{154:$Va1,173:288,175:160,184:161},{13:$Vd,14:289},o($Vx1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:290,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($Vx1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:291,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($Vx1,[2,32]),{23:[1,292],34:$Vv1,35:$Vw1},{23:$Vb1,36:$Vz1,45:251,46:$VA1,47:$VB1,48:$VC1,49:$VD1,50:$VE1,51:$VF1,54:$VG1,55:$VH1,61:$VI1,70:$VM,71:$VN,72:$VO,73:$VP},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:[1,296],52:293,53:294,58:70,63:69,64:295,65:[1,297],66:[1,298],67:[1,299],70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{54:[1,300],55:[1,301],61:[1,302]},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:303,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{9:[1,304]},{22:[1,305]},o($VN1,[2,42]),o($VN1,[2,43]),o($VN1,[2,44]),o($VN1,[2,45]),o($VN1,[2,46]),o($VN1,[2,47]),{36:[1,306],60:[1,307]},o($Vx1,[2,68]),{69:308,130:$V91},o($V11,[2,225]),o($Vx1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:309,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),{23:[1,310]},{23:[1,311],25:[1,312]},o($Vs1,[2,180]),o($Vs1,[2,182]),o($Vs1,[2,183]),{154:$Va1,175:313,184:161},o($Vs1,[2,136]),{10:$VO1,13:$Vp,58:317,207:314,208:315},o($VP1,[2,244],{186:318,205:[1,319]}),{203:[1,320]},o($V01,[2,216]),{13:$Vi,22:$Vq1,83:59,155:212,198:321},o($VS,[2,99]),o($VQ,[2,92]),o($VQ,[2,93]),{13:$Vd,14:322},{12:327,13:$VV,102:323,103:324,104:325,105:326,108:$VQ1,109:$VR1,112:$VS1,115:$VT1},{76:[1,332]},{124:[1,333]},o($Vu1,[2,149]),o($Vj1,[2,209]),o($Vj1,[2,190]),o($Vc,[2,174]),o([6,7,23,34,92,119,121,157,182,191,192,193,194,202,205,206],[2,30],{35:$Vw1}),o($Vx1,[2,31]),o($Vx1,[2,33]),o($Vx1,[2,48],{70:$VM,71:$VN,72:$VO,73:$VP}),o($Vx1,[2,49]),{22:$VJ1,53:334},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:117,58:70,63:69,69:308,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw,130:$V91},{22:[2,65]},{22:[2,66]},{22:[2,67]},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:335,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},{9:[1,336]},{22:[1,337]},{35:[1,338],70:$VM,71:$VN,72:$VO,73:$VP},o($Vx1,$VU1,{56:339,57:$VV1}),{8:74,9:$Vm,10:$Vn,11:$Vo,15:78,16:$Vq,22:$VJ1,53:341,62:342,63:343,78:73,79:$Vv},{60:[1,344]},o($Vx1,[2,57]),{23:[1,345]},o($V11,[2,224],{34:$Vv1,35:$Vw1}),o($VE,$VF,{200:346,76:$VG}),o($Vc,[2,178]),{8:74,9:$Vm,10:$Vn,11:$Vo,15:78,16:$Vq,60:$VK1,63:270,78:73,79:$Vv,167:347},o([6,7,23,92,119,121],[2,191]),o($Vj1,[2,247],{25:[1,348]}),o($VW1,[2,248]),o($VW1,$VX1,{209:349,210:$VY1,211:$VZ1}),o($VW1,$VX1,{209:352,210:$VY1,211:$VZ1}),o($VP1,[2,215]),o([6,7,23,34,35,92,119,121,182,206],$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:353,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),{13:$Vp,58:355,204:354},o($VM1,[2,231]),o($Vc,[2,195]),{23:[1,356],25:[1,357]},o($Vs1,[2,114]),o($Vs1,[2,116]),o($Vs1,[2,117]),{20:358,21:[1,359],24:[1,360],26:[1,361],27:[1,362],28:[1,363],29:[1,364],30:[1,365],31:[1,366]},{22:[1,367]},{110:[1,368]},{110:[1,369]},{22:[1,370]},{69:371,130:$V91},{13:$Vy,18:375,125:372,134:373,135:$V_1},o($Vx1,[2,64]),{35:[1,376],70:$VM,71:$VN,72:$VO,73:$VP},o($Vx1,$VU1,{56:377,57:$VV1}),{8:74,9:$Vm,10:$Vn,11:$Vo,15:78,16:$Vq,22:$VJ1,53:378,62:379,63:343,78:73,79:$Vv},{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:380,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($Vx1,[2,53]),{9:[1,381]},{23:[1,382]},{23:[1,383],25:$V$1},o($Vs1,[2,62]),o($Vx1,[2,56]),o($Vx1,[2,69]),o($V41,$V51,{17:150,201:385,13:$V61}),o($Vs1,[2,181]),{10:$VO1,13:$Vp,58:317,208:386},o($VW1,[2,250]),o($VW1,[2,253]),o($VW1,[2,254]),o($VW1,[2,251]),o($VP1,[2,245],{34:$Vv1,35:$Vw1}),o($VL1,[2,241],{25:[1,387]}),o($V02,[2,242]),o($Vc1,[2,113]),{12:327,13:$VV,103:388,104:325,105:326,108:$VQ1,109:$VR1,112:$VS1,115:$VT1},o($V12,[2,119],{106:389}),o($V12,[2,15],{22:[1,390]}),o($V12,[2,17],{22:[1,391]}),o($V12,[2,20],{22:[1,392]}),o($V12,[2,23]),o($V12,[2,24]),o($V12,[2,25],{22:[1,393]}),o($V12,[2,27]),{32:[1,394]},{12:158,13:$VV,114:395},{22:[1,396]},{22:[1,397]},o($Vy1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:398,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($Vc1,[2,138],{118:399,119:[1,400]}),o($Vc1,[2,143],{126:401,25:[1,402],119:[1,403]}),o($VY,[2,155]),o($VY,[2,157]),o($VY,[2,158]),{8:74,9:$Vm,10:$Vn,11:$Vo,13:$Vp,15:78,16:$Vq,22:$Vr,52:404,58:70,63:69,70:$Vs,71:$Vt,74:71,78:73,79:$Vv,81:$Vw},o($Vx1,[2,52]),{23:[1,405]},{23:[1,406],25:$V$1},o($Vx1,[2,51],{70:$VM,71:$VN,72:$VO,73:$VP}),o($Vx1,[2,55]),o($Vx1,[2,59]),o($Vx1,[2,61]),{8:74,9:$Vm,10:$Vn,11:$Vo,15:78,16:$Vq,63:407,78:73,79:$Vv},o($V41,[2,238]),o($VW1,[2,249]),{13:$Vp,58:408},o($Vs1,[2,115]),o($Vs1,[2,118],{107:409,36:[1,410],111:[1,411],112:[1,412],113:[1,413]}),{10:[1,414]},{10:[1,415]},{10:[1,416]},{10:[1,417]},o($V12,[2,28]),{23:[1,418],25:$Vr1},{12:158,13:$VV,114:419},{12:158,13:$VV,114:420},{23:[1,421],34:$Vv1,35:$Vw1},o($Vc1,[2,137]),{112:[1,422]},o($Vc1,[2,142]),{13:$Vy,18:375,134:423,135:$V_1},{121:[1,424]},o($Vx1,[2,50],{70:$VM,71:$VN,72:$VO,73:$VP}),o($Vx1,[2,58]),o($Vx1,[2,60]),o($Vs1,[2,63]),o($V02,[2,243]),o($V12,[2,120]),{60:[1,425]},{8:426,9:$Vm,10:$Vn,11:$Vo,60:[1,427],79:[1,428]},{22:[1,429]},{13:$Vi,83:430},{23:[1,431]},{23:[1,432],25:[1,433]},{23:[1,434],25:[1,435]},{23:[1,436]},o($Vs1,[2,130]),{23:[1,437],25:$Vr1},{23:[1,438],25:$Vr1},o($Vs1,[2,134]),{120:[1,439]},o($VY,[2,156]),{120:[1,440]},o($V12,[2,121],{108:[1,441],109:[1,442]}),o($V12,[2,124]),o($V12,[2,125]),o($V12,[2,126]),o($Vy1,$Vl1,{63:69,74:71,78:73,8:74,15:78,37:200,38:201,39:202,40:203,41:204,42:205,43:206,44:207,52:208,58:209,33:443,9:$Vm,10:$Vn,11:$Vo,13:$Vp,16:$Vq,22:$Vm1,36:$Vn1,68:$Vo1,70:$Vs,71:$Vt,79:$Vv,81:$Vw}),o($V12,[2,128],{22:[1,444]}),o($V12,[2,16]),o($V12,[2,18]),{10:[1,445]},o($V12,[2,21]),{10:[1,446]},o($V12,[2,26]),o($Vs1,[2,131]),{113:[1,447]},o($Vc1,[2,139]),o($Vc1,[2,144]),o($V12,[2,122]),{110:[1,448]},{23:[1,449],34:$Vv1,35:$Vw1},{12:158,13:$VV,114:450},{23:[1,451]},{23:[1,452]},{13:$Vi,83:453},o($V12,[2,123]),o($V12,[2,127]),{23:[1,454],25:$Vr1},o($V12,[2,19]),o($V12,[2,22]),o($Vs1,[2,132],{22:[1,455]}),o($V12,[2,129]),{12:158,13:$VV,114:456},{23:[1,457],25:$Vr1},o($Vs1,[2,133])],
defaultActions: {97:[2,222],145:[2,219],146:[2,218],147:[2,220],148:[2,221],237:[2,145],297:[2,65],298:[2,66],299:[2,67]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

	console.log("Starting");
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 66;
break;
case 1:return 35;
break;
case 2:return 'AVG';
break;
case 3:return 'MIN';
break;
case 4:return 'MAX';
break;
case 5:return 'SUM';
break;
case 6:return 'COUNT';
break;
case 7:return 65;
break;
case 8:return 76;
break;
case 9:return 210;
break;
case 10:return 94;
break;
case 11:return 54;
break;
case 12:return 203;
break;
case 13:return 21;
break;
case 14:return 112;
break;
case 15:return 151;
break;
case 16:return 152;
break;
case 17:return 213;
break;
case 18:return 92;
break;
case 19:return 158;
break;
case 20:return 137;
break;
case 21:return 26;
break;
case 22:return 136;
break;
case 23:return 111;
break;
case 24:return 132;
break;
case 25:return 211;
break;
case 26:return 82;
break;
case 27:return 31;
break;
case 28:return 57;
break;
case 29:return 68;
break;
case 30:return 161;
break;
case 31:return 29;
break;
case 32:return 138;
break;
case 33:return 115;
break;
case 34:return 89;
break;
case 35:return 154;
break;
case 36:return 193;
break;
case 37:return 212;
break;
case 38:return 121;
break;
case 39:return 202;
break;
case 40:return 205;
break;
case 41:return 61;
break;
case 42:return 80;
break;
case 43:return 194;
break;
case 44:return 131;
break;
case 45:return 27;
break;
case 46:return 162;
break;
case 47:return 59;
break;
case 48:return 197;
break;
case 49:return 110;
break;
case 50:return 'LANGUAGE';
break;
case 51:return 55;
break;
case 52:return 191;
break;
case 53:return 36;
break;
case 54:return 60;
break;
case 55:return 24;
break;
case 56:return 159;
break;
case 57:return 123;
break;
case 58:return 168;
break;
case 59:return 120;
break;
case 60:return 34;
break;
case 61:return 206;
break;
case 62:return 189;
break;
case 63:return 32;
break;
case 64:return 109;
break;
case 65:return 127;
break;
case 66:return 'PROCEDURE';
break;
case 67:return 135;
break;
case 68:return 30;
break;
case 69:return 113;
break;
case 70:return 192;
break;
case 71:return 169;
break;
case 72:return 93;
break;
case 73:return 130;
break;
case 74:return 176;
break;
case 75:return 28;
break;
case 76:return 67;
break;
case 77:return 'SQLCODE';
break;
case 78:return 101;
break;
case 79:return 124;
break;
case 80:return 182;
break;
case 81:return 133;
break;
case 82:return 79;
break;
case 83:return 165;
break;
case 84:return 116;
break;
case 85:return 88;
break;
case 86:return 157;
break;
case 87:return 119;
break;
case 88:return 153;
break;
case 89:return 9;
break;
case 90:return 10;
break;
case 91:return 11;
break;
case 92:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 81;
	} else {
		return 13;
	}

break;
case 93:return 'COMMENT';
break;
case 94:return PARAMETER;
break;
case 95:return 'DOUBLE_QUOTE';
break;
case 96:return 'PERCENT';
break;
case 97:return 'AMPERSAND';
break;
case 98:return 'QUOTE';
break;
case 99:return 22;
break;
case 100:return 23;
break;
case 101:return 84;
break;
case 102:return 'COLON';
break;
case 103:return 25;
break;
case 104:return 6;
break;
case 105:return 'VERTICAL_BAR';
break;
case 106:return 'QUESTION_MARK';
break;
case 107:return 'CARET';
break;
case 108:return 72;
break;
case 109:return 73;
break;
case 110:return 70;
break;
case 111:return 71;
break;
case 112:return 46;
break;
case 113:return 47;
break;
case 114:return 48;
break;
case 115:return 49;
break;
case 116:return 'LESS_THAN_OR_EQUAL';
break;
case 117:return 'GREATER_THAN_OR_EQUAL';
break;
case 118:/* Skip */;
break;
case 119:return 7;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:AVG\b)/,/^(?:MIN\b)/,/^(?:MAX\b)/,/^(?:SUM\b)/,/^(?:COUNT\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INNER\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:LEFT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:RIGHT\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_.]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}