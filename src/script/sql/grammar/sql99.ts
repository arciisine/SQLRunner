import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as grant from '../schema/grant';
import * as constraint from '../schema/constraint';
import * as create from '../schema/create';
import * as drop from '../schema/drop';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
import * as insert from '../query/insert';
import * as update from '../query/update';
import * as del from '../query/delete';
import * as cursor from '../statement/cursor';
import * as transaction from '../statement/transaction';
import * as order from '../query/orderby';
import * as when from '../statement/when';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,44],$V1=[1,25],$V2=[1,40],$V3=[1,33],$V4=[1,41],$V5=[1,39],$V6=[1,35],$V7=[1,42],$V8=[1,11],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,36],$Vd=[1,37],$Ve=[1,24],$Vf=[1,6],$Vg=[1,4,6],$Vh=[1,49],$Vi=[1,50],$Vj=[1,54],$Vk=[1,55],$Vl=[1,4,6,110,152],$Vm=[2,193],$Vn=[1,58],$Vo=[2,277],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,66],$Vt=[15,17,19,22,23,27,32,91,92,93,104],$Vu=[2,243],$Vv=[1,72],$Vw=[1,73],$Vx=[1,85],$Vy=[1,84],$Vz=[1,86],$VA=[1,82],$VB=[1,83],$VC=[1,4,6,33,213,214,215,236],$VD=[1,90],$VE=[1,4,6,22,23,32,33,35,39,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,60,61,62,70,71,72,73,74,75,81,82,84,85,86,91,92,93,94,97,98,110,112,128,130,134,139,140,142,143,146,152,158,164,170,188,191,196,199,213,214,215,222,223,224,225,232,235,236,240,241],$VF=[1,98],$VG=[1,99],$VH=[1,108],$VI=[32,164],$VJ=[1,112],$VK=[1,132],$VL=[1,133],$VM=[1,134],$VN=[1,131],$VO=[1,123],$VP=[1,118],$VQ=[1,119],$VR=[1,126],$VS=[2,259],$VT=[1,139],$VU=[1,140],$VV=[1,141],$VW=[1,142],$VX=[1,4,6,33,35,39,110,128,134,152,188,191,213,214,215,222,223,224,225,232,235,236],$VY=[2,263],$VZ=[1,144],$V_=[1,4,6,22,23,32,33,35,39,62,85,97,110,112,128,130,134,139,140,142,143,152,158,164,188,191,199,213,214,215,222,223,224,225,232,235,236],$V$=[35,134],$V01=[2,165],$V11=[1,155],$V21=[1,185],$V31=[188,196],$V41=[35,188,196],$V51=[33,35,188,196],$V61=[1,189],$V71=[1,190],$V81=[1,191],$V91=[1,192],$Va1=[2,110],$Vb1=[1,4,6,22,23,33,35,39,60,61,62,70,71,72,73,74,75,81,82,86,91,92,93,94,97,110,128,152,188,191,196,213,214,215,222,223,224,225,232,235,236],$Vc1=[2,90],$Vd1=[1,4,6,22,23,33,35,39,60,61,62,70,71,72,73,74,75,81,82,85,86,91,92,93,94,97,110,128,130,139,140,142,143,152,188,191,196,213,214,215,222,223,224,225,232,235,236],$Ve1=[1,4,6,33,39,110,128,152,191,213,214,215,222,223,224,225,232,235,236],$Vf1=[1,206],$Vg1=[2,248],$Vh1=[1,227],$Vi1=[1,228],$Vj1=[1,230],$Vk1=[1,229],$Vl1=[1,226],$Vm1=[2,269],$Vn1=[1,4,6,35],$Vo1=[1,4,6,33,35,39,110,152,213,214,215,235,236,240,241],$Vp1=[1,4,6,22,23,33,35,39,60,61,62,70,71,72,73,74,75,81,82,84,86,91,92,93,94,97,110,128,152,188,191,196,213,214,215,222,223,224,225,232,235,236,240,241],$Vq1=[1,246],$Vr1=[1,4,6,33,35,39,110,152,191,213,214,215,222,223,224,225,232,235,236],$Vs1=[1,4,6,33,35,39,110,128,134,152,191,213,214,215,222,223,224,225,232,235,236],$Vt1=[1,259],$Vu1=[1,4,6,35,191],$Vv1=[1,270],$Vw1=[33,35],$Vx1=[1,273],$Vy1=[1,4,6,35,39,110,152],$Vz1=[1,4,6,60,61],$VA1=[2,51],$VB1=[1,302],$VC1=[1,301],$VD1=[1,306],$VE1=[1,307],$VF1=[1,4,6,33,39,110,152,213,214,215,232,235,236],$VG1=[1,313],$VH1=[1,4,6,22,23,33,35,39,60,61,62,70,71,72,73,74,75,81,82,86,91,92,97,110,128,152,188,191,196,213,214,215,222,223,224,225,232,235,236],$VI1=[1,329],$VJ1=[1,336],$VK1=[1,337],$VL1=[1,340],$VM1=[1,338],$VN1=[1,339],$VO1=[1,341],$VP1=[1,342],$VQ1=[32,33,35,62,85,130,139,140,142,143],$VR1=[2,31],$VS1=[1,344],$VT1=[33,35,62,85,130,139,140,142,143],$VU1=[2,26],$VV1=[1,346],$VW1=[2,28],$VX1=[1,350],$VY1=[33,35,39,62,85,130,139,140,142,143],$VZ1=[33,60,61],$V_1=[1,366],$V$1=[1,367],$V02=[1,4,6,33,39,60,61,110,128,152,191,213,214,215,222,223,224,225,232,235,236],$V12=[81,82,86],$V22=[2,57],$V32=[1,379],$V42=[1,373],$V52=[1,374],$V62=[1,375],$V72=[1,376],$V82=[1,377],$V92=[1,378],$Va2=[1,386],$Vb2=[1,4,6,33,39,110,152,213,214,215,235,236],$Vc2=[2,271],$Vd2=[1,389],$Ve2=[1,4,6,22,23,33,35,39,60,61,97,110,128,134,152,191,213,214,215,222,223,224,225,232,235,236],$Vf2=[2,33],$Vg2=[1,409],$Vh2=[15,17,19,22,23,27,32,77,78,79,91,92,104],$Vi2=[1,4,6,33,39,110,152,213,214,215,236],$Vj2=[2,275],$Vk2=[1,434],$Vl2=[2,142],$Vm2=[1,443],$Vn2=[1,469],$Vo2=[1,470],$Vp2=[1,4,6,33,35,39,110,152,213,214,215,235,236],$Vq2=[1,482],$Vr2=[1,483],$Vs2=[1,484],$Vt2=[1,485],$Vu2=[33,35,62,85,130,134,139,140,142,143];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"opt_semicolon":3,"SEMICOLON":4,"opt_eof":5,"EOF":6,"program":7,"stmt_list":8,"stmt":9,"schema_stmt":10,"cursor_stmt":11,"manipulative_stmt":12,"when_stmt":13,"string_literal":14,"STRING_LITERAL":15,"number_literal":16,"NUMBER_LITERAL":17,"scientific_number_literal":18,"SCIENTIFIC_NUMBER_LITERAL":19,"literal":20,"identifier":21,"IDENTIFIER":22,"DOUBLE_QUOTE":23,"column":24,"cursor":25,"parameter":26,"PARAMETER":27,"range_variable":28,"userName":29,"alias":30,"opt_size":31,"(":32,")":33,"opt_size_and_precision":34,",":35,"opt_varying":36,"VARYING":37,"opt_timezone":38,"WITH":39,"TIMEZONE":40,"data_type":41,"CHARACTER":42,"VARCHAR":43,"BINARY":44,"VARBINARY":45,"NUMERIC":46,"DECIMAL":47,"INTEGER":48,"SMALLINT":49,"BIGINT":50,"BOOLEAN":51,"FLOAT":52,"REAL":53,"DOUBLE":54,"PRECISION":55,"DATE":56,"TIME":57,"TIMESTAMP":58,"search_condition":59,"OR":60,"AND":61,"NOT":62,"predicate":63,"opt_not":64,"opt_escape":65,"ESCAPE":66,"atom_commalist":67,"atom":68,"comparison":69,"EQUAL":70,"NOT_EQUAL":71,"LESS_THAN":72,"GREATER_THAN":73,"LESS_THAN_EQUAL":74,"GREATER_THAN_EQUAL":75,"any_all_some":76,"ANY":77,"ALL":78,"SOME":79,"scalar_exp":80,"BETWEEN":81,"LIKE":82,"named_column_ref":83,"IS":84,"NULLX":85,"IN":86,"subquery":87,"EXISTS":88,"NOT_EXISTS":89,"select_statement":90,"PLUS":91,"MINUS":92,"ASTERISK":93,"DIVIDE":94,"function_ref":95,"selection_scalar":96,"AS":97,"PERIOD":98,"selection_commalist":99,"parameter_ref":100,"function_selection":101,"opt_distinct":102,"INDICATOR":103,"BUILTIN_FUNCTION":104,"table":105,"column_ref_spec":106,"schema_authorize":107,"schema_create_element":108,"schema_drop_element":109,"CREATE":110,"SCHEMA":111,"AUTHORIZATION":112,"schema_create_element_list":113,"schema_table":114,"schema_view":115,"schema_privilege":116,"drop_table":117,"drop_view":118,"TABLE":119,"table_element_commalist":120,"table_element":121,"column_def":122,"nameable_table_constraint_def":123,"column_def_opt_list":124,"column_def_opt":125,"referential_trigger_action":126,"CASCADE":127,"SET":128,"NULL":129,"DEFAULT":130,"RESTRICT":131,"NO_ACTION":132,"update_trigger":133,"ON":134,"UPDATE":135,"delete_trigger":136,"DELETE":137,"opt_referential_triggers":138,"UNIQUE":139,"PRIMARY":140,"KEY":141,"CHECK":142,"REFERENCES":143,"column_commalist":144,"table_constraint_def":145,"FOREIGN":146,"CONSTRAINT":147,"opt_column_commalist":148,"VIEW":149,"opt_with_check_option":150,"OPTION":151,"GRANT":152,"privilege_item":153,"opt_with_grant_option":154,"drop_privilege":155,"REVOKE":156,"privileges":157,"TO":158,"grantee_commalist":159,"opt_privilege_token":160,"PRIVILEGES":161,"operation_commalist":162,"operation":163,"SELECT":164,"INSERT":165,"grantee":166,"PUBLIC":167,"DROP":168,"DECLARE":169,"CURSOR":170,"FOR":171,"select_expr_ordered":172,"opt_work":173,"WORK":174,"close_statement":175,"commit_statement":176,"delete_statement_positioned":177,"delete_statement_searched":178,"fetch_statement":179,"insert_statement":180,"open_statement":181,"rollback_statement":182,"select_into_statement":183,"update_statement_positioned":184,"update_statement_searched":185,"CLOSE":186,"COMMIT":187,"FROM":188,"table_ref":189,"opt_join_ref_list":190,"WHERE":191,"CURRENT":192,"OF":193,"opt_where_clause":194,"FETCH":195,"INTO":196,"target_commalist":197,"values_or_query_spec":198,"VALUES":199,"insert_atom_commalist":200,"insert_atom":201,"OPEN":202,"ROLLBACK":203,"selection":204,"dynamic_table_ref_commalist":205,"opt_group_by_clause":206,"opt_having_clause":207,"opt_order_by_clause":208,"assignment_commalist":209,"assignment":210,"target":211,"select_expr_op":212,"UNION":213,"INTERSECTION":214,"EXCEPT":215,"select_expr":216,"select_term":217,"DISTINCT":218,"opt_join_outer":219,"OUTER":220,"join_type":221,"LEFT":222,"RIGHT":223,"FULL":224,"INNER":225,"opt_join_on_clause":226,"join_ref":227,"JOIN":228,"dynamic_table_ref":229,"join_ref_list":230,"opt_alias":231,"GROUP":232,"BY":233,"column_ref_spec_commalist":234,"HAVING":235,"ORDER":236,"ordering_spec_commalist":237,"ordering_spec":238,"opt_asc_desc":239,"ASC":240,"DESC":241,"WHENEVER":242,"FOUND":243,"when_action":244,"SQLERROR":245,"GOTO":246,"CONTINUE":247,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEMICOLON",6:"EOF",15:"STRING_LITERAL",17:"NUMBER_LITERAL",19:"SCIENTIFIC_NUMBER_LITERAL",22:"IDENTIFIER",23:"DOUBLE_QUOTE",27:"PARAMETER",32:"(",33:")",35:",",37:"VARYING",39:"WITH",40:"TIMEZONE",42:"CHARACTER",43:"VARCHAR",44:"BINARY",45:"VARBINARY",46:"NUMERIC",47:"DECIMAL",48:"INTEGER",49:"SMALLINT",50:"BIGINT",51:"BOOLEAN",52:"FLOAT",53:"REAL",54:"DOUBLE",55:"PRECISION",56:"DATE",57:"TIME",58:"TIMESTAMP",60:"OR",61:"AND",62:"NOT",66:"ESCAPE",70:"EQUAL",71:"NOT_EQUAL",72:"LESS_THAN",73:"GREATER_THAN",74:"LESS_THAN_EQUAL",75:"GREATER_THAN_EQUAL",77:"ANY",78:"ALL",79:"SOME",81:"BETWEEN",82:"LIKE",84:"IS",85:"NULLX",86:"IN",88:"EXISTS",89:"NOT_EXISTS",91:"PLUS",92:"MINUS",93:"ASTERISK",94:"DIVIDE",97:"AS",98:"PERIOD",103:"INDICATOR",104:"BUILTIN_FUNCTION",110:"CREATE",111:"SCHEMA",112:"AUTHORIZATION",119:"TABLE",127:"CASCADE",128:"SET",129:"NULL",130:"DEFAULT",131:"RESTRICT",132:"NO_ACTION",134:"ON",135:"UPDATE",137:"DELETE",139:"UNIQUE",140:"PRIMARY",141:"KEY",142:"CHECK",143:"REFERENCES",146:"FOREIGN",147:"CONSTRAINT",149:"VIEW",151:"OPTION",152:"GRANT",156:"REVOKE",158:"TO",161:"PRIVILEGES",164:"SELECT",165:"INSERT",167:"PUBLIC",168:"DROP",169:"DECLARE",170:"CURSOR",171:"FOR",174:"WORK",186:"CLOSE",187:"COMMIT",188:"FROM",191:"WHERE",192:"CURRENT",193:"OF",195:"FETCH",196:"INTO",199:"VALUES",202:"OPEN",203:"ROLLBACK",213:"UNION",214:"INTERSECTION",215:"EXCEPT",218:"DISTINCT",220:"OUTER",222:"LEFT",223:"RIGHT",224:"FULL",225:"INNER",228:"JOIN",232:"GROUP",233:"BY",235:"HAVING",236:"ORDER",240:"ASC",241:"DESC",242:"WHENEVER",243:"FOUND",245:"SQLERROR",246:"GOTO",247:"CONTINUE"},
productions_: [0,[3,0],[3,1],[5,0],[5,1],[7,3],[8,1],[8,3],[9,1],[9,1],[9,1],[9,1],[14,1],[16,1],[18,1],[20,1],[20,1],[20,1],[21,1],[21,3],[24,1],[25,1],[26,1],[28,1],[29,1],[30,1],[31,0],[31,3],[34,0],[34,3],[34,5],[36,0],[36,1],[38,0],[38,2],[41,3],[41,2],[41,3],[41,2],[41,2],[41,2],[41,2],[41,1],[41,1],[41,1],[41,2],[41,1],[41,2],[41,3],[41,3],[41,3],[59,0],[59,3],[59,3],[59,2],[59,3],[59,1],[64,0],[64,1],[65,0],[65,2],[67,1],[67,3],[69,1],[69,1],[69,1],[69,1],[69,1],[69,1],[76,1],[76,1],[76,1],[63,3],[63,6],[63,5],[63,4],[63,4],[63,6],[63,4],[63,2],[63,2],[87,3],[87,3],[80,3],[80,3],[80,3],[80,3],[80,2],[80,2],[80,1],[80,1],[80,1],[80,3],[80,3],[96,1],[96,2],[96,3],[96,3],[99,1],[99,3],[68,1],[68,1],[101,2],[101,2],[100,1],[100,2],[100,3],[95,4],[105,1],[105,3],[83,1],[83,3],[83,5],[106,1],[106,1],[10,1],[10,1],[10,1],[107,6],[113,1],[113,2],[108,1],[108,1],[108,1],[109,1],[109,1],[114,6],[120,1],[120,3],[121,1],[121,1],[122,3],[124,0],[124,1],[124,2],[126,1],[126,2],[126,2],[126,1],[126,1],[133,3],[136,3],[138,0],[138,1],[138,1],[138,2],[138,2],[125,2],[125,1],[125,1],[125,2],[125,2],[125,2],[125,4],[125,3],[125,6],[145,4],[145,5],[145,8],[145,11],[145,4],[123,1],[123,3],[144,1],[144,3],[148,0],[148,3],[115,7],[150,0],[150,3],[116,3],[155,2],[153,5],[154,0],[154,3],[160,0],[160,1],[157,2],[157,1],[162,1],[162,3],[163,1],[163,1],[163,1],[163,2],[163,2],[159,1],[159,3],[166,1],[166,1],[117,3],[118,3],[11,5],[173,0],[173,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[175,2],[176,2],[177,8],[178,5],[179,4],[180,5],[198,4],[198,1],[201,1],[201,1],[200,1],[200,3],[181,2],[182,2],[183,11],[90,8],[209,0],[209,1],[209,3],[210,3],[210,3],[184,9],[185,6],[197,1],[197,3],[211,1],[212,1],[212,2],[212,1],[212,1],[172,2],[216,1],[216,3],[216,3],[217,1],[217,3],[102,0],[102,1],[102,1],[204,2],[204,2],[219,0],[219,1],[221,2],[221,2],[221,2],[221,1],[226,0],[226,2],[227,4],[230,1],[230,2],[190,0],[190,1],[205,1],[205,3],[231,0],[231,2],[231,1],[189,2],[229,1],[229,2],[194,0],[194,2],[206,0],[206,3],[234,1],[234,3],[207,0],[207,2],[208,0],[208,3],[237,1],[237,3],[238,2],[239,0],[239,1],[239,1],[13,4],[13,3],[244,2],[244,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-2]; 
break;
case 6: case 61: case 98: case 119: case 127: case 133: case 179: case 186: case 217: case 224: case 230: case 257: case 261: case 273: case 279:
 this.$ = [$$[$0]]; 
break;
case 7: case 62: case 99: case 128: case 164: case 180: case 187: case 225: case 231: case 262: case 274: case 280:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 12:
 this.$ = new literal.StringLiteral($$[$0].substring(1, $$[$0].length-1)); 
break;
case 13:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 14:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 18: case 60: case 161:
 this.$ = $$[$0] 
break;
case 19: case 81: case 82:
 this.$ = $$[$0-1] 
break;
case 27:
 this.$ = $$[$0-1].value 
break;
case 29:
 this.$ = [$$[$0-1].value] 
break;
case 30:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 32: case 34: case 245:
 this.$ = true 
break;
case 35:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 36:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 37:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 38:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 39:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 40:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 41:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 42:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 43:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 44:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 45:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 46:
 this.$ = new columnType.RealColumnType(); 
break;
case 47:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 48:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 49:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 50:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 52:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 53:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 54:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 55: case 93: case 166:
 this.$ = $$[$0-1]; 
break;
case 56: case 100: case 101: case 113: case 129: case 130: case 178: case 232: case 238: case 241: case 255: case 260: case 264: case 265: case 267: case 270: case 272: case 276: case 278:
 this.$ = $$[$0]; 
break;
case 58: case 169: case 174: case 194:
 this.$ = true; 
break;
case 63:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 64:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 65:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 66:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 67:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 68:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 69:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 70:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 71:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 72:
 this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 73:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0], !!$$[$0-4]); 
break;
case 74:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-1], $$[$0], !!$$[$0-3]); 
break;
case 75:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 76:
 this.$ = new pred.InQueryPredicate($$[$0-3], $$[$0], !!$$[$0-2]); 
break;
case 77:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 78:
 this.$ = new pred.QueryComparisonPredicate($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 79:
 this.$ = new pred.ExistenceCheckPredicate($$[$0]); 
break;
case 80:
 this.$ = new pred.ExistenceCheckPredicate($$[$0], true);  
break;
case 83:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0]); 
break;
case 84:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0]); 
break;
case 85:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0]); 
break;
case 86:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0]); 
break;
case 87:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 88:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 89:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 90:
 this.$ = new scalar.NamedColumnRefExpr($$[$0]); 
break;
case 91:
 this.$ = new scalar.FunctionExpr($$[$0]); 
break;
case 92:
 this.$ = new scalar.QueryExpr($$[$0-2]); 
break;
case 94:
 this.$ = new select.ScalarSelectionExpr($$[$0]); 
break;
case 95:
 this.$ = new select.ScalarSelectionExpr($$[$0-1], $$[$0]); 
break;
case 96:
 this.$ = new select.ScalarSelectionExpr($$[$0-2], $$[$0]); 
break;
case 97:
 this.$ = new select.TableAllSelectionExpr($$[$0-2]); 
break;
case 102:
 this.$ = new select.SingleScalarSelection($$[$0], $$[$0-1]); 
break;
case 103: case 247:
 this.$ = new select.AllSelection($$[$0-1]); 
break;
case 104:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 105:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 106:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 107:
 this.$ = new scalar.FunctionInvocation($$[$0-3], $$[$0-1]); 
break;
case 108:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 109:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 110:
 this.$ = new ref.NamedColumnRef($$[$0]); 
break;
case 111:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2]); 
break;
case 112:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2], $$[$0-4]); 
break;
case 114:
 this.$ = new ref.NumberColumnRef($$[$0].value); 
break;
case 118:
 this.$ = new create.AuthorizationSchema($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 120: case 134: case 258:
 this.$ = $$[$0-1]; this.$ = this.$.concat([$$[$0]]); 
break;
case 126:
 this.$ = new create.TableSchema($$[$0-3], $$[$0-1]); 
break;
case 131:
 this.$ = new create.ColumnSchema($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 132: case 142:
 this.$ = []; 
break;
case 135:
 this.$ = constraint.ReferentialAction.CASCADE; 
break;
case 136:
 this.$ = constraint.ReferentialAction.SET_NULL; 
break;
case 137:
 this.$ = constraint.ReferentialAction.SET_DEFAULT; 
break;
case 138:
 this.$ = constraint.ReferentialAction.RESTRICT; 
break;
case 139:
 this.$ = constraint.ReferentialAction.NO_ACTION; 
break;
case 140:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.UPDATE, $$[$0]); 
break;
case 141:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.DELETE, $$[$0]); 
break;
case 143: case 144: case 163:
 this.$ = [$$[$0]] 
break;
case 145: case 146:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 147:
 this.$ = new constraint.NotNullConstraint(); 
break;
case 148:
 this.$ = new constraint.NullConstraint(); 
break;
case 149:
 this.$ = new constraint.UniqueKeyConstraint(); 
break;
case 150:
 this.$ = new constraint.PrimaryKeyConstraint(); 
break;
case 151:
 this.$ = new constraint.DefaultConstraint($$[$0-1]); 
break;
case 152:
 this.$ = new constraint.DefaultNullConstraint(); 
break;
case 153:
 this.$ = new constraint.CheckConstraint($$[$0-1]); 
break;
case 154:
 this.$ = new constraint.ForeignKeyConstraint($$[$0-1], null, $$[$0]); 
break;
case 155:
 
		this.$ = new constraint.ForeignKeyConstraint($$[$0-4], $$[$0-2], $$[$0]); 
	
break;
case 156:
 this.$ = new constraint.UniqueKeyTableConstraint($$[$0-1]); 
break;
case 157:
 this.$ = new constraint.PrimaryKeyTableConstraint($$[$0-1]); 
break;
case 158:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-4], $$[$0-1], $$[$0]); 
	
break;
case 159:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-7], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 160:
 this.$ = new constraint.CheckTableConstraint($$[$0-1]); 
break;
case 162:
 this.$ = new constraint.NamedTableConstraint($$[$0-1], $$[$0]); 
break;
case 167:

			this.$ = new create.ViewSchema($$[$0-4], $$[$0-3], $$[$0-1], !!$$[$0])
		
break;
case 170:
 this.$ = $$[$0-1]; this.$.withGrant = !!$$[$0] 
break;
case 171:
 this.$ = new drop.DropPrivilegeSchema($$[$0]); 
break;
case 172:
 this.$ = new grant.PrivilegeSchema($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 177:
 this.$ = [new grant.AllGrantOperation()]; 
break;
case 181:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.SELECT); 
break;
case 182:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.INSERT); 
break;
case 183:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.DELETE); 
break;
case 184:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.UPDATE, $$[$0]); 
break;
case 185:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.REFERENCES, $$[$0]); 
break;
case 188:
 this.$ = new grant.PublicGrantee(); 
break;
case 189:
 this.$ = new grant.UserGrantee($$[$0]); 
break;
case 190:
 this.$ = new drop.DropTableSchema($$[$0-2]); 
break;
case 191:
 this.$ = new drop.DropViewSchema($$[$0-2]); 
break;
case 192:
 this.$ = new cursor.CursorDefinitionStatement($$[$0-3], $$[$0]); 
break;
case 207:
 this.$ = new cursor.CloseStatement($$[$0]); 
break;
case 208:
 this.$ = new transaction.CommitStatement(); 
break;
case 209:
 this.$ = new cursor.DeleteCursorQuery($$[$0-5], $$[$0-4], $$[$0]); 
break;
case 210:
 this.$ = new del.DeleteQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 211:
 this.$ = new cursor.FetchStatement($$[$0-2], $$[$0]); 
break;
case 212:
 this.$ = new insert.InsertQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 213:
 this.$ = new insert.AtomValues($$[$0-1]); 
break;
case 214:
 this.$ = new insert.QueryValues($$[$0]); 
break;
case 218:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]);  
break;
case 219:
 this.$ = new cursor.OpenStatement($$[$0]); 
break;
case 220:
 this.$ = new transaction.RollbackStatement(); 
break;
case 221:
 
		this.$ = new select.WritableSelectQuery(new select.SingleSelectQuery($$[$0-9], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]), $$[$0-7], $$[$0]);
	
break;
case 222:
 
		this.$ = new select.SingleSelectQuery($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
	
break;
case 226:
 this.$ = new update.Assignment($$[$0-2], $$[$0]); 
break;
case 227:
 this.$ = new update.Assignment($$[$0-2], null); 
break;
case 228:

			this.$ = new cursor.UpdateCursorQuery($$[$0-7], $$[$0-6], $$[$0-4], $$[$0]); 
		
break;
case 229:

			this.$ = new update.UpdateQuery($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
		
break;
case 233: case 234:
 this.$ = select.BinaryQueryOperator.UNION; 
break;
case 235:
 this.$ = select.BinaryQueryOperator.INTERSECTION; 
break;
case 236:
 this.$ = select.BinaryQueryOperator.EXCEPT; 
break;
case 237:
 this.$ = new select.SortableSelectQuery($$[$0-1], $$[$0]); 
break;
case 239:
 this.$ = new select.BinarySelectQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 240: case 242:
 this.$ = $$[$0-2]; 
break;
case 243: case 244:
 this.$ = false 
break;
case 246:
 this.$ = new select.ScalarSelection($$[$0], $$[$0-1]); 
break;
case 250:
 this.$ = select.JoinType.LEFT; 
break;
case 251:
 this.$ = select.JoinType.RIGHT; 
break;
case 252:
 this.$ = select.JoinType.FULL; 
break;
case 253:
 this.$ = select.JoinType.INNER; 
break;
case 256:
 this.$ = new select.JoinRef($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 266:
 this.$ = new select.NamedFromTableRef($$[$0-1], $$[$0]); 
break;
case 268:
 this.$ = new select.QueryFromTableRef($$[$0-1], $$[$0]); 
break;
case 281:
 this.$ = new order.OrderBy($$[$0-1], $$[$0]); 
break;
case 283:
 this.$ = order.OrderByDirection.ASC; 
break;
case 284:
 this.$ = order.OrderByDirection.DESC; 
break;
case 285:
 this.$ = new when.WheneverNotFound($$[$0]); 
break;
case 286:
 this.$ = new when.WheneverSQLError($$[$0]); 
break;
case 287:
 this.$ = new when.GotoWhenAction($$[$0]); 
break;
case 288:
 this.$ = new when.ContinueWhenAction(); 
break;
}
},
table: [{7:1,8:2,9:3,10:4,11:5,12:6,13:7,32:$V0,90:43,107:8,108:9,109:10,110:$V1,114:26,115:27,116:28,117:29,118:30,135:$V2,137:$V3,152:$V4,164:$V5,165:$V6,168:$V7,169:$V8,172:20,175:12,176:13,177:14,178:15,179:16,180:17,181:18,182:19,183:21,184:22,185:23,186:$V9,187:$Va,195:$Vb,202:$Vc,203:$Vd,216:38,242:$Ve},{1:[3]},o($Vf,[2,1],{3:45,4:[1,46]}),o($Vg,[2,6]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,115]),o($Vg,[2,116]),o($Vg,[2,117]),{21:48,22:$Vh,23:$Vi,25:47},o($Vg,[2,195]),o($Vg,[2,196]),o($Vg,[2,197]),o($Vg,[2,198]),o($Vg,[2,199]),o($Vg,[2,200]),o($Vg,[2,201]),o($Vg,[2,202]),o($Vg,[2,203]),o($Vg,[2,204]),o($Vg,[2,205]),o($Vg,[2,206]),{62:[1,51],245:[1,52]},{111:[1,53],119:$Vj,149:$Vk},o($Vl,[2,121]),o($Vl,[2,122]),o($Vl,[2,123]),o($Vg,[2,124]),o($Vg,[2,125]),{21:48,22:$Vh,23:$Vi,25:56},o($Vg,$Vm,{173:57,174:$Vn}),{188:[1,59]},{21:48,22:$Vh,23:$Vi,25:60},{196:[1,61]},{21:48,22:$Vh,23:$Vi,25:62},o($Vg,$Vm,{173:63,174:$Vn}),o($Vg,$Vo,{208:64,212:65,213:$Vp,214:$Vq,215:$Vr,236:$Vs}),o($Vt,$Vu,{204:70,102:71,78:$Vv,218:$Vw}),{21:76,22:$Vh,23:$Vi,105:75,189:74},{78:[1,79],135:$Vx,137:$Vy,143:$Vz,153:77,157:78,162:80,163:81,164:$VA,165:$VB},{119:[1,87],149:[1,88]},o($VC,[2,238]),{32:$V0,90:43,164:$VD,216:89},{1:[2,3],5:91,6:[1,92]},o($Vf,[2,2],{10:4,11:5,12:6,13:7,107:8,108:9,109:10,175:12,176:13,177:14,178:15,179:16,180:17,181:18,182:19,172:20,183:21,184:22,185:23,114:26,115:27,116:28,117:29,118:30,216:38,90:43,9:93,32:$V0,110:$V1,135:$V2,137:$V3,152:$V4,164:$V5,165:$V6,168:$V7,169:$V8,186:$V9,187:$Va,195:$Vb,202:$Vc,203:$Vd,242:$Ve}),{170:[1,94]},o([1,4,6,170,196],[2,21]),o($VE,[2,18]),{22:[1,95]},{243:[1,96]},{244:97,246:$VF,247:$VG},{21:76,22:$Vh,23:$Vi,105:100},{21:76,22:$Vh,23:$Vi,105:101},{21:76,22:$Vh,23:$Vi,105:102},o($Vg,[2,207]),o($Vg,[2,208]),o($Vg,[2,194]),{21:76,22:$Vh,23:$Vi,105:75,189:103},{196:[1,104]},{21:76,22:$Vh,23:$Vi,105:105},o($Vg,[2,219]),o($Vg,[2,220]),o($Vg,[2,237]),{32:$VH,90:107,164:$VD,217:106},{233:[1,109]},o($VI,[2,233],{78:[1,110]}),o($VI,[2,235]),o($VI,[2,236]),{188:$VJ,196:[1,111]},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:117,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:116,83:121,91:$VP,92:$VQ,93:[1,114],95:122,96:115,99:113,100:124,104:$VR},o($Vt,[2,244]),o($Vt,[2,245]),{128:$VS,190:135,221:138,222:$VT,223:$VU,224:$VV,225:$VW,227:137,230:136},o($VX,$VY,{231:143,28:145,21:146,22:$Vh,23:$Vi,97:$VZ}),o($V_,[2,108],{98:[1,147]}),o($Vl,[2,173],{154:148,39:[1,149]}),{134:[1,150]},{134:[2,175],160:151,161:[1,152]},{35:[1,153],134:[2,178]},o($V$,[2,179]),o($V$,[2,181]),o($V$,[2,182]),o($V$,[2,183]),o($V$,$V01,{148:154,32:$V11}),o($V$,$V01,{148:156,32:$V11}),{21:76,22:$Vh,23:$Vi,105:157},{21:76,22:$Vh,23:$Vi,105:158},{33:[1,159],212:65,213:$Vp,214:$Vq,215:$Vr},o($Vt,$Vu,{102:71,204:160,78:$Vv,218:$Vw}),{1:[2,5]},{1:[2,4]},o($Vg,[2,7]),{171:[1,161]},{23:[1,162]},{244:163,246:$VF,247:$VG},o($Vg,[2,286]),{21:164,22:$Vh,23:$Vi},o($Vg,[2,288]),{112:[1,165]},{32:[1,166]},{32:$V11,97:$V01,148:167},o([1,4,6,191],$VS,{230:136,227:137,221:138,190:168,222:$VT,223:$VU,224:$VV,225:$VW}),{26:127,27:$VN,100:171,197:169,211:170},o([164,199],$V01,{148:172,32:$V11}),o($VC,[2,239]),o($VC,[2,241]),{32:$VH,90:107,164:$VD,217:173},{16:178,17:$VL,21:179,22:$Vh,23:$Vi,83:177,106:176,237:174,238:175},o($VI,[2,234]),{21:76,22:$Vh,23:$Vi,105:75,189:180},{21:76,22:$Vh,23:$Vi,32:$V21,87:184,105:75,189:183,205:181,229:182},o($V31,[2,246],{35:[1,186]}),o($V31,[2,247]),o($V41,[2,98]),o($V51,[2,94],{30:187,21:193,22:$Vh,23:$Vi,91:$V61,92:$V71,93:$V81,94:$V91,97:[1,188]}),o([22,23,33,35,91,92,93,94,97,188,196],$Va1,{98:[1,194]}),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:195,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:196,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},o($Vb1,[2,89]),o($Vb1,$Vc1),o($Vb1,[2,91]),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:198,83:121,90:197,91:$VP,92:$VQ,95:122,100:124,104:$VR,164:$VD},o($Vb1,[2,100]),o($Vb1,[2,101]),{32:[1,199]},o($Vb1,[2,104],{26:200,27:$VN,103:[1,201]}),o($Vd1,[2,15]),o($Vd1,[2,16]),o($Vd1,[2,17]),o([1,4,6,22,23,27,33,35,39,60,61,62,70,71,72,73,74,75,81,82,86,91,92,93,94,97,103,110,128,152,188,191,196,213,214,215,222,223,224,225,232,235,236],[2,22]),o([1,4,6,22,23,33,35,39,60,61,62,66,70,71,72,73,74,75,81,82,85,86,91,92,93,94,97,110,128,130,139,140,142,143,152,188,191,196,213,214,215,222,223,224,225,232,235,236],[2,12]),o([1,4,6,22,23,33,35,39,60,61,62,70,71,72,73,74,75,81,82,85,86,91,92,93,94,97,110,128,130,139,140,142,143,152,188,191,196,213,214,215,222,223,224,225,232,235,236,240,241],[2,13]),o($Vd1,[2,14]),{128:[1,202]},o([1,4,6,33,39,110,128,152,191,213,214,215,232,235,236],[2,260],{221:138,227:203,222:$VT,223:$VU,224:$VV,225:$VW}),o($Ve1,[2,257]),{228:[1,204]},{219:205,220:$Vf1,228:$Vg1},{219:207,220:$Vf1,228:$Vg1},{219:208,220:$Vf1,228:$Vg1},{228:[2,253]},o($VX,[2,266]),{21:146,22:$Vh,23:$Vi,28:209},o($VX,[2,265]),o($VX,[2,23]),{21:210,22:$Vh,23:$Vi},o($Vl,[2,170]),{152:[1,211]},{21:76,22:$Vh,23:$Vi,105:212},{134:[2,177]},{134:[2,176]},{135:$Vx,137:$Vy,143:$Vz,163:213,164:$VA,165:$VB},o($V$,[2,184]),{21:216,22:$Vh,23:$Vi,24:215,144:214},o($V$,[2,185]),o($Vg,[2,190]),o($Vg,[2,191]),o($VC,[2,240]),{188:$VJ},{32:$V0,90:43,164:$VD,172:217,216:38},o($VE,[2,19]),o($Vg,[2,285]),o($Vg,[2,287]),{21:219,22:$Vh,23:$Vi,29:218},{21:216,22:$Vh,23:$Vi,24:224,120:220,121:221,122:222,123:223,139:$Vh1,140:$Vi1,142:$Vj1,145:225,146:$Vk1,147:$Vl1},{97:[1,231]},o($Vg,$Vm1,{194:233,191:[1,232]}),o($Vg,[2,211],{35:[1,234]}),o($Vn1,[2,230]),o($Vn1,[2,232]),{90:237,164:$VD,198:235,199:[1,236]},{33:[1,238]},o($Vg,[2,278],{35:[1,239]}),o($Vn1,[2,279]),o($Vn1,[2,282],{239:240,240:[1,241],241:[1,242]}),o($Vo1,[2,113]),o($Vo1,[2,114]),o($Vp1,$Va1,{98:[1,243]}),{188:[1,244]},o([1,4,6,33,39,110,152,191,213,214,215,232,235,236],$VS,{230:136,227:137,221:138,190:245,35:$Vq1,222:$VT,223:$VU,224:$VV,225:$VW}),o($Vr1,[2,261]),o($Vs1,[2,267]),o($Vs1,$VY,{28:145,21:146,231:247,22:$Vh,23:$Vi,97:$VZ}),{32:$V21,87:249,90:248,164:$VD},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:117,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:116,83:121,91:$VP,92:$VQ,95:122,96:250,100:124,104:$VR},o($V51,[2,95]),{21:193,22:$Vh,23:$Vi,30:251},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:252,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:253,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:254,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:255,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},o($V51,[2,25]),{21:257,22:$Vh,23:$Vi,93:[1,256]},o($Vb1,[2,87]),o($Vb1,[2,88]),{33:[1,258]},{33:$Vt1,91:$V61,92:$V71,93:$V81,94:$V91},o($Vt,$Vu,{101:260,102:261,78:$Vv,218:$Vw}),o($Vb1,[2,105]),{26:262,27:$VN},o($Vu1,[2,223],{21:216,209:263,210:264,24:265,22:$Vh,23:$Vi}),o($Ve1,[2,258]),{21:76,22:$Vh,23:$Vi,32:$V21,87:184,105:75,189:183,229:266},{228:[2,250]},{228:[2,249]},{228:[2,251]},{228:[2,252]},o($VX,[2,264]),o($V_,[2,109]),{151:[1,267]},{158:[1,268]},o($V$,[2,180]),{33:[1,269],35:$Vv1},o($Vw1,[2,163]),o([33,35,42,43,44,45,46,47,48,49,50,51,52,53,54,56,57,58,70],[2,20]),o($Vg,[2,192]),{108:272,110:$Vx1,113:271,114:26,115:27,116:28,152:$V4},o($Vy1,[2,24]),{33:[1,274],35:[1,275]},o($Vw1,[2,127]),o($Vw1,[2,129]),o($Vw1,[2,130]),{41:276,42:[1,277],43:[1,278],44:[1,279],45:[1,280],46:[1,281],47:[1,282],48:[1,283],49:[1,284],50:[1,285],51:[1,286],52:[1,287],53:[1,288],54:[1,289],56:[1,290],57:[1,291],58:[1,292]},o($Vw1,[2,161]),{21:293,22:$Vh,23:$Vi},{32:[1,294]},{141:[1,295]},{141:[1,296]},{32:[1,297]},{90:298,164:$VD},o($Vz1,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,59:300,63:303,80:304,83:305,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR,192:[1,299]}),o($Vg,[2,210]),{26:127,27:$VN,100:171,211:308},o($Vg,[2,212]),{32:[1,309]},o($Vg,[2,214]),o($VC,[2,242]),{16:178,17:$VL,21:179,22:$Vh,23:$Vi,83:177,106:176,238:310},o($Vn1,[2,281]),o($Vn1,[2,283]),o($Vn1,[2,284]),{21:257,22:$Vh,23:$Vi},{21:76,22:$Vh,23:$Vi,32:$V21,87:184,105:75,189:183,205:311,229:182},o($VF1,$Vm1,{194:312,191:$VG1}),{21:76,22:$Vh,23:$Vi,32:$V21,87:184,105:75,189:183,229:314},o($Vs1,[2,268]),{33:[1,315]},{33:[1,316]},o($V41,[2,99]),o($V51,[2,96]),o($VH1,[2,83],{93:$V81,94:$V91}),o($VH1,[2,84],{93:$V81,94:$V91}),o($Vb1,[2,85]),o($Vb1,[2,86]),o($V51,[2,97]),o($Vp1,[2,111],{98:[1,317]}),o($Vb1,[2,92]),o($Vb1,[2,93]),{33:[1,318]},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:117,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:116,83:121,91:$VP,92:$VQ,93:[1,320],95:122,96:319,100:124,104:$VR},o($Vb1,[2,106]),o($Vg,$Vm1,{194:322,35:[1,323],191:[1,321]}),o($Vu1,[2,224]),{70:[1,324]},o($Ve1,[2,254],{226:325,134:[1,326]}),o($Vl,[2,174]),{21:219,22:$Vh,23:$Vi,29:330,159:327,166:328,167:$VI1},o([35,97,134,164,199],[2,166]),{21:216,22:$Vh,23:$Vi,24:331},o($Vg,[2,118],{114:26,115:27,116:28,108:332,110:$Vx1,152:$V4}),o($Vl,[2,119]),{119:$Vj,149:$Vk},o($Vl,[2,126]),{21:216,22:$Vh,23:$Vi,24:224,121:333,122:222,123:223,139:$Vh1,140:$Vi1,142:$Vj1,145:225,146:$Vk1,147:$Vl1},o($Vw1,[2,132],{124:334,125:335,62:$VJ1,85:$VK1,130:$VL1,139:$VM1,140:$VN1,142:$VO1,143:$VP1}),o($VQ1,$VR1,{36:343,37:$VS1}),o($VT1,$VU1,{31:345,32:$VV1}),o($VQ1,$VR1,{36:347,37:$VS1}),o($VT1,$VU1,{31:348,32:$VV1}),o($VT1,$VW1,{34:349,32:$VX1}),o($VT1,$VW1,{34:351,32:$VX1}),o($VT1,$VU1,{31:352,32:$VV1}),o($VT1,[2,42]),o($VT1,[2,43]),o($VT1,[2,44]),o($VT1,$VU1,{31:353,32:$VV1}),o($VT1,[2,46]),{55:[1,354]},o($VY1,$VU1,{31:355,32:$VV1}),o($VY1,$VU1,{31:356,32:$VV1}),o($VY1,$VU1,{31:357,32:$VV1}),{139:$Vh1,140:$Vi1,142:$Vj1,145:358,146:$Vk1},{21:216,22:$Vh,23:$Vi,24:215,144:359},{32:[1,360]},{32:[1,361]},o($VZ1,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:362,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($Vl,[2,168],{150:363,39:[1,364]}),{193:[1,365]},o($VF1,[2,270],{60:$V_1,61:$V$1}),o($V02,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:368,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($VZ1,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,90:197,63:303,83:305,59:369,80:370,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR,164:$VD}),o($V02,[2,56]),o($V12,$V22,{69:371,64:372,62:$V32,70:$V42,71:$V52,72:$V62,73:$V72,74:$V82,75:$V92,91:$V61,92:$V71,93:$V81,94:$V91}),o([33,62,70,71,72,73,74,75,81,82,86,91,92,93,94],$Vc1,{84:[1,380]}),{32:$V21,87:381},{32:$V21,87:382},o($Vn1,[2,231]),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,26:127,27:$VN,68:385,85:$Va2,100:124,200:383,201:384},o($Vn1,[2,280]),o([1,4,6,191,232,235,236],$VS,{230:136,227:137,221:138,190:387,35:$Vq1,222:$VT,223:$VU,224:$VV,225:$VW}),o($Vb2,$Vc2,{206:388,232:$Vd2}),o([1,4,6,33,39,60,61,110,152,213,214,215,232,235,236],$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,59:300,63:303,80:304,83:305,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($Vr1,[2,262]),o($Ve2,[2,81]),o($Ve2,[2,82]),{21:390,22:$Vh,23:$Vi},o($Vb1,[2,107]),{33:[2,102]},{33:[2,103]},o($Vz1,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,59:300,63:303,80:304,83:305,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR,192:[1,391]}),o($Vg,[2,229]),{21:216,22:$Vh,23:$Vi,24:265,210:392},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:393,83:121,85:[1,394],91:$VP,92:$VQ,95:122,100:124,104:$VR},o($Ve1,[2,256]),o($V02,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:395,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o([1,4,6,39,110,152],[2,172],{35:[1,396]}),o($Vy1,[2,186]),o($Vy1,[2,188]),o($Vy1,[2,189]),o($Vw1,[2,164]),o($Vl,[2,120]),o($Vw1,[2,128]),o($Vw1,[2,131],{125:397,62:$VJ1,85:$VK1,130:$VL1,139:$VM1,140:$VN1,142:$VO1,143:$VP1}),o($VT1,[2,133]),{85:[1,398]},o($VT1,[2,148]),o($VT1,[2,149]),{141:[1,399]},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:400,85:[1,401]},{32:[1,402]},{21:76,22:$Vh,23:$Vi,105:403},o($VT1,$VU1,{31:404,32:$VV1}),o($VQ1,[2,32]),o($VT1,[2,36]),{16:405,17:$VL},o($VT1,$VU1,{31:406,32:$VV1}),o($VT1,[2,38]),o($VT1,[2,39]),{16:407,17:$VL},o($VT1,[2,40]),o($VT1,[2,41]),o($VT1,[2,45]),o($VT1,[2,47]),o($VT1,$Vf2,{38:408,39:$Vg2}),o($VT1,$Vf2,{38:410,39:$Vg2}),o($VT1,$Vf2,{38:411,39:$Vg2}),o($Vw1,[2,162]),{33:[1,412],35:$Vv1},{21:216,22:$Vh,23:$Vi,24:215,144:413},{21:216,22:$Vh,23:$Vi,24:215,144:414},{33:[1,415],60:$V_1,61:$V$1},o($Vl,[2,167]),{142:[1,416]},{21:48,22:$Vh,23:$Vi,25:417},o($V02,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:418,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($V02,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:419,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($V02,[2,54]),{33:[1,420],60:$V_1,61:$V$1},o($V12,$V22,{69:371,64:372,33:$Vt1,62:$V32,70:$V42,71:$V52,72:$V62,73:$V72,74:$V82,75:$V92,91:$V61,92:$V71,93:$V81,94:$V91}),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,76:422,77:[1,423],78:[1,424],79:[1,425],80:421,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{81:[1,426],82:[1,427],86:[1,428]},o($Vh2,[2,63]),o($Vh2,[2,64]),o($Vh2,[2,65]),o($Vh2,[2,66]),o($Vh2,[2,67]),o($Vh2,[2,68]),o([81,82,85,86],[2,58]),{62:$V32,64:429,85:$V22},o($V02,[2,79]),o($V02,[2,80]),{33:[1,430],35:[1,431]},o($Vw1,[2,217]),o($Vw1,[2,215]),o($Vw1,[2,216]),o([1,4,6,232,235,236],$Vm1,{194:432,191:$VG1}),o($Vi2,$Vj2,{207:433,235:$Vk2}),{233:[1,435]},o($Vp1,[2,112]),{193:[1,436]},o($Vu1,[2,225]),o($Vu1,[2,226],{91:$V61,92:$V71,93:$V81,94:$V91}),o($Vu1,[2,227]),o($Ve1,[2,255],{60:$V_1,61:$V$1}),{21:219,22:$Vh,23:$Vi,29:330,166:437,167:$VI1},o($VT1,[2,134]),o($VT1,[2,147]),o($VT1,[2,150]),o($VT1,[2,151]),o($VT1,[2,152]),o($VZ1,$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:438,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),o($VT1,$Vl2,{138:439,133:441,136:442,32:[1,440],134:$Vm2}),o($VT1,[2,35]),{33:[1,444]},o($VT1,[2,37]),{33:[1,445],35:[1,446]},o($VT1,[2,48]),{40:[1,447]},o($VT1,[2,49]),o($VT1,[2,50]),o($Vw1,[2,156]),{33:[1,448],35:$Vv1},{33:[1,449],35:$Vv1},o($Vw1,[2,160]),{151:[1,450]},o($Vg,[2,209]),o([1,4,6,33,39,60,110,128,152,191,213,214,215,222,223,224,225,232,235,236],[2,52],{61:$V$1}),o($V02,[2,53]),o($V02,[2,55]),o($V02,[2,72],{91:$V61,92:$V71,93:$V81,94:$V91}),{32:$V21,87:451},{32:[2,69]},{32:[2,70]},{32:[2,71]},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:452,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},{14:453,15:$VK},{32:[1,455],87:454},{85:[1,456]},o($Vg,[2,213]),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,26:127,27:$VN,68:385,85:$Va2,100:124,201:457},o([1,4,6,235,236],$Vc2,{206:458,232:$Vd2}),o($Vi2,[2,222]),o([1,4,6,33,39,60,61,110,152,213,214,215,236],$VA1,{68:120,95:122,100:124,20:125,26:127,14:128,16:129,18:130,21:179,63:303,80:304,83:305,59:459,15:$VK,17:$VL,19:$VM,22:$Vh,23:$Vi,27:$VN,32:$VB1,62:$VC1,88:$VD1,89:$VE1,91:$VP,92:$VQ,104:$VR}),{16:178,17:$VL,21:179,22:$Vh,23:$Vi,83:177,106:461,234:460},{21:48,22:$Vh,23:$Vi,25:462},o($Vy1,[2,187]),{33:[1,463],60:$V_1,61:$V$1},o($VT1,[2,154]),{21:216,22:$Vh,23:$Vi,24:215,144:464},o($VT1,[2,143],{136:465,134:[1,466]}),o($VT1,[2,144],{133:467,134:[1,468]}),{135:$Vn2,137:$Vo2},o($VY1,[2,27]),o($VT1,[2,29]),{16:471,17:$VL},o($VT1,[2,34]),o($Vw1,[2,157]),{143:[1,472]},o($Vl,[2,169]),o($V02,[2,78]),{61:[1,473],91:$V61,92:$V71,93:$V81,94:$V91},o($V02,[2,59],{65:474,66:[1,475]}),o($V02,[2,76]),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,26:127,27:$VN,32:$V21,67:476,68:477,87:249,90:248,100:124,164:$VD},o($V02,[2,75]),o($Vw1,[2,218]),o([1,4,6,236],$Vj2,{207:478,235:$Vk2}),o($Vi2,[2,276],{60:$V_1,61:$V$1}),o($Vb2,[2,272],{35:[1,479]}),o($Vp2,[2,273]),o($Vg,[2,228]),o($VT1,[2,153]),{33:[1,480],35:$Vv1},o($VT1,[2,145]),{137:$Vo2},o($VT1,[2,146]),{135:$Vn2},{126:481,127:$Vq2,128:$Vr2,131:$Vs2,132:$Vt2},{126:486,127:$Vq2,128:$Vr2,131:$Vs2,132:$Vt2},{33:[1,487]},{21:76,22:$Vh,23:$Vi,105:488},{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,21:179,22:$Vh,23:$Vi,26:127,27:$VN,32:$VO,68:120,80:489,83:121,91:$VP,92:$VQ,95:122,100:124,104:$VR},o($V02,[2,74]),{14:490,15:$VK},{33:[1,491],35:[1,492]},o($Vw1,[2,61]),o($Vg,$Vo,{208:493,236:$Vs}),{16:178,17:$VL,21:179,22:$Vh,23:$Vi,83:177,106:494},o($VT1,$Vl2,{133:441,136:442,138:495,134:$Vm2}),o($Vu2,[2,140]),o($Vu2,[2,135]),{129:[1,496],130:[1,497]},o($Vu2,[2,138]),o($Vu2,[2,139]),o($Vu2,[2,141]),o($VT1,[2,30]),o($Vw1,$Vl2,{133:441,136:442,138:498,32:[1,499],134:$Vm2}),o($V02,[2,73],{91:$V61,92:$V71,93:$V81,94:$V91}),o($V02,[2,60]),o($V02,[2,77]),{14:128,15:$VK,16:129,17:$VL,18:130,19:$VM,20:125,26:127,27:$VN,68:500,100:124},o($Vg,[2,221]),o($Vp2,[2,274]),o($VT1,[2,155]),o($Vu2,[2,136]),o($Vu2,[2,137]),o($Vw1,[2,158]),{21:216,22:$Vh,23:$Vi,24:215,144:501},o($Vw1,[2,62]),{33:[1,502],35:$Vv1},o($Vw1,$Vl2,{133:441,136:442,138:503,134:$Vm2}),o($Vw1,[2,159])],
defaultActions: {91:[2,5],92:[2,4],142:[2,253],151:[2,177],152:[2,176],205:[2,250],206:[2,249],207:[2,251],208:[2,252],319:[2,102],320:[2,103],423:[2,69],424:[2,70],425:[2,71]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};




















/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 22;
break;
case 1:return 'ACTION';
break;
case 2:return 78;
break;
case 3:return 61;
break;
case 4:return 77;
break;
case 5:return 97;
break;
case 6:return 240;
break;
case 7:return 112;
break;
case 8:return 81;
break;
case 9:return 50;
break;
case 10:return 44;
break;
case 11:return 51;
break;
case 12:return 233;
break;
case 13:return 127;
break;
case 14:return 42;
break;
case 15:return 142;
break;
case 16:return 186;
break;
case 17:return 187;
break;
case 18:return 147;
break;
case 19:return 247;
break;
case 20:return 110;
break;
case 21:return 192;
break;
case 22:return 170;
break;
case 23:return 56;
break;
case 24:return 47;
break;
case 25:return 169;
break;
case 26:return 130;
break;
case 27:return 137;
break;
case 28:return 241;
break;
case 29:return 218;
break;
case 30:return 54;
break;
case 31:return 168;
break;
case 32:return 66;
break;
case 33:return 215;
break;
case 34:return 88;
break;
case 35:return 195;
break;
case 36:return 52;
break;
case 37:return 171;
break;
case 38:return 146;
break;
case 39:return 243;
break;
case 40:return 188;
break;
case 41:return 224;
break;
case 42:return 246;
break;
case 43:return 152;
break;
case 44:return 232;
break;
case 45:return 235;
break;
case 46:return 86;
break;
case 47:return 103;
break;
case 48:return 225;
break;
case 49:return 165;
break;
case 50:return 48;
break;
case 51:return 214;
break;
case 52:return 196;
break;
case 53:return 84;
break;
case 54:return 228;
break;
case 55:return 141;
break;
case 56:return 'LANGUAGE';
break;
case 57:return 222;
break;
case 58:return 82;
break;
case 59:return 'NO'
break;
case 60:return 89;
break;
case 61:return 62;
break;
case 62:return 85;
break;
case 63:return 46;
break;
case 64:return 193;
break;
case 65:return 134;
break;
case 66:return 202;
break;
case 67:return 151;
break;
case 68:return 60;
break;
case 69:return 236;
break;
case 70:return 220;
break;
case 71:return 55;
break;
case 72:return 140;
break;
case 73:return 161;
break;
case 74:return 'PROCEDURE';
break;
case 75:return 167;
break;
case 76:return 53;
break;
case 77:return 143;
break;
case 78:return 131;
break;
case 79:return 223;
break;
case 80:return 203;
break;
case 81:return 111;
break;
case 82:return 164;
break;
case 83:return 128;
break;
case 84:return 49;
break;
case 85:return 79;
break;
case 86:return 'SQLCODE';
break;
case 87:return 119;
break;
case 88:return 57;
break;
case 89:return 58;
break;
case 90:return 158;
break;
case 91:return 213;
break;
case 92:return 139;
break;
case 93:return 135;
break;
case 94:return 'USER';
break;
case 95:return 199;
break;
case 96:return 45;
break;
case 97:return 43;
break;
case 98:return 37;
break;
case 99:return 149;
break;
case 100:return 242;
break;
case 101:return 191;
break;
case 102:return 39;
break;
case 103:return 174;
break;
case 104:return 15;
break;
case 105:return 17;
break;
case 106:return 19;
break;
case 107:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 104;
	} else {
		return 22;
	}

break;
case 108:return 'COMMENTS';
break;
case 109:return 27;
break;
case 110:return 23;
break;
case 111:return 'PERCENT';
break;
case 112:return 'AMPERSAND';
break;
case 113:return 'QUOTE';
break;
case 114:return 32;
break;
case 115:return 33;
break;
case 116:return 98;
break;
case 117:return 'COLON';
break;
case 118:return 35;
break;
case 119:return 4;
break;
case 120:return 'VERTICAL_BAR';
break;
case 121:return 'QUESTION_MARK';
break;
case 122:return 'CARET';
break;
case 123:return 93;
break;
case 124:return 94;
break;
case 125:return 91;
break;
case 126:return 92;
break;
case 127:return 70;
break;
case 128:return 71;
break;
case 129:return 72;
break;
case 130:return 73;
break;
case 131:return 'LESS_THAN_OR_EQUAL';
break;
case 132:return 'GREATER_THAN_OR_EQUAL';
break;
case 133:/* Skip */;
break;
case 134:return 6;
break;
}
},
rules: [/^(?:"[A-Za-z][A-Za-z0-9_]*")/i,/^(?:ACTION\b)/i,/^(?:ALL\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CHAR(ACTER)?)/i,/^(?:CHECK\b)/i,/^(?:CLOSE\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONTINUE\b)/i,/^(?:CREATE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:DATE\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:FETCH\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FOUND\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GO[ \t]TO\b)/i,/^(?:GRANT\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IN\b)/i,/^(?:INDICATOR\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INT(EGER)?)/i,/^(?:INTERSECTION\b)/i,/^(?:INTO\b)/i,/^(?:IS\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:NO\b)/i,/^(?:NOT EXISTS\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NUMERIC\b)/i,/^(?:OF\b)/i,/^(?:ON\b)/i,/^(?:OPEN\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PRECISION\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PUBLIC\b)/i,/^(?:REAL\b)/i,/^(?:REFERENCES\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:SCHEMA\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SMALLINT\b)/i,/^(?:SOME\b)/i,/^(?:SQLCODE\b)/i,/^(?:TABLE\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USER\b)/i,/^(?:VALUES\b)/i,/^(?:VARBINARY\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:WORK\b)/i,/^(?:'[^'\n]*')/i,/^(?:\d+|\.\d+|\d\.\d*)/i,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:--\.\*)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:")/i,/^(?:%)/i,/^(?:&)/i,/^(?:')/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\|)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:[ \r\t\n]+)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();