import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as grant from '../schema/grant';
import * as constraint from '../schema/constraint';
import * as create from '../schema/create';
import * as drop from '../schema/drop';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
import * as insert from '../query/insert';
import * as update from '../query/update';
import * as del from '../query/delete';
import * as cursor from '../statement/cursor';
import * as transaction from '../statement/transaction';
import * as order from '../query/orderby';
import * as when from '../statement/when';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,44],$V1=[1,25],$V2=[1,40],$V3=[1,33],$V4=[1,41],$V5=[1,39],$V6=[1,35],$V7=[1,42],$V8=[1,11],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,36],$Vd=[1,37],$Ve=[1,24],$Vf=[1,6],$Vg=[1,4,6],$Vh=[1,49],$Vi=[1,50],$Vj=[1,54],$Vk=[1,55],$Vl=[1,4,6,114,156],$Vm=[2,193],$Vn=[1,58],$Vo=[2,274],$Vp=[1,65],$Vq=[1,66],$Vr=[1,67],$Vs=[1,68],$Vt=[17,19,21,24,25,29,39,95,96,97,108],$Vu=[2,240],$Vv=[1,71],$Vw=[1,72],$Vx=[1,84],$Vy=[1,83],$Vz=[1,85],$VA=[1,81],$VB=[1,82],$VC=[1,4,6,40,46,114,156,217,218,219,238],$VD=[1,89],$VE=[1,4,6,24,25,37,39,40,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,68,76,77,78,79,80,81,88,89,91,92,93,95,96,97,98,101,102,114,116,132,134,138,143,144,146,147,150,156,162,168,174,192,195,200,203,217,218,219,224,225,226,227,234,237,238,242,243],$VF=[1,97],$VG=[1,98],$VH=[24,25],$VI=[2,29],$VJ=[1,101],$VK=[1,112],$VL=[1,132],$VM=[1,133],$VN=[1,134],$VO=[1,131],$VP=[1,123],$VQ=[1,118],$VR=[1,119],$VS=[1,126],$VT=[2,256],$VU=[1,139],$VV=[1,140],$VW=[1,141],$VX=[1,142],$VY=[1,4,6,40,42,46,114,132,138,156,192,195,217,218,219,224,225,226,227,234,237,238],$VZ=[2,260],$V_=[1,144],$V$=[1,4,6,24,25,37,39,40,42,46,92,101,114,116,132,134,138,143,144,146,147,156,162,168,192,195,203,217,218,219,224,225,226,227,234,237,238],$V01=[42,138],$V11=[2,165],$V21=[1,155],$V31=[2,27],$V41=[1,158],$V51=[1,186],$V61=[192,200],$V71=[42,192,200],$V81=[40,42,192,200],$V91=[1,190],$Va1=[1,191],$Vb1=[1,192],$Vc1=[1,193],$Vd1=[2,111],$Ve1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,88,89,93,95,96,97,98,101,114,132,156,192,195,200,217,218,219,224,225,226,227,234,237,238],$Vf1=[2,92],$Vg1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,88,89,92,93,95,96,97,98,101,114,132,134,143,144,146,147,156,192,195,200,217,218,219,224,225,226,227,234,237,238],$Vh1=[1,4,6,40,46,114,132,156,195,217,218,219,224,225,226,227,234,237,238],$Vi1=[1,206],$Vj1=[2,245],$Vk1=[2,266],$Vl1=[1,4,6,42],$Vm1=[1,4,6,40,42,46,114,156,217,218,219,237,238,242,243],$Vn1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,88,89,91,93,95,96,97,98,101,114,132,156,192,195,200,217,218,219,224,225,226,227,234,237,238,242,243],$Vo1=[1,239],$Vp1=[1,4,6,40,42,46,114,156,195,217,218,219,224,225,226,227,234,237,238],$Vq1=[1,4,6,40,42,46,114,132,138,156,195,217,218,219,224,225,226,227,234,237,238],$Vr1=[1,249],$Vs1=[1,4,6,42,195],$Vt1=[1,260],$Vu1=[40,42],$Vv1=[1,263],$Vw1=[1,4,6,42,46,114,156],$Vx1=[1,271],$Vy1=[1,272],$Vz1=[1,274],$VA1=[1,273],$VB1=[1,270],$VC1=[1,283],$VD1=[1,278],$VE1=[1,279],$VF1=[1,284],$VG1=[1,4,6,40,46,114,156,217,218,219,234,237,238],$VH1=[1,290],$VI1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,88,89,93,95,96,101,114,132,156,192,195,200,217,218,219,224,225,226,227,234,237,238],$VJ1=[1,305],$VK1=[1,335],$VL1=[1,336],$VM1=[1,4,6,40,46,67,68,114,132,156,195,217,218,219,224,225,226,227,234,237,238],$VN1=[88,89,93],$VO1=[2,61],$VP1=[1,348],$VQ1=[1,342],$VR1=[1,343],$VS1=[1,344],$VT1=[1,345],$VU1=[1,346],$VV1=[1,347],$VW1=[1,355],$VX1=[1,4,6,40,46,114,156,217,218,219,237,238],$VY1=[2,268],$VZ1=[1,358],$V_1=[1,373],$V$1=[1,371],$V02=[1,372],$V12=[1,374],$V22=[1,375],$V32=[37,39,40,42,92,134,143,144,146,147],$V42=[2,36],$V52=[1,377],$V62=[37,40,42,92,134,143,144,146,147],$V72=[2,31],$V82=[1,379],$V92=[2,33],$Va2=[1,383],$Vb2=[37,40,42,46,92,134,143,144,146,147],$Vc2=[17,19,21,24,25,29,39,83,84,85,95,96,108],$Vd2=[2,272],$Ve2=[1,417],$Vf2=[2,38],$Vg2=[1,433],$Vh2=[2,143],$Vi2=[1,459],$Vj2=[1,4,6,40,42,46,114,156,217,218,219,237,238],$Vk2=[1,482],$Vl2=[1,483],$Vm2=[1,496],$Vn2=[1,497],$Vo2=[1,498],$Vp2=[1,499],$Vq2=[37,40,42,92,134,138,143,144,146,147];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"opt_semicolon":3,"SEMICOLON":4,"opt_eof":5,"EOF":6,"program":7,"stmt_list":8,"stmt":9,"schema_stmt":10,"cursor_stmt":11,"manipulative_stmt":12,"when_stmt":13,"boolean_literal":14,"BOOLEAN_LITERAL":15,"string_literal":16,"STRING_LITERAL":17,"number_literal":18,"NUMBER_LITERAL":19,"scientific_number_literal":20,"SCIENTIFIC_NUMBER_LITERAL":21,"literal":22,"identifier":23,"IDENTIFIER":24,"DOUBLE_QUOTE":25,"column":26,"cursor":27,"parameter":28,"PARAMETER":29,"range_variable":30,"userName":31,"alias":32,"opt_if_exists":33,"IF":34,"EXISTS":35,"opt_if_not_exists":36,"NOT":37,"opt_size":38,"(":39,")":40,"opt_size_and_precision":41,",":42,"opt_varying":43,"VARYING":44,"opt_timezone":45,"WITH":46,"TIMEZONE":47,"data_type":48,"CHARACTER":49,"VARCHAR":50,"BINARY":51,"VARBINARY":52,"NUMERIC":53,"DECIMAL":54,"INTEGER":55,"SMALLINT":56,"BIGINT":57,"BOOLEAN":58,"FLOAT":59,"REAL":60,"DOUBLE":61,"PRECISION":62,"DATE":63,"TIME":64,"TIMESTAMP":65,"search_condition":66,"OR":67,"AND":68,"predicate":69,"opt_not":70,"opt_escape":71,"ESCAPE":72,"atom_commalist":73,"atom":74,"comparison":75,"EQUAL":76,"NOT_EQUAL":77,"LESS_THAN":78,"GREATER_THAN":79,"LESS_THAN_EQUAL":80,"GREATER_THAN_EQUAL":81,"any_all_some":82,"ANY":83,"ALL":84,"SOME":85,"scalar_exp":86,"select_expr":87,"BETWEEN":88,"LIKE":89,"named_column_ref":90,"IS":91,"NULLX":92,"IN":93,"NOT_EXISTS":94,"PLUS":95,"MINUS":96,"ASTERISK":97,"DIVIDE":98,"function_ref":99,"selection_scalar":100,"AS":101,"PERIOD":102,"selection_commalist":103,"parameter_ref":104,"function_selection":105,"opt_distinct":106,"INDICATOR":107,"BUILTIN_FUNCTION":108,"table":109,"column_ref_spec":110,"schema_authorize":111,"schema_create_element":112,"schema_drop_element":113,"CREATE":114,"SCHEMA":115,"AUTHORIZATION":116,"schema_create_element_list":117,"schema_table":118,"schema_view":119,"schema_privilege":120,"drop_table":121,"drop_view":122,"TABLE":123,"table_element_commalist":124,"table_element":125,"column_def":126,"nameable_table_constraint_def":127,"column_def_opt_list":128,"column_def_opt":129,"referential_trigger_action":130,"CASCADE":131,"SET":132,"NULL":133,"DEFAULT":134,"RESTRICT":135,"NO_ACTION":136,"update_trigger":137,"ON":138,"UPDATE":139,"delete_trigger":140,"DELETE":141,"opt_referential_triggers":142,"UNIQUE":143,"PRIMARY":144,"KEY":145,"CHECK":146,"REFERENCES":147,"column_commalist":148,"table_constraint_def":149,"FOREIGN":150,"CONSTRAINT":151,"opt_column_commalist":152,"VIEW":153,"opt_with_check_option":154,"OPTION":155,"GRANT":156,"privilege_item":157,"opt_with_grant_option":158,"drop_privilege":159,"REVOKE":160,"privileges":161,"TO":162,"grantee_commalist":163,"opt_privilege_token":164,"PRIVILEGES":165,"operation_commalist":166,"operation":167,"SELECT":168,"INSERT":169,"grantee":170,"PUBLIC":171,"DROP":172,"DECLARE":173,"CURSOR":174,"FOR":175,"select_expr_ordered":176,"opt_work":177,"WORK":178,"close_statement":179,"commit_statement":180,"delete_statement_positioned":181,"delete_statement_searched":182,"fetch_statement":183,"insert_statement":184,"open_statement":185,"rollback_statement":186,"select_into_statement":187,"update_statement_positioned":188,"update_statement_searched":189,"CLOSE":190,"COMMIT":191,"FROM":192,"table_ref":193,"opt_join_ref_list":194,"WHERE":195,"CURRENT":196,"OF":197,"opt_where_clause":198,"FETCH":199,"INTO":200,"target_commalist":201,"values_or_query_spec":202,"VALUES":203,"insert_atom_commalist":204,"select_statement":205,"insert_atom":206,"OPEN":207,"ROLLBACK":208,"selection":209,"dynamic_table_ref_commalist":210,"opt_group_by_clause":211,"opt_having_clause":212,"opt_order_by_clause":213,"assignment_commalist":214,"assignment":215,"target":216,"INTERSECTION":217,"EXCEPT":218,"UNION":219,"DISTINCT":220,"opt_join_outer":221,"OUTER":222,"join_type":223,"LEFT":224,"RIGHT":225,"FULL":226,"INNER":227,"opt_join_on_clause":228,"join_ref":229,"JOIN":230,"dynamic_table_ref":231,"join_ref_list":232,"opt_alias":233,"GROUP":234,"BY":235,"column_ref_spec_commalist":236,"HAVING":237,"ORDER":238,"ordering_spec_commalist":239,"ordering_spec":240,"opt_asc_desc":241,"ASC":242,"DESC":243,"WHENEVER":244,"FOUND":245,"when_action":246,"SQLERROR":247,"GOTO":248,"CONTINUE":249,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEMICOLON",6:"EOF",15:"BOOLEAN_LITERAL",17:"STRING_LITERAL",19:"NUMBER_LITERAL",21:"SCIENTIFIC_NUMBER_LITERAL",24:"IDENTIFIER",25:"DOUBLE_QUOTE",29:"PARAMETER",34:"IF",35:"EXISTS",37:"NOT",39:"(",40:")",42:",",44:"VARYING",46:"WITH",47:"TIMEZONE",49:"CHARACTER",50:"VARCHAR",51:"BINARY",52:"VARBINARY",53:"NUMERIC",54:"DECIMAL",55:"INTEGER",56:"SMALLINT",57:"BIGINT",58:"BOOLEAN",59:"FLOAT",60:"REAL",61:"DOUBLE",62:"PRECISION",63:"DATE",64:"TIME",65:"TIMESTAMP",67:"OR",68:"AND",72:"ESCAPE",76:"EQUAL",77:"NOT_EQUAL",78:"LESS_THAN",79:"GREATER_THAN",80:"LESS_THAN_EQUAL",81:"GREATER_THAN_EQUAL",83:"ANY",84:"ALL",85:"SOME",88:"BETWEEN",89:"LIKE",91:"IS",92:"NULLX",93:"IN",94:"NOT_EXISTS",95:"PLUS",96:"MINUS",97:"ASTERISK",98:"DIVIDE",101:"AS",102:"PERIOD",107:"INDICATOR",108:"BUILTIN_FUNCTION",114:"CREATE",115:"SCHEMA",116:"AUTHORIZATION",123:"TABLE",131:"CASCADE",132:"SET",133:"NULL",134:"DEFAULT",135:"RESTRICT",136:"NO_ACTION",138:"ON",139:"UPDATE",141:"DELETE",143:"UNIQUE",144:"PRIMARY",145:"KEY",146:"CHECK",147:"REFERENCES",150:"FOREIGN",151:"CONSTRAINT",153:"VIEW",155:"OPTION",156:"GRANT",160:"REVOKE",162:"TO",165:"PRIVILEGES",168:"SELECT",169:"INSERT",171:"PUBLIC",172:"DROP",173:"DECLARE",174:"CURSOR",175:"FOR",178:"WORK",190:"CLOSE",191:"COMMIT",192:"FROM",195:"WHERE",196:"CURRENT",197:"OF",199:"FETCH",200:"INTO",203:"VALUES",207:"OPEN",208:"ROLLBACK",217:"INTERSECTION",218:"EXCEPT",219:"UNION",220:"DISTINCT",222:"OUTER",224:"LEFT",225:"RIGHT",226:"FULL",227:"INNER",230:"JOIN",234:"GROUP",235:"BY",237:"HAVING",238:"ORDER",242:"ASC",243:"DESC",244:"WHENEVER",245:"FOUND",247:"SQLERROR",248:"GOTO",249:"CONTINUE"},
productions_: [0,[3,0],[3,1],[5,0],[5,1],[7,3],[8,1],[8,3],[9,1],[9,1],[9,1],[9,1],[14,1],[16,1],[18,1],[20,1],[22,1],[22,1],[22,1],[23,1],[23,3],[26,1],[27,1],[28,1],[30,1],[31,1],[32,1],[33,0],[33,2],[36,0],[36,3],[38,0],[38,3],[41,0],[41,3],[41,5],[43,0],[43,1],[45,0],[45,2],[48,3],[48,2],[48,3],[48,2],[48,2],[48,2],[48,2],[48,1],[48,1],[48,1],[48,2],[48,1],[48,2],[48,3],[48,3],[48,3],[66,3],[66,3],[66,2],[66,3],[66,1],[70,0],[70,1],[71,0],[71,2],[73,1],[73,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[82,1],[82,1],[82,1],[69,3],[69,6],[69,6],[69,5],[69,4],[69,6],[69,6],[69,4],[69,4],[86,3],[86,3],[86,3],[86,3],[86,2],[86,2],[86,1],[86,1],[86,1],[86,3],[100,1],[100,2],[100,3],[100,3],[103,1],[103,3],[74,1],[74,1],[105,2],[105,2],[104,1],[104,2],[104,3],[99,4],[109,1],[109,3],[90,1],[90,3],[90,5],[110,1],[110,1],[10,1],[10,1],[10,1],[111,6],[117,1],[117,2],[112,1],[112,1],[112,1],[113,1],[113,1],[118,7],[124,1],[124,3],[125,1],[125,1],[126,2],[126,3],[128,1],[128,2],[130,1],[130,2],[130,2],[130,1],[130,1],[137,3],[140,3],[142,0],[142,1],[142,1],[142,2],[142,2],[129,2],[129,1],[129,2],[129,2],[129,2],[129,4],[129,3],[129,6],[149,4],[149,5],[149,8],[149,11],[149,4],[127,1],[127,3],[148,1],[148,3],[152,0],[152,3],[119,8],[154,0],[154,3],[120,3],[159,2],[157,5],[158,0],[158,3],[164,0],[164,1],[161,2],[161,1],[166,1],[166,3],[167,1],[167,1],[167,1],[167,2],[167,2],[163,1],[163,3],[170,1],[170,1],[121,4],[122,4],[11,5],[177,0],[177,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[179,2],[180,2],[181,8],[182,5],[183,4],[184,5],[202,4],[202,1],[206,1],[206,1],[204,1],[204,3],[185,2],[186,2],[187,11],[205,8],[214,0],[214,1],[214,3],[215,3],[215,3],[188,9],[189,6],[201,1],[201,3],[216,1],[176,2],[87,1],[87,3],[87,3],[87,3],[87,3],[87,4],[106,0],[106,1],[106,1],[209,2],[209,2],[221,0],[221,1],[223,2],[223,2],[223,2],[223,1],[228,0],[228,2],[229,4],[232,1],[232,2],[194,0],[194,1],[210,1],[210,3],[233,0],[233,2],[233,1],[193,2],[231,1],[231,4],[198,0],[198,2],[211,0],[211,3],[236,1],[236,3],[212,0],[212,2],[213,0],[213,3],[239,1],[239,3],[240,2],[241,0],[241,1],[241,1],[13,4],[13,3],[246,2],[246,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-2]; 
break;
case 6: case 65: case 99: case 120: case 128: case 134: case 179: case 186: case 217: case 224: case 230: case 254: case 258: case 270: case 276:
 this.$ = [$$[$0]]; 
break;
case 7: case 66: case 100: case 129: case 164: case 180: case 187: case 225: case 231: case 259: case 271: case 277:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 12:
 this.$ = new literal.BooleanLiteral(Boolean($$[$0]))
break;
case 13:
 this.$ = new literal.StringLiteral($$[$0].substring(1, $$[$0].length-1)); 
break;
case 14:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 15:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 19: case 64: case 161:
 this.$ = $$[$0] 
break;
case 20:
 this.$ = $$[$0-1] 
break;
case 32:
 this.$ = $$[$0-1].value 
break;
case 34:
 this.$ = [$$[$0-1].value] 
break;
case 35:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 37: case 39: case 242:
 this.$ = true 
break;
case 40:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 41:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 42:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 43:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 44:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 45:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 46:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 47:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 48:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 49:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 50:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 51:
 this.$ = new columnType.RealColumnType(); 
break;
case 52:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 53:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 54:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 55:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 56:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 57:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 58:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 59: case 94: case 166: case 235:
 this.$ = $$[$0-1]; 
break;
case 60: case 101: case 102: case 114: case 130: case 131: case 178: case 232: case 234: case 252: case 257: case 261: case 262: case 264: case 267: case 269: case 273: case 275:
 this.$ = $$[$0]; 
break;
case 62: case 169: case 174: case 194:
 this.$ = true; 
break;
case 67:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 68:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 69:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 70:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 71:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 72:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 73:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 74:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 75:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 76:

			if ($$[$0] instanceof select.SelectQuery) {
				this.$ = new pred.QueryComparisonPredicate($$[$0-2], $$[$0-1], null, $$[$0]);
			} else {
				this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]);
			}
		
break;
case 77:
 this.$ = new pred.QueryComparisonPredicate($$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2]); 
break;
case 78:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0], !!$$[$0-4]); 
break;
case 79:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-1], $$[$0], !!$$[$0-3]); 
break;
case 80:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 81:
 this.$ = new pred.InQueryPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 82:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 83:
 this.$ = new pred.ExistenceCheckPredicate($$[$0-2]); 
break;
case 84:
 this.$ = new pred.ExistenceCheckPredicate($$[$0-2], true);  
break;
case 85:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0]); 
break;
case 86:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0]); 
break;
case 87:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0]); 
break;
case 88:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0]); 
break;
case 89:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 90:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 91:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 92:
 this.$ = new scalar.NamedColumnRefExpr($$[$0]); 
break;
case 93:
 this.$ = new scalar.FunctionExpr($$[$0]); 
break;
case 95:
 this.$ = new select.ScalarSelectionExpr($$[$0]); 
break;
case 96:
 this.$ = new select.ScalarSelectionExpr($$[$0-1], $$[$0]); 
break;
case 97:
 this.$ = new select.ScalarSelectionExpr($$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = new select.TableAllSelectionExpr($$[$0-2]); 
break;
case 103:
 this.$ = new select.SingleScalarSelection($$[$0], $$[$0-1]); 
break;
case 104: case 244:
 this.$ = new select.AllSelection($$[$0-1]); 
break;
case 105:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 106:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 107:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 108:
 this.$ = new scalar.FunctionInvocation($$[$0-3], $$[$0-1]); 
break;
case 109:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 110:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 111:
 this.$ = new ref.NamedColumnRef($$[$0]); 
break;
case 112:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2]); 
break;
case 113:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2], $$[$0-4]); 
break;
case 115:
 this.$ = new ref.NumberColumnRef($$[$0].value); 
break;
case 119:
 this.$ = new create.AuthorizationSchema($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 121: case 135: case 255:
 this.$ = $$[$0-1]; this.$ = this.$.concat([$$[$0]]); 
break;
case 127:
 this.$ = new create.TableSchema($$[$0-3], $$[$0-1], $$[$0-4]); 
break;
case 132:
 this.$ = new create.ColumnSchema($$[$0-1], $$[$0]); 
break;
case 133:
 this.$ = new create.ColumnSchema($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 136:
 this.$ = constraint.ReferentialAction.CASCADE; 
break;
case 137:
 this.$ = constraint.ReferentialAction.SET_NULL; 
break;
case 138:
 this.$ = constraint.ReferentialAction.SET_DEFAULT; 
break;
case 139:
 this.$ = constraint.ReferentialAction.RESTRICT; 
break;
case 140:
 this.$ = constraint.ReferentialAction.NO_ACTION; 
break;
case 141:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.UPDATE, $$[$0]); 
break;
case 142:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.DELETE, $$[$0]); 
break;
case 143:
 this.$ = []; 
break;
case 144: case 145: case 163:
 this.$ = [$$[$0]] 
break;
case 146: case 147:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 148:
 this.$ = new constraint.NullConstraint(!!$$[$0-1]); 
break;
case 149:
 this.$ = new constraint.UniqueKeyConstraint(); 
break;
case 150:
 this.$ = new constraint.PrimaryKeyConstraint(); 
break;
case 151:
 this.$ = new constraint.DefaultConstraint($$[$0-1]); 
break;
case 152:
 this.$ = new constraint.DefaultNullConstraint(); 
break;
case 153:
 this.$ = new constraint.CheckConstraint($$[$0-1]); 
break;
case 154:
 this.$ = new constraint.ForeignKeyConstraint($$[$0-1], null, $$[$0]); 
break;
case 155:
 
		this.$ = new constraint.ForeignKeyConstraint($$[$0-4], $$[$0-2], $$[$0]); 
	
break;
case 156:
 this.$ = new constraint.UniqueKeyTableConstraint($$[$0-1]); 
break;
case 157:
 this.$ = new constraint.PrimaryKeyTableConstraint($$[$0-1]); 
break;
case 158:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-4], $$[$0-1], $$[$0]); 
	
break;
case 159:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-7], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 160:
 this.$ = new constraint.CheckTableConstraint($$[$0-1]); 
break;
case 162:
 this.$ = new constraint.NamedTableConstraint($$[$0-1], $$[$0]); 
break;
case 167:

			this.$ = new create.ViewSchema($$[$0-4], $$[$0-3], $$[$0-1], !!$$[$0], $$[$0-5])
		
break;
case 170:
 this.$ = $$[$0-1]; this.$.withGrant = !!$$[$0] 
break;
case 171:
 this.$ = new drop.DropPrivilegeSchema($$[$0]); 
break;
case 172:
 this.$ = new grant.PrivilegeSchema($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 177:
 this.$ = [new grant.AllGrantOperation()]; 
break;
case 181:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.SELECT); 
break;
case 182:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.INSERT); 
break;
case 183:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.DELETE); 
break;
case 184:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.UPDATE, $$[$0]); 
break;
case 185:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.REFERENCES, $$[$0]); 
break;
case 188:
 this.$ = new grant.PublicGrantee(); 
break;
case 189:
 this.$ = new grant.UserGrantee($$[$0]); 
break;
case 190:
 this.$ = new drop.DropTableSchema($$[$0], $$[$0-1]); 
break;
case 191:
 this.$ = new drop.DropViewSchema($$[$0], $$[$0-1]); 
break;
case 192:
 this.$ = new cursor.CursorDefinitionStatement($$[$0-3], $$[$0]); 
break;
case 207:
 this.$ = new cursor.CloseStatement($$[$0]); 
break;
case 208:
 this.$ = new transaction.CommitStatement(); 
break;
case 209:
 this.$ = new cursor.DeleteCursorQuery($$[$0-5], $$[$0-4], $$[$0]); 
break;
case 210:
 this.$ = new del.DeleteQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 211:
 this.$ = new cursor.FetchStatement($$[$0-2], $$[$0]); 
break;
case 212:
 this.$ = new insert.InsertQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 213:
 this.$ = new insert.AtomValues($$[$0-1]); 
break;
case 214:
 this.$ = new insert.QueryValues($$[$0]); 
break;
case 218:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]);  
break;
case 219:
 this.$ = new cursor.OpenStatement($$[$0]); 
break;
case 220:
 this.$ = new transaction.RollbackStatement(); 
break;
case 221:
 
		this.$ = new select.WritableSelectQuery(new select.SingleSelectQuery($$[$0-9], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]), $$[$0-7], $$[$0]);
	
break;
case 222:
 
		this.$ = new select.SingleSelectQuery($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
	
break;
case 226:
 this.$ = new update.Assignment($$[$0-2], $$[$0]); 
break;
case 227:
 this.$ = new update.Assignment($$[$0-2], null); 
break;
case 228:

			this.$ = new cursor.UpdateCursorQuery($$[$0-7], $$[$0-6], $$[$0-4], $$[$0]); 
		
break;
case 229:

			this.$ = new update.UpdateQuery($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
		
break;
case 233:
 this.$ = new select.SortableSelectQuery($$[$0-1], $$[$0]); 
break;
case 236:
 this.$ = new select.BinarySelectQuery($$[$0-2], select.BinaryQueryOperator.INTERSECTION, $$[$0]); 
break;
case 237:
 this.$ = new select.BinarySelectQuery($$[$0-2], select.BinaryQueryOperator.EXCEPT, $$[$0]); 
break;
case 238:
 this.$ = new select.BinarySelectQuery($$[$0-2], select.BinaryQueryOperator.UNION, $$[$0]); 
break;
case 239:
 this.$ = new select.BinarySelectQuery($$[$0-3], select.BinaryQueryOperator.UNION, $$[$0]);	
break;
case 240: case 241:
 this.$ = false 
break;
case 243:
 this.$ = new select.ScalarSelection($$[$0], $$[$0-1]); 
break;
case 247:
 this.$ = select.JoinType.LEFT; 
break;
case 248:
 this.$ = select.JoinType.RIGHT; 
break;
case 249:
 this.$ = select.JoinType.FULL; 
break;
case 250:
 this.$ = select.JoinType.INNER; 
break;
case 253:
 this.$ = new select.JoinRef($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 263:
 this.$ = new select.NamedFromTableRef($$[$0-1], $$[$0]); 
break;
case 265:
 this.$ = new select.QueryFromTableRef($$[$0-2], $$[$0]); 
break;
case 278:
 this.$ = new order.OrderBy($$[$0-1], $$[$0]); 
break;
case 280:
 this.$ = order.OrderByDirection.ASC; 
break;
case 281:
 this.$ = order.OrderByDirection.DESC; 
break;
case 282:
 this.$ = new when.WheneverNotFound($$[$0]); 
break;
case 283:
 this.$ = new when.WheneverSQLError($$[$0]); 
break;
case 284:
 this.$ = new when.GotoWhenAction($$[$0]); 
break;
case 285:
 this.$ = new when.ContinueWhenAction(); 
break;
}
},
table: [{7:1,8:2,9:3,10:4,11:5,12:6,13:7,39:$V0,87:38,111:8,112:9,113:10,114:$V1,118:26,119:27,120:28,121:29,122:30,139:$V2,141:$V3,156:$V4,168:$V5,169:$V6,172:$V7,173:$V8,176:20,179:12,180:13,181:14,182:15,183:16,184:17,185:18,186:19,187:21,188:22,189:23,190:$V9,191:$Va,199:$Vb,205:43,207:$Vc,208:$Vd,244:$Ve},{1:[3]},o($Vf,[2,1],{3:45,4:[1,46]}),o($Vg,[2,6]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,116]),o($Vg,[2,117]),o($Vg,[2,118]),{23:48,24:$Vh,25:$Vi,27:47},o($Vg,[2,195]),o($Vg,[2,196]),o($Vg,[2,197]),o($Vg,[2,198]),o($Vg,[2,199]),o($Vg,[2,200]),o($Vg,[2,201]),o($Vg,[2,202]),o($Vg,[2,203]),o($Vg,[2,204]),o($Vg,[2,205]),o($Vg,[2,206]),{37:[1,51],247:[1,52]},{115:[1,53],123:$Vj,153:$Vk},o($Vl,[2,122]),o($Vl,[2,123]),o($Vl,[2,124]),o($Vg,[2,125]),o($Vg,[2,126]),{23:48,24:$Vh,25:$Vi,27:56},o($Vg,$Vm,{177:57,178:$Vn}),{192:[1,59]},{23:48,24:$Vh,25:$Vi,27:60},{200:[1,61]},{23:48,24:$Vh,25:$Vi,27:62},o($Vg,$Vm,{177:63,178:$Vn}),o($Vg,$Vo,{213:64,217:$Vp,218:$Vq,219:$Vr,238:$Vs}),o($Vt,$Vu,{209:69,106:70,84:$Vv,220:$Vw}),{23:75,24:$Vh,25:$Vi,109:74,193:73},{84:[1,78],139:$Vx,141:$Vy,147:$Vz,157:76,161:77,166:79,167:80,168:$VA,169:$VB},{123:[1,86],153:[1,87]},o($VC,[2,234]),{39:$V0,87:88,168:$VD,205:43},{1:[2,3],5:90,6:[1,91]},o($Vf,[2,2],{10:4,11:5,12:6,13:7,111:8,112:9,113:10,179:12,180:13,181:14,182:15,183:16,184:17,185:18,186:19,176:20,187:21,188:22,189:23,118:26,119:27,120:28,121:29,122:30,87:38,205:43,9:92,39:$V0,114:$V1,139:$V2,141:$V3,156:$V4,168:$V5,169:$V6,172:$V7,173:$V8,190:$V9,191:$Va,199:$Vb,207:$Vc,208:$Vd,244:$Ve}),{174:[1,93]},o([1,4,6,174,200],[2,22]),o($VE,[2,19]),{24:[1,94]},{245:[1,95]},{246:96,248:$VF,249:$VG},{23:75,24:$Vh,25:$Vi,109:99},o($VH,$VI,{36:100,34:$VJ}),o($VH,$VI,{36:102,34:$VJ}),o($Vg,[2,207]),o($Vg,[2,208]),o($Vg,[2,194]),{23:75,24:$Vh,25:$Vi,109:74,193:103},{200:[1,104]},{23:75,24:$Vh,25:$Vi,109:105},o($Vg,[2,219]),o($Vg,[2,220]),o($Vg,[2,233]),{39:$V0,87:106,168:$VD,205:43},{39:$V0,87:107,168:$VD,205:43},{39:$V0,84:[1,109],87:108,168:$VD,205:43},{235:[1,110]},{192:$VK,200:[1,111]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:117,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:116,90:121,95:$VQ,96:$VR,97:[1,114],99:122,100:115,103:113,104:124,108:$VS},o($Vt,[2,241]),o($Vt,[2,242]),{132:$VT,194:135,223:138,224:$VU,225:$VV,226:$VW,227:$VX,229:137,232:136},o($VY,$VZ,{233:143,30:145,23:146,24:$Vh,25:$Vi,101:$V_}),o($V$,[2,109],{102:[1,147]}),o($Vl,[2,173],{158:148,46:[1,149]}),{138:[1,150]},{138:[2,175],164:151,165:[1,152]},{42:[1,153],138:[2,178]},o($V01,[2,179]),o($V01,[2,181]),o($V01,[2,182]),o($V01,[2,183]),o($V01,$V11,{152:154,39:$V21}),o($V01,$V11,{152:156,39:$V21}),o($VH,$V31,{33:157,34:$V41}),o($VH,$V31,{33:159,34:$V41}),{40:[1,160],217:$Vp,218:$Vq,219:$Vr},o($Vt,$Vu,{106:70,209:161,84:$Vv,220:$Vw}),{1:[2,5]},{1:[2,4]},o($Vg,[2,7]),{175:[1,162]},{25:[1,163]},{246:164,248:$VF,249:$VG},o($Vg,[2,283]),{23:165,24:$Vh,25:$Vi},o($Vg,[2,285]),{116:[1,166]},{23:75,24:$Vh,25:$Vi,109:167},{37:[1,168]},{23:75,24:$Vh,25:$Vi,109:169},o([1,4,6,195],$VT,{232:136,229:137,223:138,194:170,224:$VU,225:$VV,226:$VW,227:$VX}),{28:127,29:$VO,104:173,201:171,216:172},o([168,203],$V11,{152:174,39:$V21}),o($VC,[2,236]),o($VC,[2,237]),o($VC,[2,238]),{39:$V0,87:175,168:$VD,205:43},{18:180,19:$VM,23:181,24:$Vh,25:$Vi,90:179,110:178,239:176,240:177},{23:75,24:$Vh,25:$Vi,109:74,193:182},{23:75,24:$Vh,25:$Vi,39:$V51,109:74,193:185,210:183,231:184},o($V61,[2,243],{42:[1,187]}),o($V61,[2,244]),o($V71,[2,99]),o($V81,[2,95],{32:188,23:194,24:$Vh,25:$Vi,95:$V91,96:$Va1,97:$Vb1,98:$Vc1,101:[1,189]}),o([24,25,40,42,95,96,97,98,101,192,200],$Vd1,{102:[1,195]}),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:196,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:197,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($Ve1,[2,91]),o($Ve1,$Vf1),o($Ve1,[2,93]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:198,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($Ve1,[2,101]),o($Ve1,[2,102]),{39:[1,199]},o($Ve1,[2,105],{28:200,29:$VO,107:[1,201]}),o($Vg1,[2,16]),o($Vg1,[2,17]),o($Vg1,[2,18]),o([1,4,6,24,25,29,37,40,42,46,67,68,76,77,78,79,80,81,88,89,93,95,96,97,98,101,107,114,132,156,192,195,200,217,218,219,224,225,226,227,234,237,238],[2,23]),o([1,4,6,24,25,37,40,42,46,67,68,72,76,77,78,79,80,81,88,89,92,93,95,96,97,98,101,114,132,134,143,144,146,147,156,192,195,200,217,218,219,224,225,226,227,234,237,238],[2,13]),o([1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,88,89,92,93,95,96,97,98,101,114,132,134,143,144,146,147,156,192,195,200,217,218,219,224,225,226,227,234,237,238,242,243],[2,14]),o($Vg1,[2,15]),{132:[1,202]},o([1,4,6,40,46,114,132,156,195,217,218,219,234,237,238],[2,257],{223:138,229:203,224:$VU,225:$VV,226:$VW,227:$VX}),o($Vh1,[2,254]),{230:[1,204]},{221:205,222:$Vi1,230:$Vj1},{221:207,222:$Vi1,230:$Vj1},{221:208,222:$Vi1,230:$Vj1},{230:[2,250]},o($VY,[2,263]),{23:146,24:$Vh,25:$Vi,30:209},o($VY,[2,262]),o($VY,[2,24]),{23:210,24:$Vh,25:$Vi},o($Vl,[2,170]),{156:[1,211]},{23:75,24:$Vh,25:$Vi,109:212},{138:[2,177]},{138:[2,176]},{139:$Vx,141:$Vy,147:$Vz,167:213,168:$VA,169:$VB},o($V01,[2,184]),{23:216,24:$Vh,25:$Vi,26:215,148:214},o($V01,[2,185]),{23:75,24:$Vh,25:$Vi,109:217},{35:[1,218]},{23:75,24:$Vh,25:$Vi,109:219},o($VC,[2,235]),{192:$VK},{39:$V0,87:38,168:$VD,176:220,205:43},o($VE,[2,20]),o($Vg,[2,282]),o($Vg,[2,284]),{23:222,24:$Vh,25:$Vi,31:221},{39:[1,223]},{35:[1,224]},{39:$V21,101:$V11,152:225},o($Vg,$Vk1,{198:227,195:[1,226]}),o($Vg,[2,211],{42:[1,228]}),o($Vl1,[2,230]),o($Vl1,[2,232]),{168:$VD,202:229,203:[1,230],205:231},o($VC,[2,239]),o($Vg,[2,275],{42:[1,232]}),o($Vl1,[2,276]),o($Vl1,[2,279],{241:233,242:[1,234],243:[1,235]}),o($Vm1,[2,114]),o($Vm1,[2,115]),o($Vn1,$Vd1,{102:[1,236]}),{192:[1,237]},o([1,4,6,40,46,114,156,195,217,218,219,234,237,238],$VT,{232:136,229:137,223:138,194:238,42:$Vo1,224:$VU,225:$VV,226:$VW,227:$VX}),o($Vp1,[2,258]),o($Vq1,[2,264]),{39:$V0,87:240,168:$VD,205:43},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:117,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:116,90:121,95:$VQ,96:$VR,99:122,100:241,104:124,108:$VS},o($V81,[2,96]),{23:194,24:$Vh,25:$Vi,32:242},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:243,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:244,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:245,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:246,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($V81,[2,26]),{23:248,24:$Vh,25:$Vi,97:[1,247]},o($Ve1,[2,89]),o($Ve1,[2,90]),{40:$Vr1,95:$V91,96:$Va1,97:$Vb1,98:$Vc1},o($Vt,$Vu,{105:250,106:251,84:$Vv,220:$Vw}),o($Ve1,[2,106]),{28:252,29:$VO},o($Vs1,[2,223],{23:216,214:253,215:254,26:255,24:$Vh,25:$Vi}),o($Vh1,[2,255]),{23:75,24:$Vh,25:$Vi,39:$V51,109:74,193:185,231:256},{230:[2,247]},{230:[2,246]},{230:[2,248]},{230:[2,249]},o($VY,[2,261]),o($V$,[2,110]),{155:[1,257]},{162:[1,258]},o($V01,[2,180]),{40:[1,259],42:$Vt1},o($Vu1,[2,163]),o([40,42,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,76],[2,21]),o($Vg,[2,190]),o($VH,[2,28]),o($Vg,[2,191]),o($Vg,[2,192]),{112:262,114:$Vv1,117:261,118:26,119:27,120:28,156:$V4},o($Vw1,[2,25]),{23:216,24:$Vh,25:$Vi,26:268,124:264,125:265,126:266,127:267,143:$Vx1,144:$Vy1,146:$Vz1,149:269,150:$VA1,151:$VB1},o($VH,[2,30]),{101:[1,275]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:277,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS,196:[1,276]},o($Vg,[2,210]),{28:127,29:$VO,104:173,216:285},o($Vg,[2,212]),{39:[1,286]},o($Vg,[2,214]),{18:180,19:$VM,23:181,24:$Vh,25:$Vi,90:179,110:178,240:287},o($Vl1,[2,278]),o($Vl1,[2,280]),o($Vl1,[2,281]),{23:248,24:$Vh,25:$Vi},{23:75,24:$Vh,25:$Vi,39:$V51,109:74,193:185,210:288,231:184},o($VG1,$Vk1,{198:289,195:$VH1}),{23:75,24:$Vh,25:$Vi,39:$V51,109:74,193:185,231:291},{40:[1,292],217:$Vp,218:$Vq,219:$Vr},o($V71,[2,100]),o($V81,[2,97]),o($VI1,[2,85],{97:$Vb1,98:$Vc1}),o($VI1,[2,86],{97:$Vb1,98:$Vc1}),o($Ve1,[2,87]),o($Ve1,[2,88]),o($V81,[2,98]),o($Vn1,[2,112],{102:[1,293]}),o($Ve1,[2,94]),{40:[1,294]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:117,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:116,90:121,95:$VQ,96:$VR,97:[1,296],99:122,100:295,104:124,108:$VS},o($Ve1,[2,107]),o($Vg,$Vk1,{198:298,42:[1,299],195:[1,297]}),o($Vs1,[2,224]),{76:[1,300]},o($Vh1,[2,251],{228:301,138:[1,302]}),o($Vl,[2,174]),{23:222,24:$Vh,25:$Vi,31:306,163:303,170:304,171:$VJ1},o([42,101,138,168,203],[2,166]),{23:216,24:$Vh,25:$Vi,26:307},o($Vg,[2,119],{118:26,119:27,120:28,112:308,114:$Vv1,156:$V4}),o($Vl,[2,120]),{123:$Vj,153:$Vk},{40:[1,309],42:[1,310]},o($Vu1,[2,128]),o($Vu1,[2,130]),o($Vu1,[2,131]),{48:311,49:[1,312],50:[1,313],51:[1,314],52:[1,315],53:[1,316],54:[1,317],55:[1,318],56:[1,319],57:[1,320],58:[1,321],59:[1,322],60:[1,323],61:[1,324],63:[1,325],64:[1,326],65:[1,327]},o($Vu1,[2,161]),{23:328,24:$Vh,25:$Vi},{39:[1,329]},{145:[1,330]},{145:[1,331]},{39:[1,332]},{39:$V0,87:333,168:$VD,205:43},{197:[1,334]},o($VG1,[2,267],{67:$VK1,68:$VL1}),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:337,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:338,69:280,74:120,86:339,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($VM1,[2,60]),o($VN1,$VO1,{75:340,70:341,37:$VP1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1,80:$VU1,81:$VV1,95:$V91,96:$Va1,97:$Vb1,98:$Vc1}),o([37,40,76,77,78,79,80,81,88,89,93,95,96,97,98],$Vf1,{91:[1,349]}),{39:[1,350]},{39:[1,351]},o($Vl1,[2,231]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,28:127,29:$VO,74:354,92:$VW1,104:124,204:352,206:353},o($Vl1,[2,277]),o([1,4,6,195,234,237,238],$VT,{232:136,229:137,223:138,194:356,42:$Vo1,224:$VU,225:$VV,226:$VW,227:$VX}),o($VX1,$VY1,{211:357,234:$VZ1}),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:277,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($Vp1,[2,259]),o($Vq1,$VZ,{30:145,23:146,233:359,24:$Vh,25:$Vi,101:$V_}),{23:360,24:$Vh,25:$Vi},o($Ve1,[2,108]),{40:[2,103]},{40:[2,104]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:277,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS,196:[1,361]},o($Vg,[2,229]),{23:216,24:$Vh,25:$Vi,26:255,215:362},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:363,90:121,92:[1,364],95:$VQ,96:$VR,99:122,104:124,108:$VS},o($Vh1,[2,253]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:365,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o([1,4,6,46,114,156],[2,172],{42:[1,366]}),o($Vw1,[2,186]),o($Vw1,[2,188]),o($Vw1,[2,189]),o($Vu1,[2,164]),o($Vl,[2,121]),o($Vl,[2,127]),{23:216,24:$Vh,25:$Vi,26:268,125:367,126:266,127:267,143:$Vx1,144:$Vy1,146:$Vz1,149:269,150:$VA1,151:$VB1},o($Vu1,[2,132],{128:368,129:369,70:370,37:$VP1,92:$VO1,134:$V_1,143:$V$1,144:$V02,146:$V12,147:$V22}),o($V32,$V42,{43:376,44:$V52}),o($V62,$V72,{38:378,39:$V82}),o($V32,$V42,{43:380,44:$V52}),o($V62,$V72,{38:381,39:$V82}),o($V62,$V92,{41:382,39:$Va2}),o($V62,$V92,{41:384,39:$Va2}),o($V62,$V72,{38:385,39:$V82}),o($V62,[2,47]),o($V62,[2,48]),o($V62,[2,49]),o($V62,$V72,{38:386,39:$V82}),o($V62,[2,51]),{62:[1,387]},o($Vb2,$V72,{38:388,39:$V82}),o($Vb2,$V72,{38:389,39:$V82}),o($Vb2,$V72,{38:390,39:$V82}),{143:$Vx1,144:$Vy1,146:$Vz1,149:391,150:$VA1},{23:216,24:$Vh,25:$Vi,26:215,148:392},{39:[1,393]},{39:[1,394]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:395,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($Vl,[2,168],{154:396,46:[1,397],217:$Vp,218:$Vq,219:$Vr}),{23:48,24:$Vh,25:$Vi,27:398},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:399,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:400,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($VM1,[2,58]),{40:[1,401],67:$VK1,68:$VL1},o($VN1,$VO1,{75:340,70:341,37:$VP1,40:$Vr1,76:$VQ1,77:$VR1,78:$VS1,79:$VT1,80:$VU1,81:$VV1,95:$V91,96:$Va1,97:$Vb1,98:$Vc1}),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,82:403,83:[1,404],84:[1,405],85:[1,406],86:402,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{88:[1,407],89:[1,408],93:[1,409]},o($Vc2,[2,67]),o($Vc2,[2,68]),o($Vc2,[2,69]),o($Vc2,[2,70]),o($Vc2,[2,71]),o($Vc2,[2,72]),o([88,89,92,93],[2,62]),{37:$VP1,70:410,92:$VO1},{39:$V0,87:411,168:$VD,205:43},{39:$V0,87:412,168:$VD,205:43},{40:[1,413],42:[1,414]},o($Vu1,[2,217]),o($Vu1,[2,215]),o($Vu1,[2,216]),o([1,4,6,234,237,238],$Vk1,{198:415,195:$VH1}),o($VC,$Vd2,{212:416,237:$Ve2}),{235:[1,418]},o($Vq1,[2,265]),o($Vn1,[2,113]),{197:[1,419]},o($Vs1,[2,225]),o($Vs1,[2,226],{95:$V91,96:$Va1,97:$Vb1,98:$Vc1}),o($Vs1,[2,227]),o($Vh1,[2,252],{67:$VK1,68:$VL1}),{23:222,24:$Vh,25:$Vi,31:306,170:420,171:$VJ1},o($Vu1,[2,129]),o($Vu1,[2,133],{70:370,129:421,37:$VP1,92:$VO1,134:$V_1,143:$V$1,144:$V02,146:$V12,147:$V22}),o($V62,[2,134]),{92:[1,422]},o($V62,[2,149]),{145:[1,423]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:424,92:[1,425]},{39:[1,426]},{23:75,24:$Vh,25:$Vi,109:427},o($V62,$V72,{38:428,39:$V82}),o($V32,[2,37]),o($V62,[2,41]),{18:429,19:$VM},o($V62,$V72,{38:430,39:$V82}),o($V62,[2,43]),o($V62,[2,44]),{18:431,19:$VM},o($V62,[2,45]),o($V62,[2,46]),o($V62,[2,50]),o($V62,[2,52]),o($V62,$Vf2,{45:432,46:$Vg2}),o($V62,$Vf2,{45:434,46:$Vg2}),o($V62,$Vf2,{45:435,46:$Vg2}),o($Vu1,[2,162]),{40:[1,436],42:$Vt1},{23:216,24:$Vh,25:$Vi,26:215,148:437},{23:216,24:$Vh,25:$Vi,26:215,148:438},{40:[1,439],67:$VK1,68:$VL1},o($Vl,[2,167]),{146:[1,440]},o($Vg,[2,209]),o([1,4,6,40,46,67,114,132,156,195,217,218,219,224,225,226,227,234,237,238],[2,56],{68:$VL1}),o($VM1,[2,57]),o($VM1,[2,59]),o($VM1,[2,76],{95:$V91,96:$Va1,97:$Vb1,98:$Vc1}),{39:[1,441]},{39:[2,73]},{39:[2,74]},{39:[2,75]},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:442,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},{16:443,17:$VL},{39:[1,444]},{92:[1,445]},{40:[1,446],217:$Vp,218:$Vq,219:$Vr},{40:[1,447],217:$Vp,218:$Vq,219:$Vr},o($Vg,[2,213]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,28:127,29:$VO,74:354,92:$VW1,104:124,206:448},o([1,4,6,237,238],$VY1,{211:449,234:$VZ1}),o($VC,[2,222]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:450,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},{18:180,19:$VM,23:181,24:$Vh,25:$Vi,90:179,110:452,236:451},{23:48,24:$Vh,25:$Vi,27:453},o($Vw1,[2,187]),o($V62,[2,135]),o($V62,[2,148]),o($V62,[2,150]),o($V62,[2,151]),o($V62,[2,152]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,35:$VC1,37:$VD1,39:$VE1,66:454,69:280,74:120,86:281,90:282,94:$VF1,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($V62,$Vh2,{142:455,137:457,140:458,39:[1,456],138:$Vi2}),o($V62,[2,40]),{40:[1,460]},o($V62,[2,42]),{40:[1,461],42:[1,462]},o($V62,[2,53]),{47:[1,463]},o($V62,[2,54]),o($V62,[2,55]),o($Vu1,[2,156]),{40:[1,464],42:$Vt1},{40:[1,465],42:$Vt1},o($Vu1,[2,160]),{155:[1,466]},{39:$V0,87:467,168:$VD,205:43},{68:[1,468],95:$V91,96:$Va1,97:$Vb1,98:$Vc1},o($VM1,[2,63],{71:469,72:[1,470]}),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,28:127,29:$VO,39:$V0,73:472,74:473,87:471,104:124,168:$VD,205:43},o($VM1,[2,80]),o($VM1,[2,83]),o($VM1,[2,84]),o($Vu1,[2,218]),o([1,4,6,238],$Vd2,{212:474,237:$Ve2}),o($VC,[2,273],{67:$VK1,68:$VL1}),o($VX1,[2,269],{42:[1,475]}),o($Vj2,[2,270]),o($Vg,[2,228]),{40:[1,476],67:$VK1,68:$VL1},o($V62,[2,154]),{23:216,24:$Vh,25:$Vi,26:215,148:477},o($V62,[2,144],{140:478,138:[1,479]}),o($V62,[2,145],{137:480,138:[1,481]}),{139:$Vk2,141:$Vl2},o($Vb2,[2,32]),o($V62,[2,34]),{18:484,19:$VM},o($V62,[2,39]),o($Vu1,[2,157]),{147:[1,485]},o($Vl,[2,169]),{40:[1,486],217:$Vp,218:$Vq,219:$Vr},{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,23:181,24:$Vh,25:$Vi,28:127,29:$VO,39:$VP,74:120,86:487,90:121,95:$VQ,96:$VR,99:122,104:124,108:$VS},o($VM1,[2,79]),{16:488,17:$VL},{40:[1,489],217:$Vp,218:$Vq,219:$Vr},{40:[1,490],42:[1,491]},o($Vu1,[2,65]),o($Vg,$Vo,{213:492,238:$Vs}),{18:180,19:$VM,23:181,24:$Vh,25:$Vi,90:179,110:493},o($V62,[2,153]),{40:[1,494],42:$Vt1},o($V62,[2,146]),{141:$Vl2},o($V62,[2,147]),{139:$Vk2},{130:495,131:$Vm2,132:$Vn2,135:$Vo2,136:$Vp2},{130:500,131:$Vm2,132:$Vn2,135:$Vo2,136:$Vp2},{40:[1,501]},{23:75,24:$Vh,25:$Vi,109:502},o($VM1,[2,77]),o($VM1,[2,78],{95:$V91,96:$Va1,97:$Vb1,98:$Vc1}),o($VM1,[2,64]),o($VM1,[2,81]),o($VM1,[2,82]),{16:128,17:$VL,18:129,19:$VM,20:130,21:$VN,22:125,28:127,29:$VO,74:503,104:124},o($Vg,[2,221]),o($Vj2,[2,271]),o($V62,$Vh2,{137:457,140:458,142:504,138:$Vi2}),o($Vq2,[2,141]),o($Vq2,[2,136]),{133:[1,505],134:[1,506]},o($Vq2,[2,139]),o($Vq2,[2,140]),o($Vq2,[2,142]),o($V62,[2,35]),o($Vu1,$Vh2,{137:457,140:458,142:507,39:[1,508],138:$Vi2}),o($Vu1,[2,66]),o($V62,[2,155]),o($Vq2,[2,137]),o($Vq2,[2,138]),o($Vu1,[2,158]),{23:216,24:$Vh,25:$Vi,26:215,148:509},{40:[1,510],42:$Vt1},o($Vu1,$Vh2,{137:457,140:458,142:511,138:$Vi2}),o($Vu1,[2,159])],
defaultActions: {90:[2,5],91:[2,4],142:[2,250],151:[2,177],152:[2,176],205:[2,247],206:[2,246],207:[2,248],208:[2,249],295:[2,103],296:[2,104],404:[2,73],405:[2,74],406:[2,75]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};




















/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 24;
break;
case 1:return 'ACTION';
break;
case 2:return 84;
break;
case 3:return 68;
break;
case 4:return 83;
break;
case 5:return 101;
break;
case 6:return 242;
break;
case 7:return 116;
break;
case 8:return 88;
break;
case 9:return 57;
break;
case 10:return 51;
break;
case 11:return 58;
break;
case 12:return 235;
break;
case 13:return 131;
break;
case 14:return 49;
break;
case 15:return 146;
break;
case 16:return 190;
break;
case 17:return 191;
break;
case 18:return 151;
break;
case 19:return 249;
break;
case 20:return 114;
break;
case 21:return 196;
break;
case 22:return 174;
break;
case 23:return 63;
break;
case 24:return 54;
break;
case 25:return 173;
break;
case 26:return 134;
break;
case 27:return 141;
break;
case 28:return 243;
break;
case 29:return 220;
break;
case 30:return 61;
break;
case 31:return 172;
break;
case 32:return 72;
break;
case 33:return 218;
break;
case 34:return 35;
break;
case 35:return 199;
break;
case 36:return 59;
break;
case 37:return 175;
break;
case 38:return 150;
break;
case 39:return 245;
break;
case 40:return 192;
break;
case 41:return 226;
break;
case 42:return 248;
break;
case 43:return 156;
break;
case 44:return 234;
break;
case 45:return 237;
break;
case 46:return 34;
break;
case 47:return 93;
break;
case 48:return 107;
break;
case 49:return 227;
break;
case 50:return 169;
break;
case 51:return 55;
break;
case 52:return 217;
break;
case 53:return 200;
break;
case 54:return 55;
break;
case 55:return 91;
break;
case 56:return 230;
break;
case 57:return 145;
break;
case 58:return 'LANGUAGE';
break;
case 59:return 224;
break;
case 60:return 89;
break;
case 61:return 'NO'
break;
case 62:return 94;
break;
case 63:return 37;
break;
case 64:return 92;
break;
case 65:return 53;
break;
case 66:return 197;
break;
case 67:return 138;
break;
case 68:return 207;
break;
case 69:return 155;
break;
case 70:return 67;
break;
case 71:return 238;
break;
case 72:return 222;
break;
case 73:return 62;
break;
case 74:return 144;
break;
case 75:return 165;
break;
case 76:return 'PROCEDURE';
break;
case 77:return 171;
break;
case 78:return 60;
break;
case 79:return 147;
break;
case 80:return 135;
break;
case 81:return 225;
break;
case 82:return 208;
break;
case 83:return 115;
break;
case 84:return 168;
break;
case 85:return 132;
break;
case 86:return 56;
break;
case 87:return 85;
break;
case 88:return 'SQLCODE';
break;
case 89:return 123;
break;
case 90:return 64;
break;
case 91:return 65;
break;
case 92:return 162;
break;
case 93:return 219;
break;
case 94:return 143;
break;
case 95:return 139;
break;
case 96:return 'USER';
break;
case 97:return 203;
break;
case 98:return 52;
break;
case 99:return 50;
break;
case 100:return 44;
break;
case 101:return 153;
break;
case 102:return 244;
break;
case 103:return 195;
break;
case 104:return 46;
break;
case 105:return 178;
break;
case 106:return 15;
break;
case 107:return 17;
break;
case 108:return 19;
break;
case 109:return 21;
break;
case 110:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|TOTAL|GROUP_CONCAT|LOWER|UPPER)$/i)) {
		return 108;
	} else {
		return 24;
	}

break;
case 111:return 'COMMENTS';
break;
case 112:return 29;
break;
case 113:return 25;
break;
case 114:return 'PERCENT';
break;
case 115:return 'AMPERSAND';
break;
case 116:return 'QUOTE';
break;
case 117:return 39;
break;
case 118:return 40;
break;
case 119:return 102;
break;
case 120:return 'COLON';
break;
case 121:return 42;
break;
case 122:return 4;
break;
case 123:return 'VERTICAL_BAR';
break;
case 124:return 'QUESTION_MARK';
break;
case 125:return 'CARET';
break;
case 126:return 97;
break;
case 127:return 98;
break;
case 128:return 95;
break;
case 129:return 96;
break;
case 130:return 76;
break;
case 131:return 80;
break;
case 132:return 81;
break;
case 133:return 77;
break;
case 134:return 78;
break;
case 135:return 79;
break;
case 136:/* Skip */;
break;
case 137:return 6;
break;
}
},
rules: [/^(?:"[A-Za-z][A-Za-z0-9_]*")/i,/^(?:ACTION\b)/i,/^(?:ALL\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CHAR(ACTER)?)/i,/^(?:CHECK\b)/i,/^(?:CLOSE\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONTINUE\b)/i,/^(?:CREATE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:DATE\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:FETCH\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FOUND\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GO[ \t]TO\b)/i,/^(?:GRANT\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INDICATOR\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTERSECTION\b)/i,/^(?:INTO\b)/i,/^(?:INT\b)/i,/^(?:IS\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:NO\b)/i,/^(?:NOT EXISTS\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NUMERIC\b)/i,/^(?:OF\b)/i,/^(?:ON\b)/i,/^(?:OPEN\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PRECISION\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PUBLIC\b)/i,/^(?:REAL\b)/i,/^(?:REFERENCES\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:SCHEMA\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SMALLINT\b)/i,/^(?:SOME\b)/i,/^(?:SQLCODE\b)/i,/^(?:TABLE\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USER\b)/i,/^(?:VALUES\b)/i,/^(?:VARBINARY\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:WORK\b)/i,/^(?:TRUE|FALSE\b)/i,/^(?:'[^'\n]*')/i,/^(?:\d+(\.\d*)?|\.\d+)/i,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:--\.\*)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:")/i,/^(?:%)/i,/^(?:&)/i,/^(?:')/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\|)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:=)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:[ \r\t\n]+)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();