import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as grant from '../schema/grant';
import * as constraint from '../schema/constraint';
import * as create from '../schema/create';
import * as drop from '../schema/drop';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
import * as insert from '../query/insert';
import * as update from '../query/update';
import * as del from '../query/delete';
import * as cursor from '../statement/cursor';
import * as transaction from '../statement/transaction';
import * as order from '../query/orderby';
import * as when from '../statement/when';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,44],$V1=[1,25],$V2=[1,40],$V3=[1,33],$V4=[1,41],$V5=[1,39],$V6=[1,35],$V7=[1,42],$V8=[1,11],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,36],$Vd=[1,37],$Ve=[1,24],$Vf=[1,6],$Vg=[1,4,6],$Vh=[1,49],$Vi=[1,50],$Vj=[1,54],$Vk=[1,55],$Vl=[1,4,6,115,157],$Vm=[2,197],$Vn=[1,58],$Vo=[2,281],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,66],$Vt=[17,19,21,24,25,29,39,96,97,98,109],$Vu=[2,247],$Vv=[1,72],$Vw=[1,73],$Vx=[1,85],$Vy=[1,84],$Vz=[1,86],$VA=[1,82],$VB=[1,83],$VC=[1,4,6,40,218,219,220,241],$VD=[1,90],$VE=[1,4,6,24,25,37,39,40,42,46,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,67,68,76,77,78,79,80,81,87,88,90,91,92,96,97,98,99,102,103,115,117,133,135,139,144,145,147,148,151,157,163,169,175,193,196,201,204,218,219,220,227,228,229,230,237,240,241,245,246],$VF=[1,98],$VG=[1,99],$VH=[24,25],$VI=[2,29],$VJ=[1,102],$VK=[1,109],$VL=[39,169],$VM=[1,113],$VN=[1,133],$VO=[1,134],$VP=[1,135],$VQ=[1,132],$VR=[1,124],$VS=[1,119],$VT=[1,120],$VU=[1,127],$VV=[2,263],$VW=[1,140],$VX=[1,141],$VY=[1,142],$VZ=[1,143],$V_=[1,4,6,40,42,46,115,133,139,157,193,196,218,219,220,227,228,229,230,237,240,241],$V$=[2,267],$V01=[1,145],$V11=[1,4,6,24,25,37,39,40,42,46,91,102,115,117,133,135,139,144,145,147,148,157,163,169,193,196,204,218,219,220,227,228,229,230,237,240,241],$V21=[42,139],$V31=[2,169],$V41=[1,156],$V51=[2,27],$V61=[1,159],$V71=[1,188],$V81=[193,201],$V91=[42,193,201],$Va1=[40,42,193,201],$Vb1=[1,192],$Vc1=[1,193],$Vd1=[1,194],$Ve1=[1,195],$Vf1=[2,115],$Vg1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,87,88,92,96,97,98,99,102,115,133,157,193,196,201,218,219,220,227,228,229,230,237,240,241],$Vh1=[2,95],$Vi1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,87,88,91,92,96,97,98,99,102,115,133,135,144,145,147,148,157,193,196,201,218,219,220,227,228,229,230,237,240,241],$Vj1=[1,4,6,40,46,115,133,157,196,218,219,220,227,228,229,230,237,240,241],$Vk1=[1,209],$Vl1=[2,252],$Vm1=[2,273],$Vn1=[1,4,6,42],$Vo1=[1,4,6,40,42,46,115,157,218,219,220,240,241,245,246],$Vp1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,87,88,90,92,96,97,98,99,102,115,133,157,193,196,201,218,219,220,227,228,229,230,237,240,241,245,246],$Vq1=[1,243],$Vr1=[1,4,6,40,42,46,115,157,196,218,219,220,227,228,229,230,237,240,241],$Vs1=[1,4,6,40,42,46,115,133,139,157,196,218,219,220,227,228,229,230,237,240,241],$Vt1=[1,256],$Vu1=[1,4,6,42,196],$Vv1=[1,267],$Vw1=[40,42],$Vx1=[1,270],$Vy1=[1,4,6,42,46,115,157],$Vz1=[1,278],$VA1=[1,279],$VB1=[1,281],$VC1=[1,280],$VD1=[1,277],$VE1=[1,4,6,67,68],$VF1=[2,56],$VG1=[1,290],$VH1=[1,285],$VI1=[1,286],$VJ1=[1,291],$VK1=[1,4,6,40,46,115,157,218,219,220,237,240,241],$VL1=[1,297],$VM1=[1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,87,88,92,96,97,102,115,133,157,193,196,201,218,219,220,227,228,229,230,237,240,241],$VN1=[1,313],$VO1=[1,343],$VP1=[1,344],$VQ1=[1,4,6,40,46,67,68,115,133,157,196,218,219,220,227,228,229,230,237,240,241],$VR1=[40,67,68],$VS1=[87,88,92],$VT1=[2,62],$VU1=[1,356],$VV1=[1,350],$VW1=[1,351],$VX1=[1,352],$VY1=[1,353],$VZ1=[1,354],$V_1=[1,355],$V$1=[1,363],$V02=[1,4,6,40,46,115,157,218,219,220,240,241],$V12=[2,275],$V22=[1,366],$V32=[1,4,6,24,25,40,42,46,67,68,102,115,133,139,157,196,218,219,220,227,228,229,230,237,240,241],$V42=[1,380],$V52=[1,378],$V62=[1,379],$V72=[1,381],$V82=[1,382],$V92=[37,39,40,42,91,135,144,145,147,148],$Va2=[2,36],$Vb2=[1,384],$Vc2=[37,40,42,91,135,144,145,147,148],$Vd2=[2,31],$Ve2=[1,386],$Vf2=[2,33],$Vg2=[1,390],$Vh2=[37,40,42,46,91,135,144,145,147,148],$Vi2=[17,19,21,24,25,29,39,83,84,85,96,97,109],$Vj2=[1,4,6,40,46,115,157,218,219,220,241],$Vk2=[2,279],$Vl2=[1,422],$Vm2=[2,38],$Vn2=[1,438],$Vo2=[2,147],$Vp2=[1,463],$Vq2=[1,4,6,40,42,46,115,157,218,219,220,240,241],$Vr2=[1,484],$Vs2=[1,485],$Vt2=[1,496],$Vu2=[1,497],$Vv2=[1,498],$Vw2=[1,499],$Vx2=[37,40,42,91,135,139,144,145,147,148];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"opt_semicolon":3,"SEMICOLON":4,"opt_eof":5,"EOF":6,"program":7,"stmt_list":8,"stmt":9,"schema_stmt":10,"cursor_stmt":11,"manipulative_stmt":12,"when_stmt":13,"boolean_literal":14,"BOOLEAN_LITERAL":15,"string_literal":16,"STRING_LITERAL":17,"number_literal":18,"NUMBER_LITERAL":19,"scientific_number_literal":20,"SCIENTIFIC_NUMBER_LITERAL":21,"literal":22,"identifier":23,"IDENTIFIER":24,"DOUBLE_QUOTE":25,"column":26,"cursor":27,"parameter":28,"PARAMETER":29,"range_variable":30,"userName":31,"alias":32,"opt_if_exists":33,"IF":34,"EXISTS":35,"opt_if_not_exists":36,"NOT":37,"opt_size":38,"(":39,")":40,"opt_size_and_precision":41,",":42,"opt_varying":43,"VARYING":44,"opt_timezone":45,"WITH":46,"TIMEZONE":47,"data_type":48,"CHARACTER":49,"VARCHAR":50,"BINARY":51,"VARBINARY":52,"NUMERIC":53,"DECIMAL":54,"INTEGER":55,"SMALLINT":56,"BIGINT":57,"BOOLEAN":58,"FLOAT":59,"REAL":60,"DOUBLE":61,"PRECISION":62,"DATE":63,"TIME":64,"TIMESTAMP":65,"search_condition":66,"OR":67,"AND":68,"predicate":69,"opt_not":70,"opt_escape":71,"ESCAPE":72,"atom_commalist":73,"atom":74,"comparison":75,"EQUAL":76,"NOT_EQUAL":77,"LESS_THAN":78,"GREATER_THAN":79,"LESS_THAN_EQUAL":80,"GREATER_THAN_EQUAL":81,"any_all_some":82,"ANY":83,"ALL":84,"SOME":85,"scalar_exp":86,"BETWEEN":87,"LIKE":88,"named_column_ref":89,"IS":90,"NULLX":91,"IN":92,"subquery":93,"NOT_EXISTS":94,"select_statement":95,"PLUS":96,"MINUS":97,"ASTERISK":98,"DIVIDE":99,"function_ref":100,"selection_scalar":101,"AS":102,"PERIOD":103,"selection_commalist":104,"parameter_ref":105,"function_selection":106,"opt_distinct":107,"INDICATOR":108,"BUILTIN_FUNCTION":109,"table":110,"column_ref_spec":111,"schema_authorize":112,"schema_create_element":113,"schema_drop_element":114,"CREATE":115,"SCHEMA":116,"AUTHORIZATION":117,"schema_create_element_list":118,"schema_table":119,"schema_view":120,"schema_privilege":121,"drop_table":122,"drop_view":123,"TABLE":124,"table_element_commalist":125,"table_element":126,"column_def":127,"nameable_table_constraint_def":128,"column_def_opt_list":129,"column_def_opt":130,"referential_trigger_action":131,"CASCADE":132,"SET":133,"NULL":134,"DEFAULT":135,"RESTRICT":136,"NO_ACTION":137,"update_trigger":138,"ON":139,"UPDATE":140,"delete_trigger":141,"DELETE":142,"opt_referential_triggers":143,"UNIQUE":144,"PRIMARY":145,"KEY":146,"CHECK":147,"REFERENCES":148,"column_commalist":149,"table_constraint_def":150,"FOREIGN":151,"CONSTRAINT":152,"opt_column_commalist":153,"VIEW":154,"opt_with_check_option":155,"OPTION":156,"GRANT":157,"privilege_item":158,"opt_with_grant_option":159,"drop_privilege":160,"REVOKE":161,"privileges":162,"TO":163,"grantee_commalist":164,"opt_privilege_token":165,"PRIVILEGES":166,"operation_commalist":167,"operation":168,"SELECT":169,"INSERT":170,"grantee":171,"PUBLIC":172,"DROP":173,"DECLARE":174,"CURSOR":175,"FOR":176,"select_expr_ordered":177,"opt_work":178,"WORK":179,"close_statement":180,"commit_statement":181,"delete_statement_positioned":182,"delete_statement_searched":183,"fetch_statement":184,"insert_statement":185,"open_statement":186,"rollback_statement":187,"select_into_statement":188,"update_statement_positioned":189,"update_statement_searched":190,"CLOSE":191,"COMMIT":192,"FROM":193,"table_ref":194,"opt_join_ref_list":195,"WHERE":196,"CURRENT":197,"OF":198,"opt_where_clause":199,"FETCH":200,"INTO":201,"target_commalist":202,"values_or_query_spec":203,"VALUES":204,"insert_atom_commalist":205,"insert_atom":206,"OPEN":207,"ROLLBACK":208,"selection":209,"dynamic_table_ref_commalist":210,"opt_group_by_clause":211,"opt_having_clause":212,"opt_order_by_clause":213,"assignment_commalist":214,"assignment":215,"target":216,"select_expr_op":217,"UNION":218,"INTERSECTION":219,"EXCEPT":220,"select_expr":221,"select_term":222,"DISTINCT":223,"opt_join_outer":224,"OUTER":225,"join_type":226,"LEFT":227,"RIGHT":228,"FULL":229,"INNER":230,"opt_join_on_clause":231,"join_ref":232,"JOIN":233,"dynamic_table_ref":234,"join_ref_list":235,"opt_alias":236,"GROUP":237,"BY":238,"column_ref_spec_commalist":239,"HAVING":240,"ORDER":241,"ordering_spec_commalist":242,"ordering_spec":243,"opt_asc_desc":244,"ASC":245,"DESC":246,"WHENEVER":247,"FOUND":248,"when_action":249,"SQLERROR":250,"GOTO":251,"CONTINUE":252,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEMICOLON",6:"EOF",15:"BOOLEAN_LITERAL",17:"STRING_LITERAL",19:"NUMBER_LITERAL",21:"SCIENTIFIC_NUMBER_LITERAL",24:"IDENTIFIER",25:"DOUBLE_QUOTE",29:"PARAMETER",34:"IF",35:"EXISTS",37:"NOT",39:"(",40:")",42:",",44:"VARYING",46:"WITH",47:"TIMEZONE",49:"CHARACTER",50:"VARCHAR",51:"BINARY",52:"VARBINARY",53:"NUMERIC",54:"DECIMAL",55:"INTEGER",56:"SMALLINT",57:"BIGINT",58:"BOOLEAN",59:"FLOAT",60:"REAL",61:"DOUBLE",62:"PRECISION",63:"DATE",64:"TIME",65:"TIMESTAMP",67:"OR",68:"AND",72:"ESCAPE",76:"EQUAL",77:"NOT_EQUAL",78:"LESS_THAN",79:"GREATER_THAN",80:"LESS_THAN_EQUAL",81:"GREATER_THAN_EQUAL",83:"ANY",84:"ALL",85:"SOME",87:"BETWEEN",88:"LIKE",90:"IS",91:"NULLX",92:"IN",94:"NOT_EXISTS",96:"PLUS",97:"MINUS",98:"ASTERISK",99:"DIVIDE",102:"AS",103:"PERIOD",108:"INDICATOR",109:"BUILTIN_FUNCTION",115:"CREATE",116:"SCHEMA",117:"AUTHORIZATION",124:"TABLE",132:"CASCADE",133:"SET",134:"NULL",135:"DEFAULT",136:"RESTRICT",137:"NO_ACTION",139:"ON",140:"UPDATE",142:"DELETE",144:"UNIQUE",145:"PRIMARY",146:"KEY",147:"CHECK",148:"REFERENCES",151:"FOREIGN",152:"CONSTRAINT",154:"VIEW",156:"OPTION",157:"GRANT",161:"REVOKE",163:"TO",166:"PRIVILEGES",169:"SELECT",170:"INSERT",172:"PUBLIC",173:"DROP",174:"DECLARE",175:"CURSOR",176:"FOR",179:"WORK",191:"CLOSE",192:"COMMIT",193:"FROM",196:"WHERE",197:"CURRENT",198:"OF",200:"FETCH",201:"INTO",204:"VALUES",207:"OPEN",208:"ROLLBACK",218:"UNION",219:"INTERSECTION",220:"EXCEPT",223:"DISTINCT",225:"OUTER",227:"LEFT",228:"RIGHT",229:"FULL",230:"INNER",233:"JOIN",237:"GROUP",238:"BY",240:"HAVING",241:"ORDER",245:"ASC",246:"DESC",247:"WHENEVER",248:"FOUND",250:"SQLERROR",251:"GOTO",252:"CONTINUE"},
productions_: [0,[3,0],[3,1],[5,0],[5,1],[7,3],[8,1],[8,3],[9,1],[9,1],[9,1],[9,1],[14,1],[16,1],[18,1],[20,1],[22,1],[22,1],[22,1],[23,1],[23,3],[26,1],[27,1],[28,1],[30,1],[31,1],[32,1],[33,0],[33,2],[36,0],[36,3],[38,0],[38,3],[41,0],[41,3],[41,5],[43,0],[43,1],[45,0],[45,2],[48,3],[48,2],[48,3],[48,2],[48,2],[48,2],[48,2],[48,1],[48,1],[48,1],[48,2],[48,1],[48,2],[48,3],[48,3],[48,3],[66,0],[66,3],[66,3],[66,2],[66,3],[66,1],[70,0],[70,1],[71,0],[71,2],[73,1],[73,3],[75,1],[75,1],[75,1],[75,1],[75,1],[75,1],[82,1],[82,1],[82,1],[69,3],[69,6],[69,5],[69,4],[69,4],[69,6],[69,4],[69,2],[69,2],[93,3],[93,3],[86,3],[86,3],[86,3],[86,3],[86,2],[86,2],[86,1],[86,1],[86,1],[86,3],[86,3],[101,1],[101,2],[101,3],[101,3],[104,1],[104,3],[74,1],[74,1],[106,2],[106,2],[105,1],[105,2],[105,3],[100,4],[110,1],[110,3],[89,1],[89,3],[89,5],[111,1],[111,1],[10,1],[10,1],[10,1],[112,6],[118,1],[118,2],[113,1],[113,1],[113,1],[114,1],[114,1],[119,7],[125,1],[125,3],[126,1],[126,1],[127,2],[127,3],[129,1],[129,2],[131,1],[131,2],[131,2],[131,1],[131,1],[138,3],[141,3],[143,0],[143,1],[143,1],[143,2],[143,2],[130,2],[130,1],[130,2],[130,2],[130,2],[130,4],[130,3],[130,6],[150,4],[150,5],[150,8],[150,11],[150,4],[128,1],[128,3],[149,1],[149,3],[153,0],[153,3],[120,8],[155,0],[155,3],[121,3],[160,2],[158,5],[159,0],[159,3],[165,0],[165,1],[162,2],[162,1],[167,1],[167,3],[168,1],[168,1],[168,1],[168,2],[168,2],[164,1],[164,3],[171,1],[171,1],[122,4],[123,4],[11,5],[178,0],[178,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[180,2],[181,2],[182,8],[183,5],[184,4],[185,5],[203,4],[203,1],[206,1],[206,1],[205,1],[205,3],[186,2],[187,2],[188,11],[95,8],[214,0],[214,1],[214,3],[215,3],[215,3],[189,9],[190,6],[202,1],[202,3],[216,1],[217,1],[217,2],[217,1],[217,1],[177,2],[221,1],[221,3],[221,3],[222,1],[222,3],[107,0],[107,1],[107,1],[209,2],[209,2],[224,0],[224,1],[226,2],[226,2],[226,2],[226,1],[231,0],[231,2],[232,4],[235,1],[235,2],[195,0],[195,1],[210,1],[210,3],[236,0],[236,2],[236,1],[194,2],[234,1],[234,2],[199,0],[199,2],[211,0],[211,3],[239,1],[239,3],[212,0],[212,2],[213,0],[213,3],[242,1],[242,3],[243,2],[244,0],[244,1],[244,1],[13,4],[13,3],[249,2],[249,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-2]; 
break;
case 6: case 66: case 103: case 124: case 132: case 138: case 183: case 190: case 221: case 228: case 234: case 261: case 265: case 277: case 283:
 this.$ = [$$[$0]]; 
break;
case 7: case 67: case 104: case 133: case 168: case 184: case 191: case 229: case 235: case 266: case 278: case 284:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 12:
 this.$ = new literal.BooleanLiteral(Boolean($$[$0]))
break;
case 13:
 this.$ = new literal.StringLiteral($$[$0].substring(1, $$[$0].length-1)); 
break;
case 14:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 15:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 19: case 65: case 165:
 this.$ = $$[$0] 
break;
case 20: case 86: case 87:
 this.$ = $$[$0-1] 
break;
case 32:
 this.$ = $$[$0-1].value 
break;
case 34:
 this.$ = [$$[$0-1].value] 
break;
case 35:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 37: case 39: case 249:
 this.$ = true 
break;
case 40:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 41:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 42:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 43:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 44:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 45:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 46:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 47:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 48:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 49:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 50:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 51:
 this.$ = new columnType.RealColumnType(); 
break;
case 52:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 53:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 54:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 55:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 57:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 58:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 59:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 60: case 98: case 170:
 this.$ = $$[$0-1]; 
break;
case 61: case 105: case 106: case 118: case 134: case 135: case 182: case 236: case 242: case 245: case 259: case 264: case 268: case 269: case 271: case 274: case 276: case 280: case 282:
 this.$ = $$[$0]; 
break;
case 63: case 173: case 178: case 198:
 this.$ = true; 
break;
case 68:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 69:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 70:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 71:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 72:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 73:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 74:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 75:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 76:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 77:
 this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 78:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0], !!$$[$0-4]); 
break;
case 79:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-1], $$[$0], !!$$[$0-3]); 
break;
case 80:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 81:
 this.$ = new pred.InQueryPredicate($$[$0-3], $$[$0], !!$$[$0-2]); 
break;
case 82:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 83:
 this.$ = new pred.QueryComparisonPredicate($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 84:
 this.$ = new pred.ExistenceCheckPredicate($$[$0]); 
break;
case 85:
 this.$ = new pred.ExistenceCheckPredicate($$[$0], true);  
break;
case 88:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0]); 
break;
case 89:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0]); 
break;
case 90:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0]); 
break;
case 91:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0]); 
break;
case 92:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 93:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 94:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 95:
 this.$ = new scalar.NamedColumnRefExpr($$[$0]); 
break;
case 96:
 this.$ = new scalar.FunctionExpr($$[$0]); 
break;
case 97:
 this.$ = new scalar.QueryExpr($$[$0-2]); 
break;
case 99:
 this.$ = new select.ScalarSelectionExpr($$[$0]); 
break;
case 100:
 this.$ = new select.ScalarSelectionExpr($$[$0-1], $$[$0]); 
break;
case 101:
 this.$ = new select.ScalarSelectionExpr($$[$0-2], $$[$0]); 
break;
case 102:
 this.$ = new select.TableAllSelectionExpr($$[$0-2]); 
break;
case 107:
 this.$ = new select.SingleScalarSelection($$[$0], $$[$0-1]); 
break;
case 108: case 251:
 this.$ = new select.AllSelection($$[$0-1]); 
break;
case 109:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 110:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 111:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 112:
 this.$ = new scalar.FunctionInvocation($$[$0-3], $$[$0-1]); 
break;
case 113:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 114:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 115:
 this.$ = new ref.NamedColumnRef($$[$0]); 
break;
case 116:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2]); 
break;
case 117:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2], $$[$0-4]); 
break;
case 119:
 this.$ = new ref.NumberColumnRef($$[$0].value); 
break;
case 123:
 this.$ = new create.AuthorizationSchema($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 125: case 139: case 262:
 this.$ = $$[$0-1]; this.$ = this.$.concat([$$[$0]]); 
break;
case 131:
 this.$ = new create.TableSchema($$[$0-3], $$[$0-1], $$[$0-4]); 
break;
case 136:
 this.$ = new create.ColumnSchema($$[$0-1], $$[$0]); 
break;
case 137:
 this.$ = new create.ColumnSchema($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 140:
 this.$ = constraint.ReferentialAction.CASCADE; 
break;
case 141:
 this.$ = constraint.ReferentialAction.SET_NULL; 
break;
case 142:
 this.$ = constraint.ReferentialAction.SET_DEFAULT; 
break;
case 143:
 this.$ = constraint.ReferentialAction.RESTRICT; 
break;
case 144:
 this.$ = constraint.ReferentialAction.NO_ACTION; 
break;
case 145:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.UPDATE, $$[$0]); 
break;
case 146:
 this.$ = new constraint.ReferentialTriggerAction(constraint.ReferentialQueryOperation.DELETE, $$[$0]); 
break;
case 147:
 this.$ = []; 
break;
case 148: case 149: case 167:
 this.$ = [$$[$0]] 
break;
case 150: case 151:
 this.$ = [$$[$0-1], $$[$0]] 
break;
case 152:
 this.$ = new constraint.NullConstraint(!!$$[$0-1]); 
break;
case 153:
 this.$ = new constraint.UniqueKeyConstraint(); 
break;
case 154:
 this.$ = new constraint.PrimaryKeyConstraint(); 
break;
case 155:
 this.$ = new constraint.DefaultConstraint($$[$0-1]); 
break;
case 156:
 this.$ = new constraint.DefaultNullConstraint(); 
break;
case 157:
 this.$ = new constraint.CheckConstraint($$[$0-1]); 
break;
case 158:
 this.$ = new constraint.ForeignKeyConstraint($$[$0-1], null, $$[$0]); 
break;
case 159:
 
		this.$ = new constraint.ForeignKeyConstraint($$[$0-4], $$[$0-2], $$[$0]); 
	
break;
case 160:
 this.$ = new constraint.UniqueKeyTableConstraint($$[$0-1]); 
break;
case 161:
 this.$ = new constraint.PrimaryKeyTableConstraint($$[$0-1]); 
break;
case 162:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-4], $$[$0-1], $$[$0]); 
	
break;
case 163:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-7], $$[$0-4], $$[$0-2], $$[$0]);
	
break;
case 164:
 this.$ = new constraint.CheckTableConstraint($$[$0-1]); 
break;
case 166:
 this.$ = new constraint.NamedTableConstraint($$[$0-1], $$[$0]); 
break;
case 171:

			this.$ = new create.ViewSchema($$[$0-4], $$[$0-3], $$[$0-1], !!$$[$0], $$[$0-5])
		
break;
case 174:
 this.$ = $$[$0-1]; this.$.withGrant = !!$$[$0] 
break;
case 175:
 this.$ = new drop.DropPrivilegeSchema($$[$0]); 
break;
case 176:
 this.$ = new grant.PrivilegeSchema($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 181:
 this.$ = [new grant.AllGrantOperation()]; 
break;
case 185:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.SELECT); 
break;
case 186:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.INSERT); 
break;
case 187:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.DELETE); 
break;
case 188:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.UPDATE, $$[$0]); 
break;
case 189:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.REFERENCES, $$[$0]); 
break;
case 192:
 this.$ = new grant.PublicGrantee(); 
break;
case 193:
 this.$ = new grant.UserGrantee($$[$0]); 
break;
case 194:
 this.$ = new drop.DropTableSchema($$[$0], $$[$0-1]); 
break;
case 195:
 this.$ = new drop.DropViewSchema($$[$0], $$[$0-1]); 
break;
case 196:
 this.$ = new cursor.CursorDefinitionStatement($$[$0-3], $$[$0]); 
break;
case 211:
 this.$ = new cursor.CloseStatement($$[$0]); 
break;
case 212:
 this.$ = new transaction.CommitStatement(); 
break;
case 213:
 this.$ = new cursor.DeleteCursorQuery($$[$0-5], $$[$0-4], $$[$0]); 
break;
case 214:
 this.$ = new del.DeleteQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 215:
 this.$ = new cursor.FetchStatement($$[$0-2], $$[$0]); 
break;
case 216:
 this.$ = new insert.InsertQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 217:
 this.$ = new insert.AtomValues($$[$0-1]); 
break;
case 218:
 this.$ = new insert.QueryValues($$[$0]); 
break;
case 222:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]);  
break;
case 223:
 this.$ = new cursor.OpenStatement($$[$0]); 
break;
case 224:
 this.$ = new transaction.RollbackStatement(); 
break;
case 225:
 
		this.$ = new select.WritableSelectQuery(new select.SingleSelectQuery($$[$0-9], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]), $$[$0-7], $$[$0]);
	
break;
case 226:
 
		this.$ = new select.SingleSelectQuery($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
	
break;
case 230:
 this.$ = new update.Assignment($$[$0-2], $$[$0]); 
break;
case 231:
 this.$ = new update.Assignment($$[$0-2], null); 
break;
case 232:

			this.$ = new cursor.UpdateCursorQuery($$[$0-7], $$[$0-6], $$[$0-4], $$[$0]); 
		
break;
case 233:

			this.$ = new update.UpdateQuery($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
		
break;
case 237: case 238:
 this.$ = select.BinaryQueryOperator.UNION; 
break;
case 239:
 this.$ = select.BinaryQueryOperator.INTERSECTION; 
break;
case 240:
 this.$ = select.BinaryQueryOperator.EXCEPT; 
break;
case 241:
 this.$ = new select.SortableSelectQuery($$[$0-1], $$[$0]); 
break;
case 243:
 this.$ = new select.BinarySelectQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 244: case 246:
 this.$ = $$[$0-2]; 
break;
case 247: case 248:
 this.$ = false 
break;
case 250:
 this.$ = new select.ScalarSelection($$[$0], $$[$0-1]); 
break;
case 254:
 this.$ = select.JoinType.LEFT; 
break;
case 255:
 this.$ = select.JoinType.RIGHT; 
break;
case 256:
 this.$ = select.JoinType.FULL; 
break;
case 257:
 this.$ = select.JoinType.INNER; 
break;
case 260:
 this.$ = new select.JoinRef($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 270:
 this.$ = new select.NamedFromTableRef($$[$0-1], $$[$0]); 
break;
case 272:
 this.$ = new select.QueryFromTableRef($$[$0-1], $$[$0]); 
break;
case 285:
 this.$ = new order.OrderBy($$[$0-1], $$[$0]); 
break;
case 287:
 this.$ = order.OrderByDirection.ASC; 
break;
case 288:
 this.$ = order.OrderByDirection.DESC; 
break;
case 289:
 this.$ = new when.WheneverNotFound($$[$0]); 
break;
case 290:
 this.$ = new when.WheneverSQLError($$[$0]); 
break;
case 291:
 this.$ = new when.GotoWhenAction($$[$0]); 
break;
case 292:
 this.$ = new when.ContinueWhenAction(); 
break;
}
},
table: [{7:1,8:2,9:3,10:4,11:5,12:6,13:7,39:$V0,95:43,112:8,113:9,114:10,115:$V1,119:26,120:27,121:28,122:29,123:30,140:$V2,142:$V3,157:$V4,169:$V5,170:$V6,173:$V7,174:$V8,177:20,180:12,181:13,182:14,183:15,184:16,185:17,186:18,187:19,188:21,189:22,190:23,191:$V9,192:$Va,200:$Vb,207:$Vc,208:$Vd,221:38,247:$Ve},{1:[3]},o($Vf,[2,1],{3:45,4:[1,46]}),o($Vg,[2,6]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,120]),o($Vg,[2,121]),o($Vg,[2,122]),{23:48,24:$Vh,25:$Vi,27:47},o($Vg,[2,199]),o($Vg,[2,200]),o($Vg,[2,201]),o($Vg,[2,202]),o($Vg,[2,203]),o($Vg,[2,204]),o($Vg,[2,205]),o($Vg,[2,206]),o($Vg,[2,207]),o($Vg,[2,208]),o($Vg,[2,209]),o($Vg,[2,210]),{37:[1,51],250:[1,52]},{116:[1,53],124:$Vj,154:$Vk},o($Vl,[2,126]),o($Vl,[2,127]),o($Vl,[2,128]),o($Vg,[2,129]),o($Vg,[2,130]),{23:48,24:$Vh,25:$Vi,27:56},o($Vg,$Vm,{178:57,179:$Vn}),{193:[1,59]},{23:48,24:$Vh,25:$Vi,27:60},{201:[1,61]},{23:48,24:$Vh,25:$Vi,27:62},o($Vg,$Vm,{178:63,179:$Vn}),o($Vg,$Vo,{213:64,217:65,218:$Vp,219:$Vq,220:$Vr,241:$Vs}),o($Vt,$Vu,{209:70,107:71,84:$Vv,223:$Vw}),{23:76,24:$Vh,25:$Vi,110:75,194:74},{84:[1,79],140:$Vx,142:$Vy,148:$Vz,158:77,162:78,167:80,168:81,169:$VA,170:$VB},{124:[1,87],154:[1,88]},o($VC,[2,242]),{39:$V0,95:43,169:$VD,221:89},{1:[2,3],5:91,6:[1,92]},o($Vf,[2,2],{10:4,11:5,12:6,13:7,112:8,113:9,114:10,180:12,181:13,182:14,183:15,184:16,185:17,186:18,187:19,177:20,188:21,189:22,190:23,119:26,120:27,121:28,122:29,123:30,221:38,95:43,9:93,39:$V0,115:$V1,140:$V2,142:$V3,157:$V4,169:$V5,170:$V6,173:$V7,174:$V8,191:$V9,192:$Va,200:$Vb,207:$Vc,208:$Vd,247:$Ve}),{175:[1,94]},o([1,4,6,175,201],[2,22]),o($VE,[2,19]),{24:[1,95]},{248:[1,96]},{249:97,251:$VF,252:$VG},{23:76,24:$Vh,25:$Vi,110:100},o($VH,$VI,{36:101,34:$VJ}),o($VH,$VI,{36:103,34:$VJ}),o($Vg,[2,211]),o($Vg,[2,212]),o($Vg,[2,198]),{23:76,24:$Vh,25:$Vi,110:75,194:104},{201:[1,105]},{23:76,24:$Vh,25:$Vi,110:106},o($Vg,[2,223]),o($Vg,[2,224]),o($Vg,[2,241]),{39:$VK,95:108,169:$VD,222:107},{238:[1,110]},o($VL,[2,237],{84:[1,111]}),o($VL,[2,239]),o($VL,[2,240]),{193:$VM,201:[1,112]},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:118,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:117,89:122,96:$VS,97:$VT,98:[1,115],100:123,101:116,104:114,105:125,109:$VU},o($Vt,[2,248]),o($Vt,[2,249]),{133:$VV,195:136,226:139,227:$VW,228:$VX,229:$VY,230:$VZ,232:138,235:137},o($V_,$V$,{236:144,30:146,23:147,24:$Vh,25:$Vi,102:$V01}),o($V11,[2,113],{103:[1,148]}),o($Vl,[2,177],{159:149,46:[1,150]}),{139:[1,151]},{139:[2,179],165:152,166:[1,153]},{42:[1,154],139:[2,182]},o($V21,[2,183]),o($V21,[2,185]),o($V21,[2,186]),o($V21,[2,187]),o($V21,$V31,{153:155,39:$V41}),o($V21,$V31,{153:157,39:$V41}),o($VH,$V51,{33:158,34:$V61}),o($VH,$V51,{33:160,34:$V61}),{40:[1,161],217:65,218:$Vp,219:$Vq,220:$Vr},o($Vt,$Vu,{107:71,209:162,84:$Vv,223:$Vw}),{1:[2,5]},{1:[2,4]},o($Vg,[2,7]),{176:[1,163]},{25:[1,164]},{249:165,251:$VF,252:$VG},o($Vg,[2,290]),{23:166,24:$Vh,25:$Vi},o($Vg,[2,292]),{117:[1,167]},{23:76,24:$Vh,25:$Vi,110:168},{37:[1,169]},{23:76,24:$Vh,25:$Vi,110:170},o([1,4,6,196],$VV,{235:137,232:138,226:139,195:171,227:$VW,228:$VX,229:$VY,230:$VZ}),{28:128,29:$VQ,105:174,202:172,216:173},o([169,204],$V31,{153:175,39:$V41}),o($VC,[2,243]),o($VC,[2,245]),{39:$VK,95:108,169:$VD,222:176},{18:181,19:$VO,23:182,24:$Vh,25:$Vi,89:180,111:179,242:177,243:178},o($VL,[2,238]),{23:76,24:$Vh,25:$Vi,110:75,194:183},{23:76,24:$Vh,25:$Vi,39:$V71,93:187,110:75,194:186,210:184,234:185},o($V81,[2,250],{42:[1,189]}),o($V81,[2,251]),o($V91,[2,103]),o($Va1,[2,99],{32:190,23:196,24:$Vh,25:$Vi,96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1,102:[1,191]}),o([24,25,40,42,96,97,98,99,102,193,201],$Vf1,{103:[1,197]}),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:198,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:199,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},o($Vg1,[2,94]),o($Vg1,$Vh1),o($Vg1,[2,96]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:201,89:122,95:200,96:$VS,97:$VT,100:123,105:125,109:$VU,169:$VD},o($Vg1,[2,105]),o($Vg1,[2,106]),{39:[1,202]},o($Vg1,[2,109],{28:203,29:$VQ,108:[1,204]}),o($Vi1,[2,16]),o($Vi1,[2,17]),o($Vi1,[2,18]),o([1,4,6,24,25,29,37,40,42,46,67,68,76,77,78,79,80,81,87,88,92,96,97,98,99,102,108,115,133,157,193,196,201,218,219,220,227,228,229,230,237,240,241],[2,23]),o([1,4,6,24,25,37,40,42,46,67,68,72,76,77,78,79,80,81,87,88,91,92,96,97,98,99,102,115,133,135,144,145,147,148,157,193,196,201,218,219,220,227,228,229,230,237,240,241],[2,13]),o([1,4,6,24,25,37,40,42,46,67,68,76,77,78,79,80,81,87,88,91,92,96,97,98,99,102,115,133,135,144,145,147,148,157,193,196,201,218,219,220,227,228,229,230,237,240,241,245,246],[2,14]),o($Vi1,[2,15]),{133:[1,205]},o([1,4,6,40,46,115,133,157,196,218,219,220,237,240,241],[2,264],{226:139,232:206,227:$VW,228:$VX,229:$VY,230:$VZ}),o($Vj1,[2,261]),{233:[1,207]},{224:208,225:$Vk1,233:$Vl1},{224:210,225:$Vk1,233:$Vl1},{224:211,225:$Vk1,233:$Vl1},{233:[2,257]},o($V_,[2,270]),{23:147,24:$Vh,25:$Vi,30:212},o($V_,[2,269]),o($V_,[2,24]),{23:213,24:$Vh,25:$Vi},o($Vl,[2,174]),{157:[1,214]},{23:76,24:$Vh,25:$Vi,110:215},{139:[2,181]},{139:[2,180]},{140:$Vx,142:$Vy,148:$Vz,168:216,169:$VA,170:$VB},o($V21,[2,188]),{23:219,24:$Vh,25:$Vi,26:218,149:217},o($V21,[2,189]),{23:76,24:$Vh,25:$Vi,110:220},{35:[1,221]},{23:76,24:$Vh,25:$Vi,110:222},o($VC,[2,244]),{193:$VM},{39:$V0,95:43,169:$VD,177:223,221:38},o($VE,[2,20]),o($Vg,[2,289]),o($Vg,[2,291]),{23:225,24:$Vh,25:$Vi,31:224},{39:[1,226]},{35:[1,227]},{39:$V41,102:$V31,153:228},o($Vg,$Vm1,{199:230,196:[1,229]}),o($Vg,[2,215],{42:[1,231]}),o($Vn1,[2,234]),o($Vn1,[2,236]),{95:234,169:$VD,203:232,204:[1,233]},{40:[1,235]},o($Vg,[2,282],{42:[1,236]}),o($Vn1,[2,283]),o($Vn1,[2,286],{244:237,245:[1,238],246:[1,239]}),o($Vo1,[2,118]),o($Vo1,[2,119]),o($Vp1,$Vf1,{103:[1,240]}),{193:[1,241]},o([1,4,6,40,46,115,157,196,218,219,220,237,240,241],$VV,{235:137,232:138,226:139,195:242,42:$Vq1,227:$VW,228:$VX,229:$VY,230:$VZ}),o($Vr1,[2,265]),o($Vs1,[2,271]),o($Vs1,$V$,{30:146,23:147,236:244,24:$Vh,25:$Vi,102:$V01}),{39:$V71,93:246,95:245,169:$VD},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:118,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:117,89:122,96:$VS,97:$VT,100:123,101:247,105:125,109:$VU},o($Va1,[2,100]),{23:196,24:$Vh,25:$Vi,32:248},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:249,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:250,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:251,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:252,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},o($Va1,[2,26]),{23:254,24:$Vh,25:$Vi,98:[1,253]},o($Vg1,[2,92]),o($Vg1,[2,93]),{40:[1,255]},{40:$Vt1,96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1},o($Vt,$Vu,{106:257,107:258,84:$Vv,223:$Vw}),o($Vg1,[2,110]),{28:259,29:$VQ},o($Vu1,[2,227],{23:219,214:260,215:261,26:262,24:$Vh,25:$Vi}),o($Vj1,[2,262]),{23:76,24:$Vh,25:$Vi,39:$V71,93:187,110:75,194:186,234:263},{233:[2,254]},{233:[2,253]},{233:[2,255]},{233:[2,256]},o($V_,[2,268]),o($V11,[2,114]),{156:[1,264]},{163:[1,265]},o($V21,[2,184]),{40:[1,266],42:$Vv1},o($Vw1,[2,167]),o([40,42,49,50,51,52,53,54,55,56,57,58,59,60,61,63,64,65,76],[2,21]),o($Vg,[2,194]),o($VH,[2,28]),o($Vg,[2,195]),o($Vg,[2,196]),{113:269,115:$Vx1,118:268,119:26,120:27,121:28,157:$V4},o($Vy1,[2,25]),{23:219,24:$Vh,25:$Vi,26:275,125:271,126:272,127:273,128:274,144:$Vz1,145:$VA1,147:$VB1,150:276,151:$VC1,152:$VD1},o($VH,[2,30]),{102:[1,282]},o($VE1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,66:284,69:287,86:288,89:289,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU,197:[1,283]}),o($Vg,[2,214]),{28:128,29:$VQ,105:174,216:292},o($Vg,[2,216]),{39:[1,293]},o($Vg,[2,218]),o($VC,[2,246]),{18:181,19:$VO,23:182,24:$Vh,25:$Vi,89:180,111:179,243:294},o($Vn1,[2,285]),o($Vn1,[2,287]),o($Vn1,[2,288]),{23:254,24:$Vh,25:$Vi},{23:76,24:$Vh,25:$Vi,39:$V71,93:187,110:75,194:186,210:295,234:185},o($VK1,$Vm1,{199:296,196:$VL1}),{23:76,24:$Vh,25:$Vi,39:$V71,93:187,110:75,194:186,234:298},o($Vs1,[2,272]),{40:[1,299]},{40:[1,300]},o($V91,[2,104]),o($Va1,[2,101]),o($VM1,[2,88],{98:$Vd1,99:$Ve1}),o($VM1,[2,89],{98:$Vd1,99:$Ve1}),o($Vg1,[2,90]),o($Vg1,[2,91]),o($Va1,[2,102]),o($Vp1,[2,116],{103:[1,301]}),o($Vg1,[2,97]),o($Vg1,[2,98]),{40:[1,302]},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:118,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:117,89:122,96:$VS,97:$VT,98:[1,304],100:123,101:303,105:125,109:$VU},o($Vg1,[2,111]),o($Vg,$Vm1,{199:306,42:[1,307],196:[1,305]}),o($Vu1,[2,228]),{76:[1,308]},o($Vj1,[2,258],{231:309,139:[1,310]}),o($Vl,[2,178]),{23:225,24:$Vh,25:$Vi,31:314,164:311,171:312,172:$VN1},o([42,102,139,169,204],[2,170]),{23:219,24:$Vh,25:$Vi,26:315},o($Vg,[2,123],{119:26,120:27,121:28,113:316,115:$Vx1,157:$V4}),o($Vl,[2,124]),{124:$Vj,154:$Vk},{40:[1,317],42:[1,318]},o($Vw1,[2,132]),o($Vw1,[2,134]),o($Vw1,[2,135]),{48:319,49:[1,320],50:[1,321],51:[1,322],52:[1,323],53:[1,324],54:[1,325],55:[1,326],56:[1,327],57:[1,328],58:[1,329],59:[1,330],60:[1,331],61:[1,332],63:[1,333],64:[1,334],65:[1,335]},o($Vw1,[2,165]),{23:336,24:$Vh,25:$Vi},{39:[1,337]},{146:[1,338]},{146:[1,339]},{39:[1,340]},{95:341,169:$VD},{198:[1,342]},o($VK1,[2,274],{67:$VO1,68:$VP1}),o($VQ1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:345,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($VR1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,95:200,69:287,89:289,66:346,86:347,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU,169:$VD}),o($VQ1,[2,61]),o($VS1,$VT1,{75:348,70:349,37:$VU1,76:$VV1,77:$VW1,78:$VX1,79:$VY1,80:$VZ1,81:$V_1,96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1}),o([37,40,76,77,78,79,80,81,87,88,92,96,97,98,99],$Vh1,{90:[1,357]}),{39:$V71,93:358},{39:$V71,93:359},o($Vn1,[2,235]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,28:128,29:$VQ,74:362,91:$V$1,105:125,205:360,206:361},o($Vn1,[2,284]),o([1,4,6,196,237,240,241],$VV,{235:137,232:138,226:139,195:364,42:$Vq1,227:$VW,228:$VX,229:$VY,230:$VZ}),o($V02,$V12,{211:365,237:$V22}),o([1,4,6,40,46,67,68,115,157,218,219,220,237,240,241],$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,66:284,69:287,86:288,89:289,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($Vr1,[2,266]),o($V32,[2,86]),o($V32,[2,87]),{23:367,24:$Vh,25:$Vi},o($Vg1,[2,112]),{40:[2,107]},{40:[2,108]},o($VE1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,66:284,69:287,86:288,89:289,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU,197:[1,368]}),o($Vg,[2,233]),{23:219,24:$Vh,25:$Vi,26:262,215:369},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:370,89:122,91:[1,371],96:$VS,97:$VT,100:123,105:125,109:$VU},o($Vj1,[2,260]),o($VQ1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:372,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o([1,4,6,46,115,157],[2,176],{42:[1,373]}),o($Vy1,[2,190]),o($Vy1,[2,192]),o($Vy1,[2,193]),o($Vw1,[2,168]),o($Vl,[2,125]),o($Vl,[2,131]),{23:219,24:$Vh,25:$Vi,26:275,126:374,127:273,128:274,144:$Vz1,145:$VA1,147:$VB1,150:276,151:$VC1,152:$VD1},o($Vw1,[2,136],{129:375,130:376,70:377,37:$VU1,91:$VT1,135:$V42,144:$V52,145:$V62,147:$V72,148:$V82}),o($V92,$Va2,{43:383,44:$Vb2}),o($Vc2,$Vd2,{38:385,39:$Ve2}),o($V92,$Va2,{43:387,44:$Vb2}),o($Vc2,$Vd2,{38:388,39:$Ve2}),o($Vc2,$Vf2,{41:389,39:$Vg2}),o($Vc2,$Vf2,{41:391,39:$Vg2}),o($Vc2,$Vd2,{38:392,39:$Ve2}),o($Vc2,[2,47]),o($Vc2,[2,48]),o($Vc2,[2,49]),o($Vc2,$Vd2,{38:393,39:$Ve2}),o($Vc2,[2,51]),{62:[1,394]},o($Vh2,$Vd2,{38:395,39:$Ve2}),o($Vh2,$Vd2,{38:396,39:$Ve2}),o($Vh2,$Vd2,{38:397,39:$Ve2}),{144:$Vz1,145:$VA1,147:$VB1,150:398,151:$VC1},{23:219,24:$Vh,25:$Vi,26:218,149:399},{39:[1,400]},{39:[1,401]},o($VR1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:402,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($Vl,[2,172],{155:403,46:[1,404]}),{23:48,24:$Vh,25:$Vi,27:405},o($VQ1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:406,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($VQ1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:407,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($VQ1,[2,59]),{40:[1,408],67:$VO1,68:$VP1},o($VS1,$VT1,{75:348,70:349,37:$VU1,40:$Vt1,76:$VV1,77:$VW1,78:$VX1,79:$VY1,80:$VZ1,81:$V_1,96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1}),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,82:410,83:[1,411],84:[1,412],85:[1,413],86:409,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{87:[1,414],88:[1,415],92:[1,416]},o($Vi2,[2,68]),o($Vi2,[2,69]),o($Vi2,[2,70]),o($Vi2,[2,71]),o($Vi2,[2,72]),o($Vi2,[2,73]),o([87,88,91,92],[2,63]),{37:$VU1,70:417,91:$VT1},o($VQ1,[2,84]),o($VQ1,[2,85]),{40:[1,418],42:[1,419]},o($Vw1,[2,221]),o($Vw1,[2,219]),o($Vw1,[2,220]),o([1,4,6,237,240,241],$Vm1,{199:420,196:$VL1}),o($Vj2,$Vk2,{212:421,240:$Vl2}),{238:[1,423]},o($Vp1,[2,117]),{198:[1,424]},o($Vu1,[2,229]),o($Vu1,[2,230],{96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1}),o($Vu1,[2,231]),o($Vj1,[2,259],{67:$VO1,68:$VP1}),{23:225,24:$Vh,25:$Vi,31:314,171:425,172:$VN1},o($Vw1,[2,133]),o($Vw1,[2,137],{70:377,130:426,37:$VU1,91:$VT1,135:$V42,144:$V52,145:$V62,147:$V72,148:$V82}),o($Vc2,[2,138]),{91:[1,427]},o($Vc2,[2,153]),{146:[1,428]},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:429,91:[1,430]},{39:[1,431]},{23:76,24:$Vh,25:$Vi,110:432},o($Vc2,$Vd2,{38:433,39:$Ve2}),o($V92,[2,37]),o($Vc2,[2,41]),{18:434,19:$VO},o($Vc2,$Vd2,{38:435,39:$Ve2}),o($Vc2,[2,43]),o($Vc2,[2,44]),{18:436,19:$VO},o($Vc2,[2,45]),o($Vc2,[2,46]),o($Vc2,[2,50]),o($Vc2,[2,52]),o($Vc2,$Vm2,{45:437,46:$Vn2}),o($Vc2,$Vm2,{45:439,46:$Vn2}),o($Vc2,$Vm2,{45:440,46:$Vn2}),o($Vw1,[2,166]),{40:[1,441],42:$Vv1},{23:219,24:$Vh,25:$Vi,26:218,149:442},{23:219,24:$Vh,25:$Vi,26:218,149:443},{40:[1,444],67:$VO1,68:$VP1},o($Vl,[2,171]),{147:[1,445]},o($Vg,[2,213]),o([1,4,6,40,46,67,115,133,157,196,218,219,220,227,228,229,230,237,240,241],[2,57],{68:$VP1}),o($VQ1,[2,58]),o($VQ1,[2,60]),o($VQ1,[2,77],{96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1}),{39:$V71,93:446},{39:[2,74]},{39:[2,75]},{39:[2,76]},{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:447,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},{16:448,17:$VN},{39:[1,450],93:449},{91:[1,451]},o($Vg,[2,217]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,28:128,29:$VQ,74:362,91:$V$1,105:125,206:452},o([1,4,6,240,241],$V12,{211:453,237:$V22}),o($Vj2,[2,226]),o([1,4,6,40,46,67,68,115,157,218,219,220,241],$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:454,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),{18:181,19:$VO,23:182,24:$Vh,25:$Vi,89:180,111:456,239:455},{23:48,24:$Vh,25:$Vi,27:457},o($Vy1,[2,191]),o($Vc2,[2,139]),o($Vc2,[2,152]),o($Vc2,[2,154]),o($Vc2,[2,155]),o($Vc2,[2,156]),o($VR1,$VF1,{74:121,100:123,105:125,22:126,28:128,16:129,18:130,20:131,23:182,69:287,86:288,89:289,66:458,17:$VN,19:$VO,21:$VP,24:$Vh,25:$Vi,29:$VQ,35:$VG1,37:$VH1,39:$VI1,94:$VJ1,96:$VS,97:$VT,109:$VU}),o($Vc2,$Vo2,{143:459,138:461,141:462,39:[1,460],139:$Vp2}),o($Vc2,[2,40]),{40:[1,464]},o($Vc2,[2,42]),{40:[1,465],42:[1,466]},o($Vc2,[2,53]),{47:[1,467]},o($Vc2,[2,54]),o($Vc2,[2,55]),o($Vw1,[2,160]),{40:[1,468],42:$Vv1},{40:[1,469],42:$Vv1},o($Vw1,[2,164]),{156:[1,470]},o($VQ1,[2,83]),{68:[1,471],96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1},o($VQ1,[2,64],{71:472,72:[1,473]}),o($VQ1,[2,81]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,28:128,29:$VQ,39:$V71,73:474,74:475,93:246,95:245,105:125,169:$VD},o($VQ1,[2,80]),o($Vw1,[2,222]),o([1,4,6,241],$Vk2,{212:476,240:$Vl2}),o($Vj2,[2,280],{67:$VO1,68:$VP1}),o($V02,[2,276],{42:[1,477]}),o($Vq2,[2,277]),o($Vg,[2,232]),{40:[1,478],67:$VO1,68:$VP1},o($Vc2,[2,158]),{23:219,24:$Vh,25:$Vi,26:218,149:479},o($Vc2,[2,148],{141:480,139:[1,481]}),o($Vc2,[2,149],{138:482,139:[1,483]}),{140:$Vr2,142:$Vs2},o($Vh2,[2,32]),o($Vc2,[2,34]),{18:486,19:$VO},o($Vc2,[2,39]),o($Vw1,[2,161]),{148:[1,487]},o($Vl,[2,173]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,23:182,24:$Vh,25:$Vi,28:128,29:$VQ,39:$VR,74:121,86:488,89:122,96:$VS,97:$VT,100:123,105:125,109:$VU},o($VQ1,[2,79]),{16:489,17:$VN},{40:[1,490],42:[1,491]},o($Vw1,[2,66]),o($Vg,$Vo,{213:492,241:$Vs}),{18:181,19:$VO,23:182,24:$Vh,25:$Vi,89:180,111:493},o($Vc2,[2,157]),{40:[1,494],42:$Vv1},o($Vc2,[2,150]),{142:$Vs2},o($Vc2,[2,151]),{140:$Vr2},{131:495,132:$Vt2,133:$Vu2,136:$Vv2,137:$Vw2},{131:500,132:$Vt2,133:$Vu2,136:$Vv2,137:$Vw2},{40:[1,501]},{23:76,24:$Vh,25:$Vi,110:502},o($VQ1,[2,78],{96:$Vb1,97:$Vc1,98:$Vd1,99:$Ve1}),o($VQ1,[2,65]),o($VQ1,[2,82]),{16:129,17:$VN,18:130,19:$VO,20:131,21:$VP,22:126,28:128,29:$VQ,74:503,105:125},o($Vg,[2,225]),o($Vq2,[2,278]),o($Vc2,$Vo2,{138:461,141:462,143:504,139:$Vp2}),o($Vx2,[2,145]),o($Vx2,[2,140]),{134:[1,505],135:[1,506]},o($Vx2,[2,143]),o($Vx2,[2,144]),o($Vx2,[2,146]),o($Vc2,[2,35]),o($Vw1,$Vo2,{138:461,141:462,143:507,39:[1,508],139:$Vp2}),o($Vw1,[2,67]),o($Vc2,[2,159]),o($Vx2,[2,141]),o($Vx2,[2,142]),o($Vw1,[2,162]),{23:219,24:$Vh,25:$Vi,26:218,149:509},{40:[1,510],42:$Vv1},o($Vw1,$Vo2,{138:461,141:462,143:511,139:$Vp2}),o($Vw1,[2,163])],
defaultActions: {91:[2,5],92:[2,4],143:[2,257],152:[2,181],153:[2,180],208:[2,254],209:[2,253],210:[2,255],211:[2,256],303:[2,107],304:[2,108],411:[2,74],412:[2,75],413:[2,76]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};




















/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 24;
break;
case 1:return 'ACTION';
break;
case 2:return 84;
break;
case 3:return 68;
break;
case 4:return 83;
break;
case 5:return 102;
break;
case 6:return 245;
break;
case 7:return 117;
break;
case 8:return 87;
break;
case 9:return 57;
break;
case 10:return 51;
break;
case 11:return 58;
break;
case 12:return 238;
break;
case 13:return 132;
break;
case 14:return 49;
break;
case 15:return 147;
break;
case 16:return 191;
break;
case 17:return 192;
break;
case 18:return 152;
break;
case 19:return 252;
break;
case 20:return 115;
break;
case 21:return 197;
break;
case 22:return 175;
break;
case 23:return 63;
break;
case 24:return 54;
break;
case 25:return 174;
break;
case 26:return 135;
break;
case 27:return 142;
break;
case 28:return 246;
break;
case 29:return 223;
break;
case 30:return 61;
break;
case 31:return 173;
break;
case 32:return 72;
break;
case 33:return 220;
break;
case 34:return 35;
break;
case 35:return 200;
break;
case 36:return 59;
break;
case 37:return 176;
break;
case 38:return 151;
break;
case 39:return 248;
break;
case 40:return 193;
break;
case 41:return 229;
break;
case 42:return 251;
break;
case 43:return 157;
break;
case 44:return 237;
break;
case 45:return 240;
break;
case 46:return 34;
break;
case 47:return 92;
break;
case 48:return 108;
break;
case 49:return 230;
break;
case 50:return 170;
break;
case 51:return 55;
break;
case 52:return 219;
break;
case 53:return 201;
break;
case 54:return 55;
break;
case 55:return 90;
break;
case 56:return 233;
break;
case 57:return 146;
break;
case 58:return 'LANGUAGE';
break;
case 59:return 227;
break;
case 60:return 88;
break;
case 61:return 'NO'
break;
case 62:return 94;
break;
case 63:return 37;
break;
case 64:return 91;
break;
case 65:return 53;
break;
case 66:return 198;
break;
case 67:return 139;
break;
case 68:return 207;
break;
case 69:return 156;
break;
case 70:return 67;
break;
case 71:return 241;
break;
case 72:return 225;
break;
case 73:return 62;
break;
case 74:return 145;
break;
case 75:return 166;
break;
case 76:return 'PROCEDURE';
break;
case 77:return 172;
break;
case 78:return 60;
break;
case 79:return 148;
break;
case 80:return 136;
break;
case 81:return 228;
break;
case 82:return 208;
break;
case 83:return 116;
break;
case 84:return 169;
break;
case 85:return 133;
break;
case 86:return 56;
break;
case 87:return 85;
break;
case 88:return 'SQLCODE';
break;
case 89:return 124;
break;
case 90:return 64;
break;
case 91:return 65;
break;
case 92:return 163;
break;
case 93:return 218;
break;
case 94:return 144;
break;
case 95:return 140;
break;
case 96:return 'USER';
break;
case 97:return 204;
break;
case 98:return 52;
break;
case 99:return 50;
break;
case 100:return 44;
break;
case 101:return 154;
break;
case 102:return 247;
break;
case 103:return 196;
break;
case 104:return 46;
break;
case 105:return 179;
break;
case 106:return 15;
break;
case 107:return 17;
break;
case 108:return 19;
break;
case 109:return 21;
break;
case 110:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|TOTAL|GROUP_CONCAT|LOWER|UPPER)$/i)) {
		return 109;
	} else {
		return 24;
	}

break;
case 111:return 'COMMENTS';
break;
case 112:return 29;
break;
case 113:return 25;
break;
case 114:return 'PERCENT';
break;
case 115:return 'AMPERSAND';
break;
case 116:return 'QUOTE';
break;
case 117:return 39;
break;
case 118:return 40;
break;
case 119:return 103;
break;
case 120:return 'COLON';
break;
case 121:return 42;
break;
case 122:return 4;
break;
case 123:return 'VERTICAL_BAR';
break;
case 124:return 'QUESTION_MARK';
break;
case 125:return 'CARET';
break;
case 126:return 98;
break;
case 127:return 99;
break;
case 128:return 96;
break;
case 129:return 97;
break;
case 130:return 76;
break;
case 131:return 77;
break;
case 132:return 78;
break;
case 133:return 79;
break;
case 134:return 'LESS_THAN_OR_EQUAL';
break;
case 135:return 'GREATER_THAN_OR_EQUAL';
break;
case 136:/* Skip */;
break;
case 137:return 6;
break;
}
},
rules: [/^(?:"[A-Za-z][A-Za-z0-9_]*")/i,/^(?:ACTION\b)/i,/^(?:ALL\b)/i,/^(?:AND\b)/i,/^(?:ANY\b)/i,/^(?:AS\b)/i,/^(?:ASC\b)/i,/^(?:AUTHORIZATION\b)/i,/^(?:BETWEEN\b)/i,/^(?:BIGINT\b)/i,/^(?:BINARY\b)/i,/^(?:BOOLEAN\b)/i,/^(?:BY\b)/i,/^(?:CASCADE\b)/i,/^(?:CHAR(ACTER)?)/i,/^(?:CHECK\b)/i,/^(?:CLOSE\b)/i,/^(?:COMMIT\b)/i,/^(?:CONSTRAINT\b)/i,/^(?:CONTINUE\b)/i,/^(?:CREATE\b)/i,/^(?:CURRENT\b)/i,/^(?:CURSOR\b)/i,/^(?:DATE\b)/i,/^(?:DECIMAL\b)/i,/^(?:DECLARE\b)/i,/^(?:DEFAULT\b)/i,/^(?:DELETE\b)/i,/^(?:DESC\b)/i,/^(?:DISTINCT\b)/i,/^(?:DOUBLE\b)/i,/^(?:DROP\b)/i,/^(?:ESCAPE\b)/i,/^(?:EXCEPT\b)/i,/^(?:EXISTS\b)/i,/^(?:FETCH\b)/i,/^(?:FLOAT\b)/i,/^(?:FOR\b)/i,/^(?:FOREIGN\b)/i,/^(?:FOUND\b)/i,/^(?:FROM\b)/i,/^(?:FULL\b)/i,/^(?:GO[ \t]TO\b)/i,/^(?:GRANT\b)/i,/^(?:GROUP\b)/i,/^(?:HAVING\b)/i,/^(?:IF\b)/i,/^(?:IN\b)/i,/^(?:INDICATOR\b)/i,/^(?:INNER\b)/i,/^(?:INSERT\b)/i,/^(?:INTEGER\b)/i,/^(?:INTERSECTION\b)/i,/^(?:INTO\b)/i,/^(?:INT\b)/i,/^(?:IS\b)/i,/^(?:JOIN\b)/i,/^(?:KEY\b)/i,/^(?:LANGUAGE\b)/i,/^(?:LEFT\b)/i,/^(?:LIKE\b)/i,/^(?:NO\b)/i,/^(?:NOT EXISTS\b)/i,/^(?:NOT\b)/i,/^(?:NULL\b)/i,/^(?:NUMERIC\b)/i,/^(?:OF\b)/i,/^(?:ON\b)/i,/^(?:OPEN\b)/i,/^(?:OPTION\b)/i,/^(?:OR\b)/i,/^(?:ORDER\b)/i,/^(?:OUTER\b)/i,/^(?:PRECISION\b)/i,/^(?:PRIMARY\b)/i,/^(?:PRIVILEGES\b)/i,/^(?:PROCEDURE\b)/i,/^(?:PUBLIC\b)/i,/^(?:REAL\b)/i,/^(?:REFERENCES\b)/i,/^(?:RESTRICT\b)/i,/^(?:RIGHT\b)/i,/^(?:ROLLBACK\b)/i,/^(?:SCHEMA\b)/i,/^(?:SELECT\b)/i,/^(?:SET\b)/i,/^(?:SMALLINT\b)/i,/^(?:SOME\b)/i,/^(?:SQLCODE\b)/i,/^(?:TABLE\b)/i,/^(?:TIME\b)/i,/^(?:TIMESTAMP\b)/i,/^(?:TO\b)/i,/^(?:UNION\b)/i,/^(?:UNIQUE\b)/i,/^(?:UPDATE\b)/i,/^(?:USER\b)/i,/^(?:VALUES\b)/i,/^(?:VARBINARY\b)/i,/^(?:VARCHAR\b)/i,/^(?:VARYING\b)/i,/^(?:VIEW\b)/i,/^(?:WHENEVER\b)/i,/^(?:WHERE\b)/i,/^(?:WITH\b)/i,/^(?:WORK\b)/i,/^(?:TRUE|FALSE\b)/i,/^(?:'[^'\n]*')/i,/^(?:\d+(\.\d*)?|\.\d+)/i,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:--\.\*)/i,/^(?:[A-Za-z][A-Za-z0-9_]*)/i,/^(?:")/i,/^(?:%)/i,/^(?:&)/i,/^(?:')/i,/^(?:\()/i,/^(?:\))/i,/^(?:\.)/i,/^(?::)/i,/^(?:,)/i,/^(?:;)/i,/^(?:\|)/i,/^(?:\?)/i,/^(?:\^)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:\+)/i,/^(?:-)/i,/^(?:=)/i,/^(?:<>)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:[ \r\t\n]+)/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();