import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,7],$V2=[1,8],$V3=[1,30],$V4=[1,26],$V5=[1,24],$V6=[1,31],$V7=[1,9],$V8=[1,22],$V9=[1,23],$Va=[1,25],$Vb=[1,27],$Vc=[1,28],$Vd=[6,7],$Ve=[1,41],$Vf=[2,254],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,51],$Vk=[11,13,15,17,20,25,83,84,85,92,94],$Vl=[2,195],$Vm=[1,56],$Vn=[1,57],$Vo=[1,59],$Vp=[6,7,26,192,193,194,219],$Vq=[1,61],$Vr=[1,25,101,105,142,143,144,145,148,163,164,173,180,181],$Vs=[1,66],$Vt=[1,67],$Vu=[1,76],$Vv=[25,142],$Vw=[1,100],$Vx=[1,101],$Vy=[1,96],$Vz=[1,93],$VA=[1,99],$VB=[1,89],$VC=[1,84],$VD=[1,85],$VE=[1,81],$VF=[1,92],$VG=[1,94],$VH=[2,235],$VI=[1,106],$VJ=[1,107],$VK=[1,108],$VL=[1,109],$VM=[6,7,17,25,26,28,32,55,89,105,124,125,126,133,135,136,142,169,177,186,192,193,194,204,205,206,207,214,218,219],$VN=[1,116],$VO=[6,7,26,28,32,105,133,135,169,186,192,193,194,204,205,206,207,214,218,219],$VP=[2,239],$VQ=[1,122],$VR=[1,120],$VS=[2,145],$VT=[1,127],$VU=[1,136],$VV=[166,174],$VW=[28,166,174],$VX=[1,144],$VY=[1,140],$VZ=[1,141],$V_=[1,142],$V$=[1,143],$V01=[6,7,17,26,28,32,53,54,55,63,64,65,66,67,68,74,75,79,83,84,85,86,89,105,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219],$V11=[2,81],$V21=[6,7,17,26,28,32,53,54,55,63,64,65,66,67,68,74,75,77,79,83,84,85,86,89,105,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219,223,224],$V31=[6,7,17,26,28,32,53,54,55,63,64,65,66,67,68,74,75,79,83,84,85,86,89,105,124,125,126,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219],$V41=[6,7,26,32,105,133,169,186,192,193,194,204,205,206,207,214,218,219],$V51=[1,157],$V61=[2,224],$V71=[1,168],$V81=[1,169],$V91=[6,7,28,32,105,133],$Va1=[2,208],$Vb1=[1,175],$Vc1=[6,7,28,166],$Vd1=[1,181],$Ve1=[6,7,28],$Vf1=[2,260],$Vg1=[1,185],$Vh1=[1,186],$Vi1=[6,7,26,32,105,133,192,193,194,219],$Vj1=[6,7,26,32,105,133,192,193,194,214,218,219],$Vk1=[1,195],$Vl1=[1,203],$Vm1=[6,7,28,169],$Vn1=[6,7,105,133],$Vo1=[1,225],$Vp1=[1,221],$Vq1=[1,222],$Vr1=[1,223],$Vs1=[1,224],$Vt1=[6,7,53,54],$Vu1=[2,43],$Vv1=[1,229],$Vw1=[1,228],$Vx1=[1,233],$Vy1=[1,237],$Vz1=[26,28],$VA1=[6,7,26,32,105,133,192,193,194,218,219],$VB1=[6,7,26,32,105,133,169,192,193,194,214,218,219],$VC1=[6,7,26,28,32,105,133,169,192,193,194,204,205,206,207,214,218,219],$VD1=[6,7,17,26,28,32,53,54,55,63,64,65,66,67,68,74,75,79,83,84,89,105,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219],$VE1=[28,135],$VF1=[1,266],$VG1=[1,267],$VH1=[6,7,26,32,53,54,105,133,169,186,192,193,194,204,205,206,207,214,218,219],$VI1=[26,53,54],$VJ1=[74,75,79],$VK1=[2,49],$VL1=[1,279],$VM1=[1,273],$VN1=[1,274],$VO1=[1,275],$VP1=[1,276],$VQ1=[1,277],$VR1=[1,278],$VS1=[1,285],$VT1=[11,13,15,17,20,25,70,71,72,83,84,92,94],$VU1=[6,7,17,26,28,32,53,54,89,105,133,135,169,186,192,193,194,204,205,206,207,214,218,219],$VV1=[1,332],$VW1=[1,333],$VX1=[1,335],$VY1=[1,334],$VZ1=[1,341],$V_1=[6,7,26,28,32,105,133,192,193,194,218,219],$V$1=[1,374],$V02=[26,28,55,124,125,126],$V12=[25,26,28,55,124,125,126],$V22=[2,23],$V32=[1,385],$V42=[2,18],$V52=[1,387],$V62=[2,20],$V72=[1,391],$V82=[26,28,32,55,124,125,126],$V92=[2,25],$Va2=[1,422];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"stmt_list":4,"stmt":5,"SEMICOLON":6,"EOF":7,"string_literal":8,"STRING_LITERAL":9,"number_literal":10,"NUMBER_LITERAL":11,"scientific_number_literal":12,"SCIENTIFIC_NUMBER_LITERAL":13,"literal":14,"scientific_literal":15,"column":16,"IDENTIFIER":17,"cursor":18,"parameter":19,"PARAMETER":20,"range_variable":21,"userName":22,"alias":23,"opt_size":24,"LEFT_PAREN":25,"RIGHT_PAREN":26,"opt_size_and_precision":27,"COMMA":28,"opt_varying":29,"VARYING":30,"opt_timezone":31,"WITH":32,"TIMEZONE":33,"data_type":34,"CHARACTER":35,"VARCHARACTER":36,"BINARY":37,"VARBINARY":38,"NUMERIC":39,"DECIMAL":40,"INTEGER":41,"SMALLINT":42,"BIGINT":43,"BOOLEAN":44,"FLOAT":45,"REAL":46,"DOUBLE":47,"PRECISION":48,"DATE":49,"TIME":50,"TIMESTAMP":51,"search_condition":52,"OR":53,"AND":54,"NOT":55,"predicate":56,"opt_not":57,"opt_escape":58,"ESCAPE":59,"atom_commalist":60,"atom":61,"comparison":62,"EQUAL":63,"NOT_EQUAL":64,"LESS_THAN":65,"GREATER_THAN":66,"LESS_THAN_EQUAL":67,"GREATER_THAN_EQUAL":68,"any_all_some":69,"ANY":70,"ALL":71,"SOME":72,"scalar_exp":73,"BETWEEN":74,"LIKE":75,"column_ref":76,"IS":77,"NULLX":78,"IN":79,"subquery":80,"EXISTS":81,"select_statement":82,"PLUS":83,"MINUS":84,"ASTERISK":85,"DIVIDE":86,"function_ref":87,"selection_scalar":88,"AS":89,"selection_commalist":90,"parameter_ref":91,"USER":92,"INDICATOR":93,"BUILTIN_FUNCTION":94,"DISTINCT":95,"table":96,"PERIOD":97,"schema":98,"cursor_def":99,"manipulative_statement":100,"WHENEVER":101,"FOUND":102,"when_action":103,"SQLERROR":104,"CREATE":105,"SCHEMA":106,"AUTHORIZATION":107,"opt_schema_element_list":108,"schema_element_list":109,"schema_element":110,"base_table_def":111,"view_def":112,"privilege_def":113,"TABLE":114,"base_table_element_commalist":115,"base_table_element":116,"column_def":117,"table_constraint_def":118,"column_def_opt_list":119,"column_def_opt":120,"UNIQUE":121,"PRIMARY":122,"KEY":123,"DEFAULT":124,"CHECK":125,"REFERENCES":126,"column_commalist":127,"FOREIGN":128,"VIEW":129,"opt_column_commalist":130,"opt_with_check_option":131,"OPTION":132,"GRANT":133,"privileges":134,"ON":135,"TO":136,"grantee_commalist":137,"opt_with_grant_option":138,"PRIVILEGES":139,"operation_commalist":140,"operation":141,"SELECT":142,"INSERT":143,"DELETE":144,"UPDATE":145,"grantee":146,"PUBLIC":147,"DECLARE":148,"CURSOR":149,"FOR":150,"select_expr_ordered":151,"close_statement":152,"commit_statement":153,"delete_statement_positioned":154,"delete_statement_searched":155,"fetch_statement":156,"insert_statement":157,"open_statement":158,"rollback_statement":159,"select_into_statement":160,"update_statement_positioned":161,"update_statement_searched":162,"CLOSE":163,"COMMIT":164,"WORK":165,"FROM":166,"table_ref":167,"opt_join_ref_list":168,"WHERE":169,"CURRENT":170,"OF":171,"opt_where_clause":172,"FETCH":173,"INTO":174,"target_commalist":175,"values_or_query_spec":176,"VALUES":177,"insert_atom_commalist":178,"insert_atom":179,"OPEN":180,"ROLLBACK":181,"opt_all_distinct":182,"selection":183,"table_exp":184,"opt_order_by_clause":185,"SET":186,"assignment_commalist":187,"assignment":188,"target":189,"where_clause":190,"select_expr_op":191,"UNION":192,"INTERSECTION":193,"EXCEPT":194,"select_expr":195,"select_term":196,"from_clause":197,"opt_group_by_clause":198,"opt_having_clause":199,"dynamic_table_ref_commalist":200,"opt_join_outer":201,"OUTER":202,"join_type":203,"LEFT":204,"RIGHT":205,"FULL":206,"INNER":207,"opt_join_on_clause":208,"join_ref":209,"JOIN":210,"dynamic_table_ref":211,"join_ref_list":212,"opt_alias":213,"GROUP":214,"BY":215,"column_ref_commalist":216,"column_ref_spec":217,"HAVING":218,"ORDER":219,"ordering_spec_commalist":220,"ordering_spec":221,"opt_asc_desc":222,"ASC":223,"DESC":224,"GOTO":225,"CONTINUE":226,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SEMICOLON",7:"EOF",9:"STRING_LITERAL",11:"NUMBER_LITERAL",13:"SCIENTIFIC_NUMBER_LITERAL",15:"scientific_literal",17:"IDENTIFIER",20:"PARAMETER",25:"LEFT_PAREN",26:"RIGHT_PAREN",28:"COMMA",30:"VARYING",32:"WITH",33:"TIMEZONE",35:"CHARACTER",36:"VARCHARACTER",37:"BINARY",38:"VARBINARY",39:"NUMERIC",40:"DECIMAL",41:"INTEGER",42:"SMALLINT",43:"BIGINT",44:"BOOLEAN",45:"FLOAT",46:"REAL",47:"DOUBLE",48:"PRECISION",49:"DATE",50:"TIME",51:"TIMESTAMP",53:"OR",54:"AND",55:"NOT",59:"ESCAPE",63:"EQUAL",64:"NOT_EQUAL",65:"LESS_THAN",66:"GREATER_THAN",67:"LESS_THAN_EQUAL",68:"GREATER_THAN_EQUAL",70:"ANY",71:"ALL",72:"SOME",74:"BETWEEN",75:"LIKE",77:"IS",78:"NULLX",79:"IN",81:"EXISTS",83:"PLUS",84:"MINUS",85:"ASTERISK",86:"DIVIDE",89:"AS",92:"USER",93:"INDICATOR",94:"BUILTIN_FUNCTION",95:"DISTINCT",97:"PERIOD",101:"WHENEVER",102:"FOUND",104:"SQLERROR",105:"CREATE",106:"SCHEMA",107:"AUTHORIZATION",114:"TABLE",121:"UNIQUE",122:"PRIMARY",123:"KEY",124:"DEFAULT",125:"CHECK",126:"REFERENCES",128:"FOREIGN",129:"VIEW",132:"OPTION",133:"GRANT",135:"ON",136:"TO",139:"PRIVILEGES",142:"SELECT",143:"INSERT",144:"DELETE",145:"UPDATE",147:"PUBLIC",148:"DECLARE",149:"CURSOR",150:"FOR",163:"CLOSE",164:"COMMIT",165:"WORK",166:"FROM",169:"WHERE",170:"CURRENT",171:"OF",173:"FETCH",174:"INTO",177:"VALUES",180:"OPEN",181:"ROLLBACK",186:"SET",192:"UNION",193:"INTERSECTION",194:"EXCEPT",202:"OUTER",204:"LEFT",205:"RIGHT",206:"FULL",207:"INNER",210:"JOIN",214:"GROUP",215:"BY",218:"HAVING",219:"ORDER",223:"ASC",224:"DESC",225:"GOTO",226:"CONTINUE"},
productions_: [0,[3,1],[4,2],[4,3],[4,2],[4,3],[8,1],[10,1],[12,1],[14,1],[14,1],[14,1],[16,1],[18,1],[19,1],[21,1],[22,1],[23,1],[24,0],[24,3],[27,0],[27,3],[27,5],[29,0],[29,1],[31,0],[31,2],[34,3],[34,2],[34,3],[34,2],[34,2],[34,2],[34,2],[34,1],[34,1],[34,1],[34,2],[34,1],[34,2],[34,3],[34,3],[34,3],[52,0],[52,3],[52,3],[52,2],[52,3],[52,1],[57,0],[57,1],[58,0],[58,2],[60,1],[60,3],[62,1],[62,1],[62,1],[62,1],[62,1],[62,1],[69,1],[69,1],[69,1],[56,3],[56,6],[56,5],[56,4],[56,4],[56,6],[56,4],[56,2],[80,3],[80,3],[73,3],[73,3],[73,3],[73,3],[73,2],[73,2],[73,1],[73,1],[73,1],[73,3],[73,3],[88,1],[88,2],[88,3],[90,1],[90,3],[61,1],[61,1],[61,1],[91,1],[91,2],[91,3],[87,4],[87,5],[87,5],[87,4],[96,1],[96,3],[76,1],[76,3],[76,5],[5,1],[5,1],[5,1],[5,4],[5,3],[98,5],[108,0],[108,1],[109,1],[109,2],[110,1],[110,1],[110,1],[111,6],[115,1],[115,3],[116,1],[116,1],[117,3],[119,0],[119,2],[120,2],[120,3],[120,4],[120,2],[120,2],[120,2],[120,4],[120,2],[120,5],[118,4],[118,5],[118,7],[118,10],[118,4],[127,1],[127,3],[112,7],[131,0],[131,3],[130,0],[130,3],[113,7],[138,0],[138,3],[134,2],[134,1],[134,1],[140,1],[140,3],[141,1],[141,1],[141,1],[141,2],[141,2],[137,1],[137,3],[146,1],[146,1],[99,5],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[100,1],[152,2],[153,2],[153,1],[154,8],[155,5],[156,4],[157,5],[176,4],[176,1],[178,1],[178,3],[179,1],[179,1],[158,2],[159,2],[159,1],[160,7],[82,4],[182,0],[182,1],[182,1],[161,9],[187,0],[187,1],[187,3],[188,3],[188,3],[162,6],[175,1],[175,3],[189,1],[172,0],[172,1],[191,1],[191,2],[191,1],[191,1],[151,2],[195,1],[195,3],[195,3],[196,1],[196,3],[183,1],[183,1],[184,4],[197,3],[201,0],[201,1],[203,2],[203,2],[203,2],[203,1],[208,0],[208,2],[209,4],[212,1],[212,2],[168,0],[168,1],[200,1],[200,3],[213,0],[213,2],[213,1],[167,2],[211,1],[211,2],[190,2],[198,0],[198,3],[217,1],[217,1],[216,1],[216,3],[199,0],[199,2],[185,0],[185,3],[220,1],[220,3],[221,2],[221,2],[222,0],[222,1],[222,1],[103,2],[103,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 6:
 this.$ = new literal.StringLiteral($$[$0]); 
break;
case 7:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 8:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 19:
 this.$ = $$[$0-1].value 
break;
case 21:
 this.$ = [$$[$0-1].value] 
break;
case 22:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 24: case 26:
 this.$ = true 
break;
case 27:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 28:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 29:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 30:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 31:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 32:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 33:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 34:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 35:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 36:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 37:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 38:
 this.$ = new columnType.RealColumnType(); 
break;
case 39:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 40:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 41:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 42:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 44:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 45:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 46:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 47: case 84:
 this.$ = $$[$0-1]; 
break;
case 48:
 this.$ = $$[$0]; 
break;
case 50:
 this.$ = true; 
break;
case 52:
 this.$ = $$[$0] 
break;
case 53: case 88:
 this.$ = [$$[$0]]; 
break;
case 54: case 89:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 55:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 56:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 57:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 58:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 59:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 60:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 61:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 62:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 63:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 64:
 this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 65:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0-1], !!$$[$0-4]); 
break;
case 66:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-2], $$[$0-1], !!$$[$0-3]); 
break;
case 67:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 68:
 this.$ = new pred.InQueryPredicate($$[$0-3], $$[$0], !!$$[$0-2]); 
break;
case 69:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 70:
 this.$ = new pred.QueryComparisonPredicate($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 71:
 this.$ = new pred.ExistenceCheckPredicate($$[$0]); 
break;
case 72: case 73:
 this.$ = $$[$0-1] 
break;
case 74:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0-1]); 
break;
case 75:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0-1]); 
break;
case 76:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0-1]); 
break;
case 77:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0-1]); 
break;
case 78:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 79:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 80:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 81:
 this.$ = new scalar.ColumnRefExpr($$[$0]); 
break;
case 82:
 this.$ = new scalar.FunctionRefExpr($$[$0]); 
break;
case 83:
 this.$ = new scalar.QueryExpr($$[$0-2]); 
break;
case 85:
 this.$ = new select.QueryScalarExpr($$[$0]); 
break;
case 86:
 this.$ = new select.QueryScalarExpr($$[$0-1], $$[$0]); 
break;
case 87:
 this.$ = new select.QueryScalarExpr($$[$0-2], $$[$0]); 
break;
case 93:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 94:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 95:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 96:
 this.$ = new scalar.FunctionRefWithAllColumnExpr($$[$0-3]); 
break;
case 97:
 this.$ = new scalar.FunctionRefWithDistinctColumnExpr($$[$0-4], $$[$0-1]);  
break;
case 98:
 this.$ = new scalar.FunctionRefWithScalarExpr($$[$0-4], $$[$0-1], true); 
break;
case 99:
 this.$ = new scalar.FunctionRefWithScalarExpr($$[$0-3], $$[$0]); 
break;
case 100:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 101:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 102:
 this.$ = new ref.ColumnRef($$[$0]); 
break;
case 103:
 this.$ = new ref.ColumnRef($$[$0-1], $$[$0-2]); 
break;
case 104:
 this.$ = new ref.ColumnRef($$[$0-2], $$[$0-3], $$[$0-4]); 
break;
case 242:
 this.$ = $$[$0-1]; this.$.alias = $$[$0]; 
break;
}
},
table: [{3:1,4:2,5:3,25:$V0,82:32,98:4,99:5,100:6,101:$V1,105:$V2,142:$V3,143:$V4,144:$V5,145:$V6,148:$V7,151:18,152:10,153:11,154:12,155:13,156:14,157:15,158:16,159:17,160:19,161:20,162:21,163:$V8,164:$V9,173:$Va,180:$Vb,181:$Vc,195:29},{1:[3]},{1:[2,1],5:34,25:$V0,82:32,98:4,99:5,100:6,101:$V1,105:$V2,142:$V3,143:$V4,144:$V5,145:$V6,148:$V7,151:18,152:10,153:11,154:12,155:13,156:14,157:15,158:16,159:17,160:19,161:20,162:21,163:$V8,164:$V9,173:$Va,180:$Vb,181:$Vc,195:29},{6:[1,35],7:[1,36]},o($Vd,[2,105]),o($Vd,[2,106]),o($Vd,[2,107]),{55:[1,37],104:[1,38]},{106:[1,39]},{17:$Ve,18:40},o($Vd,[2,165]),o($Vd,[2,166]),o($Vd,[2,167]),o($Vd,[2,168]),o($Vd,[2,169]),o($Vd,[2,170]),o($Vd,[2,171]),o($Vd,[2,172]),o($Vd,[2,173]),o($Vd,[2,174]),o($Vd,[2,175]),o($Vd,[2,176]),{17:$Ve,18:42},o($Vd,[2,179],{165:[1,43]}),{166:[1,44]},{17:$Ve,18:45},{174:[1,46]},{17:$Ve,18:47},o($Vd,[2,192],{165:[1,48]}),o($Vd,$Vf,{185:49,191:50,192:$Vg,193:$Vh,194:$Vi,219:$Vj}),o($Vk,$Vl,{182:55,71:$Vm,95:$Vn}),{17:$Vo,96:58},o($Vp,[2,215]),{25:$V0,82:32,142:$Vq,195:60},{6:[1,62]},o($Vr,[2,2],{7:[1,63]}),o($Vr,[2,4]),{102:[1,64]},{103:65,225:$Vs,226:$Vt},{107:[1,68]},{149:[1,69]},o([6,7,149,174],[2,13]),o($Vd,[2,177]),o($Vd,[2,178]),{17:$Vo,96:71,167:70},{174:[1,72]},{17:$Vo,96:73},o($Vd,[2,190]),o($Vd,[2,191]),o($Vd,[2,214]),{25:$Vu,82:75,142:$Vq,196:74},{215:[1,77]},o($Vv,[2,210],{71:[1,78]}),o($Vv,[2,212]),o($Vv,[2,213]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:83,76:87,83:$VC,84:$VD,85:$VE,87:88,88:82,90:80,91:90,92:$VF,94:$VG,183:79},o($Vk,[2,196]),o($Vk,[2,197]),{168:102,186:$VH,203:105,204:$VI,205:$VJ,206:$VK,207:$VL,209:104,212:103},o($VM,[2,100],{97:[1,110]}),{26:[1,111],191:50,192:$Vg,193:$Vh,194:$Vi},o($Vk,$Vl,{182:112,71:$Vm,95:$Vn}),o($Vr,[2,5]),o($Vr,[2,3]),{103:113,225:$Vs,226:$Vt},o($Vd,[2,109]),{17:[1,114]},o($Vd,[2,264]),{17:$VN,22:115},{150:[1,117]},o([6,7,169],$VH,{212:103,209:104,203:105,168:118,204:$VI,205:$VJ,206:$VK,207:$VL}),o($VO,$VP,{213:119,21:121,17:$VQ,89:$VR}),{19:95,20:$VA,91:125,175:123,189:124},o([142,177],$VS,{130:126,25:$VT}),o($Vp,[2,216]),o($Vp,[2,218]),{25:$Vu,82:75,142:$Vq,196:128},{10:131,11:$Vw,17:$Vz,76:132,220:129,221:130},o($Vv,[2,211]),{166:$VU,174:[1,133],184:134,197:135},o($VV,[2,220],{28:[1,137]}),o($VV,[2,221]),o($VW,[2,88]),o($VW,[2,85],{23:138,17:$VX,83:$VY,84:$VZ,85:$V_,86:$V$,89:[1,139]}),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:145,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:146,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},o($V01,[2,80]),o($V01,$V11),o($V01,[2,82]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:148,76:87,82:147,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG,142:$Vq},o($V01,[2,90]),o($V01,[2,91]),o($V01,[2,92]),o($V21,[2,102],{97:[1,149]}),{25:[1,150]},o($V01,[2,93],{19:151,20:$VA,93:[1,152]}),o($V31,[2,9]),o($V31,[2,10]),o($V31,[2,11]),o([6,7,17,20,26,28,32,53,54,55,63,64,65,66,67,68,74,75,79,83,84,85,86,89,93,105,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219],[2,14]),o([6,7,17,26,28,32,53,54,55,63,64,65,66,67,68,74,75,79,83,84,85,86,89,105,124,125,126,133,166,169,174,186,192,193,194,204,205,206,207,214,218,219,223,224],[2,7]),o($V31,[2,8]),{186:[1,153]},o([6,7,26,32,105,133,169,186,192,193,194,214,218,219],[2,236],{203:105,209:154,204:$VI,205:$VJ,206:$VK,207:$VL}),o($V41,[2,233]),{210:[1,155]},{201:156,202:$V51,210:$V61},{201:158,202:$V51,210:$V61},{201:159,202:$V51,210:$V61},{210:[2,229]},{17:[1,160]},o($Vp,[2,217]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:83,76:87,83:$VC,84:$VD,85:$VE,87:88,88:82,90:80,91:90,92:$VF,94:$VG,183:161},o($Vd,[2,108]),o($Vd,[2,263]),o($Vd,[2,111],{108:162,109:163,110:164,111:165,112:166,113:167,105:$V71,133:$V81}),o($V91,[2,16]),{25:$V0,82:32,142:$Vq,151:170,195:29},o($Vd,$Va1,{172:172,190:173,169:[1,171]}),o($VO,[2,242]),{17:$VQ,21:174},o($VO,[2,241]),o($VO,[2,15]),o($Vd,[2,182],{28:$Vb1}),o($Vc1,[2,205]),o($Vc1,[2,207]),{82:178,142:$Vq,176:176,177:[1,177]},{16:180,17:$Vd1,127:179},{26:[1,182]},o($Vd,[2,255],{28:[1,183]}),o($Ve1,[2,256]),o($Ve1,$Vf1,{222:184,223:$Vg1,224:$Vh1}),o($Ve1,$Vf1,{222:187,223:$Vg1,224:$Vh1}),{19:95,20:$VA,91:125,175:188,189:124},o($Vi1,[2,194]),o($Vj1,$Va1,{190:173,172:189,169:[1,190]}),{17:$Vo,25:$Vk1,80:194,96:71,167:193,200:191,211:192},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:83,76:87,83:$VC,84:$VD,87:88,88:196,91:90,92:$VF,94:$VG},o($VW,[2,86]),{17:$VX,23:197},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:198,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:199,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:200,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:201,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},o($VW,[2,17]),o($V01,[2,78]),o($V01,[2,79]),{26:[1,202]},{26:$Vl1,83:$VY,84:$VZ,85:$V_,86:$V$},{17:[1,204]},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,71:[1,207],73:208,76:87,83:$VC,84:$VD,85:[1,205],87:88,91:90,92:$VF,94:$VG,95:[1,206]},o($V01,[2,94]),{19:209,20:$VA},o($Vm1,[2,199],{187:210,188:211,16:212,17:$Vd1}),o($V41,[2,234]),{17:$Vo,25:$Vk1,80:194,96:71,167:193,211:213},{210:[2,226]},{210:[2,225]},{210:[2,227]},{210:[2,228]},o($VM,[2,101]),{166:$VU,184:134,197:135},o($Vd,[2,110]),o($Vd,[2,112],{111:165,112:166,113:167,110:214,105:$V71,133:$V81}),o($Vn1,[2,113]),o($Vn1,[2,115]),o($Vn1,[2,116]),o($Vn1,[2,117]),{114:[1,215],129:[1,216]},{71:[1,218],126:$Vo1,134:217,140:219,141:220,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($Vd,[2,164]),o($Vt1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,52:227,56:230,73:231,76:232,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG,170:[1,226]}),o($Vd,[2,181]),o($Vj1,[2,209]),o($VO,[2,240]),{19:95,20:$VA,91:125,189:234},o($Vd,[2,183]),{25:[1,235]},o($Vd,[2,185]),{26:[1,236],28:$Vy1},o($Vz1,[2,140]),o([26,28,35,36,37,38,39,40,41,42,43,44,45,46,47,49,50,51,63],[2,12]),o($Vp,[2,219]),{10:131,11:$Vw,17:$Vz,76:132,221:238},o($Ve1,[2,258]),o($Ve1,[2,261]),o($Ve1,[2,262]),o($Ve1,[2,259]),{28:$Vb1,166:$VU,184:239,197:135},o($VA1,[2,246],{198:240,214:[1,241]}),o([6,7,26,32,53,54,105,133,192,193,194,214,218,219],$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,52:227,56:230,73:231,76:232,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($VB1,$VH,{212:103,209:104,203:105,168:242,28:[1,243],204:$VI,205:$VJ,206:$VK,207:$VL}),o($VC1,[2,237]),o($VO,[2,243]),o($VO,$VP,{21:121,213:244,17:$VQ,89:$VR}),{25:$Vk1,80:246,82:245,142:$Vq},o($VW,[2,89]),o($VW,[2,87]),o($VD1,[2,74],{85:$V_,86:$V$}),o($VD1,[2,75],{85:$V_,86:$V$}),o($V01,[2,76]),o($V01,[2,77]),o($V01,[2,83]),o($V01,[2,84]),o($V21,[2,103],{97:[1,247]}),{26:[1,248]},{17:$Vz,76:249},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:250,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{26:[1,251],83:$VY,84:$VZ,85:$V_,86:$V$},o($V01,[2,95]),o($Vd,$Va1,{190:173,172:253,28:[1,254],169:[1,252]}),o($Vm1,[2,200]),{63:[1,255]},o($V41,[2,230],{208:256,135:[1,257]}),o($Vn1,[2,114]),{17:$Vo,96:258},{17:$Vo,96:259},{135:[1,260]},{135:[2,151],139:[1,261]},{28:[1,262],135:[2,152]},o($VE1,[2,153]),o($VE1,[2,155]),o($VE1,[2,156]),o($VE1,[2,157]),o($VE1,$VS,{130:263,25:$VT}),o($VE1,$VS,{130:264,25:$VT}),{171:[1,265]},o($Vj1,[2,245],{53:$VF1,54:$VG1}),o($VH1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:268,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($VI1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,82:147,56:230,76:232,52:269,73:270,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG,142:$Vq}),o($VH1,[2,48]),o($VJ1,$VK1,{62:271,57:272,55:$VL1,63:$VM1,64:$VN1,65:$VO1,66:$VP1,67:$VQ1,68:$VR1,83:$VY,84:$VZ,85:$V_,86:$V$}),o([26,55,63,64,65,66,67,68,74,75,79,83,84,85,86],$V11,{77:[1,280]}),{25:$Vk1,80:281},o($Vc1,[2,206]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,19:95,20:$VA,61:284,78:$VS1,91:90,92:$VF,178:282,179:283},o([28,89,135,142,177],[2,146]),{16:286,17:$Vd1},o($Ve1,[2,257]),o($Vd,$Vf,{185:287,219:$Vj}),o($Vi1,[2,252],{199:288,218:[1,289]}),{215:[1,290]},o($VB1,[2,223]),{17:$Vo,25:$Vk1,80:194,96:71,167:193,211:291},o($VO,[2,244]),{26:[1,292]},{26:[1,293]},{17:[1,294]},o($V01,[2,96]),{26:[1,295]},{26:[1,296],83:$VY,84:$VZ,85:$V_,86:$V$},o($V01,[2,99]),o($Vt1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,52:227,56:230,73:231,76:232,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG,170:[1,297]}),o($Vd,[2,204]),{16:212,17:$Vd1,188:298},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:299,76:87,78:[1,300],83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},o($V41,[2,232]),o($VH1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:301,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),{25:[1,302]},{25:$VT,89:$VS,130:303},{17:$Vo,96:304},{135:[2,150]},{126:$Vo1,141:305,142:$Vp1,143:$Vq1,144:$Vr1,145:$Vs1},o($VE1,[2,158]),o($VE1,[2,159]),{17:$Ve,18:306},o($VH1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:307,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($VH1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:308,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($VH1,[2,46]),{26:[1,309],53:$VF1,54:$VG1},o($VJ1,$VK1,{62:271,57:272,26:$Vl1,55:$VL1,63:$VM1,64:$VN1,65:$VO1,66:$VP1,67:$VQ1,68:$VR1,83:$VY,84:$VZ,85:$V_,86:$V$}),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,69:311,70:[1,312],71:[1,313],72:[1,314],73:310,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{74:[1,315],75:[1,316],79:[1,317]},o($VT1,[2,55]),o($VT1,[2,56]),o($VT1,[2,57]),o($VT1,[2,58]),o($VT1,[2,59]),o($VT1,[2,60]),o([74,75,78,79],[2,50]),{55:$VL1,57:318,78:$VK1},o($VH1,[2,71]),{26:[1,319],28:[1,320]},o($Vz1,[2,186]),o($Vz1,[2,188]),o($Vz1,[2,189]),o($Vz1,[2,141]),o($Vd,[2,193]),o($Vi1,[2,222]),o([6,7,26,32,53,54,105,133,192,193,194,219],$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:321,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),{10:325,11:$Vw,17:$Vz,76:324,216:322,217:323},o($VC1,[2,238]),o($VU1,[2,72]),o($VU1,[2,73]),o($V21,[2,104]),o($V01,[2,97]),o($V01,[2,98]),{171:[1,326]},o($Vm1,[2,201]),o($Vm1,[2,202],{83:$VY,84:$VZ,85:$V_,86:$V$}),o($Vm1,[2,203]),o($V41,[2,231],{53:$VF1,54:$VG1}),{16:331,17:$Vd1,115:327,116:328,117:329,118:330,121:$VV1,122:$VW1,125:$VX1,128:$VY1},{89:[1,336]},{136:[1,337]},o($VE1,[2,154]),o($Vd,[2,180]),o([6,7,26,32,53,105,133,169,186,192,193,194,204,205,206,207,214,218,219],[2,44],{54:$VG1}),o($VH1,[2,45]),o($VH1,[2,47]),o($VH1,[2,64],{83:$VY,84:$VZ,85:$V_,86:$V$}),{25:$Vk1,80:338},{25:[2,61]},{25:[2,62]},{25:[2,63]},{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:339,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},{8:340,9:$VZ1},{25:[1,343],80:342},{78:[1,344]},o($Vd,[2,184]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,19:95,20:$VA,61:284,78:$VS1,91:90,92:$VF,179:345},o($Vi1,[2,253],{53:$VF1,54:$VG1}),o($VA1,[2,247],{28:[1,346]}),o($V_1,[2,250]),o($V_1,[2,248]),o($V_1,[2,249]),{17:$Ve,18:347},{26:[1,348],28:[1,349]},o($Vz1,[2,119]),o($Vz1,[2,121]),o($Vz1,[2,122]),{34:350,35:[1,351],36:[1,352],37:[1,353],38:[1,354],39:[1,355],40:[1,356],41:[1,357],42:[1,358],43:[1,359],44:[1,360],45:[1,361],46:[1,362],47:[1,363],49:[1,364],50:[1,365],51:[1,366]},{25:[1,367]},{123:[1,368]},{123:[1,369]},{25:[1,370]},{82:371,142:$Vq},{17:$VN,22:375,137:372,146:373,147:$V$1},o($VH1,[2,70]),{54:[1,376],83:$VY,84:$VZ,85:$V_,86:$V$},o($VH1,[2,51],{58:377,59:[1,378]}),o([6,7,26,32,53,54,59,105,133,169,186,192,193,194,204,205,206,207,214,218,219],[2,6]),o($VH1,[2,68]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,19:95,20:$VA,25:$Vk1,60:379,61:380,80:246,82:245,91:90,92:$VF,142:$Vq},o($VH1,[2,67]),o($Vz1,[2,187]),{10:325,11:$Vw,17:$Vz,76:324,217:381},o($Vd,[2,198]),o($Vn1,[2,118]),{16:331,17:$Vd1,116:382,117:329,118:330,121:$VV1,122:$VW1,125:$VX1,128:$VY1},o($V02,[2,124],{119:383}),o($V12,$V22,{29:384,30:$V32}),o($V02,$V42,{24:386,25:$V52}),o($V12,$V22,{29:388,30:$V32}),o($V02,$V42,{24:389,25:$V52}),o($V02,$V62,{27:390,25:$V72}),o($V02,$V62,{27:392,25:$V72}),o($V02,$V42,{24:393,25:$V52}),o($V02,[2,34]),o($V02,[2,35]),o($V02,[2,36]),o($V02,$V42,{24:394,25:$V52}),o($V02,[2,38]),{48:[1,395]},o($V82,$V42,{24:396,25:$V52}),o($V82,$V42,{24:397,25:$V52}),o($V82,$V42,{24:398,25:$V52}),{16:180,17:$Vd1,127:399},{25:[1,400]},{25:[1,401]},o($VI1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:402,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($Vn1,[2,143],{131:403,32:[1,404]}),o($Vn1,[2,148],{138:405,28:[1,406],32:[1,407]}),o($V91,[2,160]),o($V91,[2,162]),o($V91,[2,163]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,17:$Vz,19:95,20:$VA,25:$VB,61:86,73:408,76:87,83:$VC,84:$VD,87:88,91:90,92:$VF,94:$VG},o($VH1,[2,66]),{8:409,9:$VZ1},{26:[1,410],28:[1,411]},o($Vz1,[2,53]),o($V_1,[2,251]),o($Vz1,[2,120]),o($Vz1,[2,123],{120:412,55:[1,413],124:[1,414],125:[1,415],126:[1,416]}),o($V02,$V42,{24:417,25:$V52}),o($V12,[2,24]),o($V02,[2,28]),{10:418,11:$Vw},o($V02,$V42,{24:419,25:$V52}),o($V02,[2,30]),o($V02,[2,31]),{10:420,11:$Vw},o($V02,[2,32]),o($V02,[2,33]),o($V02,[2,37]),o($V02,[2,39]),o($V02,$V92,{31:421,32:$Va2}),o($V02,$V92,{31:423,32:$Va2}),o($V02,$V92,{31:424,32:$Va2}),{26:[1,425],28:$Vy1},{16:180,17:$Vd1,127:426},{16:180,17:$Vd1,127:427},{26:[1,428],53:$VF1,54:$VG1},o($Vn1,[2,142]),{125:[1,429]},o($Vn1,[2,147]),{17:$VN,22:375,146:430,147:$V$1},{133:[1,431]},o($VH1,[2,65],{83:$VY,84:$VZ,85:$V_,86:$V$}),o($VH1,[2,52]),o($VH1,[2,69]),{10:97,11:$Vw,12:98,13:$Vx,14:91,15:$Vy,19:95,20:$VA,61:432,91:90,92:$VF},o($V02,[2,125]),{78:[1,433]},{10:97,11:$Vw,12:98,13:$Vx,14:434,15:$Vy,78:[1,435],92:[1,436]},{25:[1,437]},{17:$Vo,96:438},o($V02,[2,27]),{26:[1,439]},o($V02,[2,29]),{26:[1,440],28:[1,441]},o($V02,[2,40]),{33:[1,442]},o($V02,[2,41]),o($V02,[2,42]),o($Vz1,[2,135]),{26:[1,443],28:$Vy1},{26:[1,444],28:$Vy1},o($Vz1,[2,139]),{132:[1,445]},o($V91,[2,161]),{132:[1,446]},o($Vz1,[2,54]),o($V02,[2,126],{121:[1,447],122:[1,448]}),o($V02,[2,129]),o($V02,[2,130]),o($V02,[2,131]),o($VI1,$Vu1,{61:86,87:88,91:90,14:91,19:95,10:97,12:98,56:230,73:231,76:232,52:449,11:$Vw,13:$Vx,15:$Vy,17:$Vz,20:$VA,25:$Vv1,55:$Vw1,81:$Vx1,83:$VC,84:$VD,92:$VF,94:$VG}),o($V02,[2,133],{25:[1,450]}),o($V82,[2,19]),o($V02,[2,21]),{10:451,11:$Vw},o($V02,[2,26]),o($Vz1,[2,136]),{126:[1,452]},o($Vn1,[2,144]),o($Vn1,[2,149]),o($V02,[2,127]),{123:[1,453]},{26:[1,454],53:$VF1,54:$VG1},{16:180,17:$Vd1,127:455},{26:[1,456]},{17:$Vo,96:457},o($V02,[2,128]),o($V02,[2,132]),{26:[1,458],28:$Vy1},o($V02,[2,22]),o($Vz1,[2,137],{25:[1,459]}),o($V02,[2,134]),{16:180,17:$Vd1,127:460},{26:[1,461],28:$Vy1},o($Vz1,[2,138])],
defaultActions: {109:[2,229],156:[2,226],157:[2,225],158:[2,227],159:[2,228],261:[2,150],312:[2,61],313:[2,62],314:[2,63]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};








/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 71;
break;
case 1:return 54;
break;
case 2:return 70;
break;
case 3:return 89;
break;
case 4:return 223;
break;
case 5:return 107;
break;
case 6:return 74;
break;
case 7:return 43;
break;
case 8:return 37;
break;
case 9:return 44;
break;
case 10:return 215;
break;
case 11:return 35;
break;
case 12:return 125;
break;
case 13:return 163;
break;
case 14:return 164;
break;
case 15:return 226;
break;
case 16:return 105;
break;
case 17:return 170;
break;
case 18:return 149;
break;
case 19:return 49;
break;
case 20:return 40;
break;
case 21:return 148;
break;
case 22:return 124;
break;
case 23:return 144;
break;
case 24:return 224;
break;
case 25:return 95;
break;
case 26:return 47;
break;
case 27:return 59;
break;
case 28:return 194;
break;
case 29:return 81;
break;
case 30:return 173;
break;
case 31:return 45;
break;
case 32:return 150;
break;
case 33:return 128;
break;
case 34:return 102;
break;
case 35:return 166;
break;
case 36:return 206;
break;
case 37:return 225;
break;
case 38:return 133;
break;
case 39:return 214;
break;
case 40:return 218;
break;
case 41:return 79;
break;
case 42:return 93;
break;
case 43:return 207;
break;
case 44:return 143;
break;
case 45:return 41;
break;
case 46:return 193;
break;
case 47:return 174;
break;
case 48:return 77;
break;
case 49:return 210;
break;
case 50:return 123;
break;
case 51:return 'LANGUAGE';
break;
case 52:return 75;
break;
case 53:return 204;
break;
case 54:return 55;
break;
case 55:return 78;
break;
case 56:return 39;
break;
case 57:return 171;
break;
case 58:return 135;
break;
case 59:return 180;
break;
case 60:return 132;
break;
case 61:return 53;
break;
case 62:return 219;
break;
case 63:return 202;
break;
case 64:return 48;
break;
case 65:return 122;
break;
case 66:return 139;
break;
case 67:return 'PROCEDURE';
break;
case 68:return 147;
break;
case 69:return 46;
break;
case 70:return 126;
break;
case 71:return 205;
break;
case 72:return 181;
break;
case 73:return 106;
break;
case 74:return 142;
break;
case 75:return 186;
break;
case 76:return 42;
break;
case 77:return 72;
break;
case 78:return 'SQLCODE';
break;
case 79:return 114;
break;
case 80:return 50;
break;
case 81:return 51;
break;
case 82:return 136;
break;
case 83:return 192;
break;
case 84:return 145;
break;
case 85:return 92;
break;
case 86:return 177;
break;
case 87:return 38;
break;
case 88:return 'VARCHAR';
break;
case 89:return 30;
break;
case 90:return 129;
break;
case 91:return 101;
break;
case 92:return 169;
break;
case 93:return 32;
break;
case 94:return 165;
break;
case 95:return 9;
break;
case 96:return 11;
break;
case 97:return 13;
break;
case 98:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 94;
	} else {
		return 17;
	}

break;
case 99:return 'COMMENTS';
break;
case 100:return 20;
break;
case 101:return 'DOUBLE_QUOTE';
break;
case 102:return 'PERCENT';
break;
case 103:return 'AMPERSAND';
break;
case 104:return 'QUOTE';
break;
case 105:return 25;
break;
case 106:return 26;
break;
case 107:return 97;
break;
case 108:return 'COLON';
break;
case 109:return 28;
break;
case 110:return 6;
break;
case 111:return 'VERTICAL_BAR';
break;
case 112:return 'QUESTION_MARK';
break;
case 113:return 'CARET';
break;
case 114:return 85;
break;
case 115:return 86;
break;
case 116:return 83;
break;
case 117:return 84;
break;
case 118:return 63;
break;
case 119:return 64;
break;
case 120:return 65;
break;
case 121:return 66;
break;
case 122:return 'LESS_THAN_OR_EQUAL';
break;
case 123:return 'GREATER_THAN_OR_EQUAL';
break;
case 124:/* Skip */;
break;
case 125:return 7;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BIGINT\b)/,/^(?:BINARY\b)/,/^(?:BOOLEAN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DATE\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXCEPT\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INNER\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTERSECTION\b)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:LEFT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:RIGHT\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TIME\b)/,/^(?:TIMESTAMP\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VARBINARY\b)/,/^(?:VARCHAR\b)/,/^(?:VARYING\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();