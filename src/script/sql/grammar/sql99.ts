import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as grant from '../schema/grant';
import * as constraint from '../schema/constraint';
import * as create from '../schema/create';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
import * as insert from '../query/insert';
import * as update from '../query/update';
import * as del from '../query/delete';
import * as cursor from '../statement/cursor';
import * as transaction from '../statement/transaction';
import * as order from '../query/orderby';
import * as when from '../statement/when';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,32],$V1=[1,5],$V2=[1,7],$V3=[1,8],$V4=[1,29],$V5=[1,25],$V6=[1,23],$V7=[1,30],$V8=[1,21],$V9=[1,22],$Va=[1,24],$Vb=[1,26],$Vc=[1,27],$Vd=[1,6],$Ve=[1,4,6],$Vf=[1,36],$Vg=[2,167],$Vh=[1,42],$Vi=[2,251],$Vj=[1,51],$Vk=[1,52],$Vl=[1,53],$Vm=[1,50],$Vn=[13,15,17,19,22,27,85,86,87,95],$Vo=[2,195],$Vp=[1,55],$Vq=[1,56],$Vr=[1,59],$Vs=[1,4,6,28,195,196,197,217],$Vt=[1,61],$Vu=[1,68],$Vv=[1,69],$Vw=[1,76],$Vx=[27,147],$Vy=[1,99],$Vz=[1,100],$VA=[1,95],$VB=[1,92],$VC=[1,98],$VD=[1,89],$VE=[1,84],$VF=[1,85],$VG=[1,81],$VH=[1,93],$VI=[2,233],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[1,108],$VN=[1,4,6,28,30,34,110,138,140,168,171,192,195,196,197,203,204,205,206,213,216,217],$VO=[2,237],$VP=[1,112],$VQ=[1,110],$VR=[1,4,6,19,27,28,30,34,57,80,91,110,126,127,129,130,131,138,140,141,147,168,171,179,192,195,196,197,203,204,205,206,213,216,217],$VS=[1,120],$VT=[2,145],$VU=[1,126],$VV=[1,134],$VW=[168,176],$VX=[30,168,176],$VY=[1,142],$VZ=[1,138],$V_=[1,139],$V$=[1,140],$V01=[1,141],$V11=[1,4,6,19,28,30,34,55,56,57,65,66,67,68,69,70,76,77,81,85,86,87,88,91,110,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217],$V21=[2,83],$V31=[1,4,6,19,28,30,34,55,56,57,65,66,67,68,69,70,76,77,79,81,85,86,87,88,91,110,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217,221,222],$V41=[1,4,6,19,28,30,34,55,56,57,65,66,67,68,69,70,76,77,80,81,85,86,87,88,91,110,126,127,129,130,131,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217],$V51=[1,4,6,28,34,110,138,171,192,195,196,197,203,204,205,206,213,216,217],$V61=[1,155],$V71=[2,222],$V81=[1,168],$V91=[1,169],$Va1=[1,4,6,30,34,110,138],$Vb1=[2,243],$Vc1=[1,4,6,30],$Vd1=[1,178],$Ve1=[1,4,6,28,30,34,110,138,195,196,197,216,217,221,222],$Vf1=[1,189],$Vg1=[1,197],$Vh1=[1,4,6,30,171],$Vi1=[1,4,6,110,138],$Vj1=[1,219],$Vk1=[1,215],$Vl1=[1,216],$Vm1=[1,217],$Vn1=[1,218],$Vo1=[1,4,6,55,56],$Vp1=[2,45],$Vq1=[1,223],$Vr1=[1,222],$Vs1=[1,227],$Vt1=[1,231],$Vu1=[28,30],$Vv1=[1,235],$Vw1=[1,4,6,28,30,34,110,138,171,195,196,197,203,204,205,206,213,216,217],$Vx1=[1,4,6,28,30,34,110,138,140,171,192,195,196,197,203,204,205,206,213,216,217],$Vy1=[1,4,6,19,28,30,34,55,56,57,65,66,67,68,69,70,76,77,81,85,86,91,110,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217],$Vz1=[30,140],$VA1=[1,4,6,28,34,110,138,195,196,197,213,216,217],$VB1=[1,258],$VC1=[1,259],$VD1=[1,4,6,28,34,55,56,110,138,171,192,195,196,197,203,204,205,206,213,216,217],$VE1=[28,55,56],$VF1=[76,77,81],$VG1=[2,51],$VH1=[1,271],$VI1=[1,265],$VJ1=[1,266],$VK1=[1,267],$VL1=[1,268],$VM1=[1,269],$VN1=[1,270],$VO1=[1,277],$VP1=[1,281],$VQ1=[13,15,17,19,22,27,72,73,74,85,86,95],$VR1=[1,4,6,28,34,110,138,195,196,197,216,217],$VS1=[2,245],$VT1=[1,314],$VU1=[1,4,6,19,28,30,34,55,56,91,110,138,140,171,192,195,196,197,203,204,205,206,213,216,217],$VV1=[1,321],$VW1=[1,322],$VX1=[1,324],$VY1=[1,323],$VZ1=[1,330],$V_1=[1,4,6,28,34,110,138,195,196,197,217],$V$1=[2,249],$V02=[1,337],$V12=[1,366],$V22=[28,30,57,80,126,127,129,130,131],$V32=[27,28,30,57,80,126,127,129,130,131],$V42=[2,25],$V52=[1,380],$V62=[2,20],$V72=[1,382],$V82=[2,22],$V92=[1,386],$Va2=[28,30,34,57,80,126,127,129,130,131],$Vb2=[1,4,6,28,30,34,110,138,195,196,197,216,217],$Vc2=[2,27],$Vd2=[1,422];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"opt_semicolon":3,"SEMICOLON":4,"opt_eof":5,"EOF":6,"program":7,"stmt_list":8,"stmt":9,"string_literal":10,"STRING_LITERAL":11,"number_literal":12,"NUMBER_LITERAL":13,"scientific_number_literal":14,"SCIENTIFIC_NUMBER_LITERAL":15,"literal":16,"scientific_literal":17,"column":18,"IDENTIFIER":19,"cursor":20,"parameter":21,"PARAMETER":22,"range_variable":23,"userName":24,"alias":25,"opt_size":26,"(":27,")":28,"opt_size_and_precision":29,",":30,"opt_varying":31,"VARYING":32,"opt_timezone":33,"WITH":34,"TIMEZONE":35,"data_type":36,"CHARACTER":37,"VARCHARACTER":38,"BINARY":39,"VARBINARY":40,"NUMERIC":41,"DECIMAL":42,"INTEGER":43,"SMALLINT":44,"BIGINT":45,"BOOLEAN":46,"FLOAT":47,"REAL":48,"DOUBLE":49,"PRECISION":50,"DATE":51,"TIME":52,"TIMESTAMP":53,"search_condition":54,"OR":55,"AND":56,"NOT":57,"predicate":58,"opt_not":59,"opt_escape":60,"ESCAPE":61,"atom_commalist":62,"atom":63,"comparison":64,"EQUAL":65,"NOT_EQUAL":66,"LESS_THAN":67,"GREATER_THAN":68,"LESS_THAN_EQUAL":69,"GREATER_THAN_EQUAL":70,"any_all_some":71,"ANY":72,"ALL":73,"SOME":74,"scalar_exp":75,"BETWEEN":76,"LIKE":77,"named_column_ref":78,"IS":79,"NULLX":80,"IN":81,"subquery":82,"EXISTS":83,"select_statement":84,"PLUS":85,"MINUS":86,"ASTERISK":87,"DIVIDE":88,"function_ref":89,"selection_scalar":90,"AS":91,"selection_commalist":92,"parameter_ref":93,"INDICATOR":94,"BUILTIN_FUNCTION":95,"DISTINCT":96,"table":97,"PERIOD":98,"column_ref_spec":99,"schema":100,"DECLARE":101,"CURSOR":102,"FOR":103,"select_expr_ordered":104,"manipulative_statement":105,"WHENEVER":106,"FOUND":107,"when_action":108,"SQLERROR":109,"CREATE":110,"SCHEMA":111,"AUTHORIZATION":112,"opt_schema_element_list":113,"schema_element_list":114,"schema_element":115,"base_table_def":116,"view_def":117,"privilege_def":118,"TABLE":119,"base_table_element_commalist":120,"base_table_element":121,"column_def":122,"table_constraint_def":123,"column_def_opt_list":124,"column_def_opt":125,"UNIQUE":126,"PRIMARY":127,"KEY":128,"DEFAULT":129,"CHECK":130,"REFERENCES":131,"column_commalist":132,"FOREIGN":133,"opt_column_commalist":134,"VIEW":135,"opt_with_check_option":136,"OPTION":137,"GRANT":138,"privileges":139,"ON":140,"TO":141,"grantee_commalist":142,"opt_with_grant_option":143,"PRIVILEGES":144,"operation_commalist":145,"operation":146,"SELECT":147,"INSERT":148,"DELETE":149,"UPDATE":150,"grantee":151,"PUBLIC":152,"opt_work":153,"WORK":154,"close_statement":155,"commit_statement":156,"delete_statement_positioned":157,"delete_statement_searched":158,"fetch_statement":159,"insert_statement":160,"open_statement":161,"rollback_statement":162,"select_into_statement":163,"update_statement_positioned":164,"update_statement_searched":165,"CLOSE":166,"COMMIT":167,"FROM":168,"table_ref":169,"opt_join_ref_list":170,"WHERE":171,"CURRENT":172,"OF":173,"opt_where_clause":174,"FETCH":175,"INTO":176,"target_commalist":177,"values_or_query_spec":178,"VALUES":179,"insert_atom_commalist":180,"insert_atom":181,"OPEN":182,"ROLLBACK":183,"opt_all_distinct":184,"selection":185,"dynamic_table_ref_commalist":186,"opt_group_by_clause":187,"opt_having_clause":188,"opt_order_by_clause":189,"assignment_commalist":190,"assignment":191,"SET":192,"target":193,"select_expr_op":194,"UNION":195,"INTERSECTION":196,"EXCEPT":197,"select_expr":198,"select_term":199,"opt_join_outer":200,"OUTER":201,"join_type":202,"LEFT":203,"RIGHT":204,"FULL":205,"INNER":206,"opt_join_on_clause":207,"join_ref":208,"JOIN":209,"dynamic_table_ref":210,"join_ref_list":211,"opt_alias":212,"GROUP":213,"BY":214,"column_ref_spec_commalist":215,"HAVING":216,"ORDER":217,"ordering_spec_commalist":218,"ordering_spec":219,"opt_asc_desc":220,"ASC":221,"DESC":222,"GOTO":223,"CONTINUE":224,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEMICOLON",6:"EOF",11:"STRING_LITERAL",13:"NUMBER_LITERAL",15:"SCIENTIFIC_NUMBER_LITERAL",17:"scientific_literal",19:"IDENTIFIER",22:"PARAMETER",27:"(",28:")",30:",",32:"VARYING",34:"WITH",35:"TIMEZONE",37:"CHARACTER",38:"VARCHARACTER",39:"BINARY",40:"VARBINARY",41:"NUMERIC",42:"DECIMAL",43:"INTEGER",44:"SMALLINT",45:"BIGINT",46:"BOOLEAN",47:"FLOAT",48:"REAL",49:"DOUBLE",50:"PRECISION",51:"DATE",52:"TIME",53:"TIMESTAMP",55:"OR",56:"AND",57:"NOT",61:"ESCAPE",65:"EQUAL",66:"NOT_EQUAL",67:"LESS_THAN",68:"GREATER_THAN",69:"LESS_THAN_EQUAL",70:"GREATER_THAN_EQUAL",72:"ANY",73:"ALL",74:"SOME",76:"BETWEEN",77:"LIKE",79:"IS",80:"NULLX",81:"IN",83:"EXISTS",85:"PLUS",86:"MINUS",87:"ASTERISK",88:"DIVIDE",91:"AS",94:"INDICATOR",95:"BUILTIN_FUNCTION",96:"DISTINCT",98:"PERIOD",101:"DECLARE",102:"CURSOR",103:"FOR",106:"WHENEVER",107:"FOUND",109:"SQLERROR",110:"CREATE",111:"SCHEMA",112:"AUTHORIZATION",119:"TABLE",126:"UNIQUE",127:"PRIMARY",128:"KEY",129:"DEFAULT",130:"CHECK",131:"REFERENCES",133:"FOREIGN",135:"VIEW",137:"OPTION",138:"GRANT",140:"ON",141:"TO",144:"PRIVILEGES",147:"SELECT",148:"INSERT",149:"DELETE",150:"UPDATE",152:"PUBLIC",154:"WORK",166:"CLOSE",167:"COMMIT",168:"FROM",171:"WHERE",172:"CURRENT",173:"OF",175:"FETCH",176:"INTO",179:"VALUES",182:"OPEN",183:"ROLLBACK",192:"SET",195:"UNION",196:"INTERSECTION",197:"EXCEPT",201:"OUTER",203:"LEFT",204:"RIGHT",205:"FULL",206:"INNER",209:"JOIN",213:"GROUP",214:"BY",216:"HAVING",217:"ORDER",221:"ASC",222:"DESC",223:"GOTO",224:"CONTINUE"},
productions_: [0,[3,0],[3,1],[5,0],[5,1],[7,3],[8,1],[8,3],[10,1],[12,1],[14,1],[16,1],[16,1],[16,1],[18,1],[20,1],[21,1],[23,1],[24,1],[25,1],[26,0],[26,3],[29,0],[29,3],[29,5],[31,0],[31,1],[33,0],[33,2],[36,3],[36,2],[36,3],[36,2],[36,2],[36,2],[36,2],[36,1],[36,1],[36,1],[36,2],[36,1],[36,2],[36,3],[36,3],[36,3],[54,0],[54,3],[54,3],[54,2],[54,3],[54,1],[59,0],[59,1],[60,0],[60,2],[62,1],[62,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[71,1],[71,1],[71,1],[58,3],[58,6],[58,5],[58,4],[58,4],[58,6],[58,4],[58,2],[82,3],[82,3],[75,3],[75,3],[75,3],[75,3],[75,2],[75,2],[75,1],[75,1],[75,1],[75,3],[75,3],[90,1],[90,2],[90,3],[92,1],[92,3],[63,1],[63,1],[93,1],[93,2],[93,3],[89,4],[89,5],[89,5],[89,4],[97,1],[97,3],[78,1],[78,3],[78,5],[99,1],[99,1],[9,1],[9,5],[9,1],[9,4],[9,3],[100,5],[113,0],[113,1],[114,1],[114,2],[115,1],[115,1],[115,1],[116,6],[120,1],[120,3],[121,1],[121,1],[122,3],[124,0],[124,2],[125,2],[125,1],[125,1],[125,2],[125,2],[125,2],[125,4],[125,2],[125,5],[123,4],[123,5],[123,7],[123,10],[123,4],[132,1],[132,3],[134,0],[134,3],[117,7],[136,0],[136,3],[118,7],[143,0],[143,3],[139,2],[139,1],[139,1],[145,1],[145,3],[146,1],[146,1],[146,1],[146,2],[146,2],[142,1],[142,3],[151,1],[151,1],[153,0],[153,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[105,1],[155,2],[156,2],[157,8],[158,5],[159,4],[160,5],[178,4],[178,1],[181,1],[181,1],[180,1],[180,3],[161,2],[162,2],[184,0],[184,1],[184,1],[163,12],[84,9],[190,0],[190,1],[190,3],[191,3],[191,3],[164,9],[165,6],[177,1],[177,3],[193,1],[194,1],[194,2],[194,1],[194,1],[104,2],[198,1],[198,3],[198,3],[199,1],[199,3],[185,1],[185,1],[200,0],[200,1],[202,2],[202,2],[202,2],[202,1],[207,0],[207,2],[208,4],[211,1],[211,2],[170,0],[170,1],[186,1],[186,3],[212,0],[212,2],[212,1],[169,2],[210,1],[210,2],[174,0],[174,2],[187,0],[187,3],[215,1],[215,3],[188,0],[188,2],[189,0],[189,3],[218,1],[218,3],[219,2],[220,0],[220,1],[220,1],[108,2],[108,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 6: case 143:
 this.$ = [$$[$0]] 
break;
case 7: case 56: case 91: case 123: case 144: case 157: case 164: case 202: case 208: case 236: case 248: case 254:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 8:
 this.$ = new literal.StringLiteral($$[$0]); 
break;
case 9:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 10:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 21:
 this.$ = $$[$0-1].value 
break;
case 23:
 this.$ = [$$[$0-1].value] 
break;
case 24:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 26: case 28:
 this.$ = true 
break;
case 29:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 30:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 31:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 32:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 33:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 34:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 35:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 36:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 37:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 38:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 39:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 40:
 this.$ = new columnType.RealColumnType(); 
break;
case 41:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 42:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 43:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 44:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 46:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 47:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 48:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 49: case 86: case 146: case 246:
 this.$ = $$[$0-1]; 
break;
case 50: case 92: case 93: case 106: case 124: case 125: case 209: case 215: case 218: case 229: case 234: case 238: case 239: case 241: case 244: case 250: case 252:
 this.$ = $$[$0]; 
break;
case 52: case 149: case 152: case 168:
 this.$ = true; 
break;
case 54:
 this.$ = $$[$0] 
break;
case 55: case 90: case 116: case 122: case 156: case 163: case 191: case 201: case 207: case 231: case 235: case 247: case 253:
 this.$ = [$$[$0]]; 
break;
case 57:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 58:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 59:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 60:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 61:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 62:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 63:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 64:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 65:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 66:
 this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 67:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0-1], !!$$[$0-4]); 
break;
case 68:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-2], $$[$0-1], !!$$[$0-3]); 
break;
case 69:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 70:
 this.$ = new pred.InQueryPredicate($$[$0-3], $$[$0], !!$$[$0-2]); 
break;
case 71:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 72:
 this.$ = new pred.QueryComparisonPredicate($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 73:
 this.$ = new pred.ExistenceCheckPredicate($$[$0]); 
break;
case 74: case 75:
 this.$ = $$[$0-1] 
break;
case 76:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0-1]); 
break;
case 77:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0-1]); 
break;
case 78:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0-1]); 
break;
case 79:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0-1]); 
break;
case 80:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 81:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 82:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 83:
 this.$ = new scalar.NamedColumnRefExpr($$[$0]); 
break;
case 84:
 this.$ = new scalar.FunctionRefExpr($$[$0]); 
break;
case 85:
 this.$ = new scalar.QueryExpr($$[$0-2]); 
break;
case 87:
 this.$ = new select.QueryScalarExpr($$[$0]); 
break;
case 88:
 this.$ = new select.QueryScalarExpr($$[$0-1], $$[$0]); 
break;
case 89:
 this.$ = new select.QueryScalarExpr($$[$0-2], $$[$0]); 
break;
case 94:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 95:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 96:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 97:
 this.$ = new scalar.FunctionRefWithAllColumnExpr($$[$0-3]); 
break;
case 98:
 this.$ = new scalar.FunctionRefWithDistinctColumnExpr($$[$0-4], $$[$0-1]);  
break;
case 99:
 this.$ = new scalar.FunctionRefWithScalarExpr($$[$0-4], $$[$0-1], true); 
break;
case 100:
 this.$ = new scalar.FunctionRefWithScalarExpr($$[$0-3], $$[$0]); 
break;
case 101:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 102:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 103:
 this.$ = new ref.NamedColumnRef($$[$0]); 
break;
case 104:
 this.$ = new ref.NamedColumnRef($$[$0-1], $$[$0-2]); 
break;
case 105:
 this.$ = new ref.NamedColumnRef($$[$0-2], $$[$0-3], $$[$0-4]); 
break;
case 107:
 this.$ = new ref.NumberColumnRef($$[$0].value); 
break;
case 109:
 this.$ = new cursor.CursorDefinitionStatement($$[$0-3], $$[$0]); 
break;
case 111:
 this.$ = new when.WheneverNotFound($$[$0]); 
break;
case 112:
 this.$ = new when.WheneverSQLError($$[$0]); 
break;
case 117: case 128: case 232:
 this.$ = $$[$0-1]; this.$ = this.$.concat([$$[$0]]); 
break;
case 121:
 this.$ = new create.TableSchema($$[$0-3], $$[$0-1]); 
break;
case 126:
 this.$ = new create.ColumnSchema($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 127:
 this.$ = []; 
break;
case 129:
 this.$ = new constraint.NotNullConstraint(); 
break;
case 130:
 this.$ = new constraint.NullConstraint(); 
break;
case 131:
 this.$ = new constraint.UniqueKeyConstraint(); 
break;
case 132:
 this.$ = new constraint.PrimaryKeyConstraint(); 
break;
case 133:
 this.$ = new constraint.DefaultConstraint($$[$0-1]); 
break;
case 134:
 this.$ = new constraint.DefaultNullConstraint(); 
break;
case 135:
 this.$ = new constraint.CheckConstraint($$[$0-1]); 
break;
case 136:
 this.$ = new constraint.ForeignKeyConstraint($$[$0]); 
break;
case 137:
 this.$ = new constraint.ForeignKeyConstraint($$[$0-3], $$[$0-1]); 
break;
case 138:
 this.$ = new constraint.UniqueKeyTableConstraint($$[$0-1]); 
break;
case 139:
 this.$ = new constraint.PrimaryKeyTableConstraint($$[$0-1]); 
break;
case 140:
 this.$ = new constraint.ForeignKeyTableConstraint($$[$0-3], $$[$0]); 
break;
case 141:
 this.$ = new constraint.ForeignKeyTableConstraint($$[$0-6], $$[$0-3], $$[$0-1]); 
break;
case 142:
 this.$ = new constraint.CheckTableConstraint($$[$0-1]); 
break;
case 147:

			this.$ = new create.ViewSchema($$[$0-4], $$[$0-3], $$[$0-1], !!$$[$0])
		
break;
case 165:
 this.$ = new grant.PublicGrantee(); 
break;
case 166:
 this.$ = new grant.UserGrantee($$[$0]); 
break;
case 181:
 this.$ = new cursor.CloseStatement($$[$0]); 
break;
case 182:
 this.$ = new transaction.CommitStatement(); 
break;
case 183:
 this.$ = new cursor.DeleteCursorQuery($$[$0-5], $$[$0-4], $$[$0]); 
break;
case 184:
 this.$ = new del.DeleteQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 185:
 this.$ = new cursor.FetchStatement($$[$0-2], $$[$0]); 
break;
case 186:
 this.$ = new insert.InsertQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 187:
 this.$ = new insert.AtomValues($$[$0-1]); 
break;
case 188:
 this.$ = new insert.QueryValues($$[$0]); 
break;
case 192:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]);  
break;
case 193:
 this.$ = new cursor.OpenStatement($$[$0]); 
break;
case 194:
 this.$ = new transaction.RollbackStatement(); 
break;
case 198:
 
		this.$ = new select.WritableSelectQuery(new select.SingleSelectQuery($$[$0-9], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-10]), $$[$0-7], $$[$0]);
	
break;
case 199:
 
		this.$ = new select.SingleSelectQuery($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0-7]); 
	
break;
case 203:
 this.$ = new update.Assignment($$[$0-2], $$[$0]); 
break;
case 204:
 this.$ = new update.Assignment($$[$0-2], null); 
break;
case 205:

			this.$ = new cursor.UpdateCursorQuery($$[$0-7], $$[$0-6], $$[$0-4], $$[$0]); 
		
break;
case 206:

			this.$ = new update.UpdateQuery($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
		
break;
case 210: case 211:
 this.$ = select.BinaryQueryOperator.UNION; 
break;
case 212:
 this.$ = select.BinaryQueryOperator.INTERSECTION; 
break;
case 213:
 this.$ = select.BinaryQueryOperator.EXCEPT; 
break;
case 214:
 this.$ = new select.SortableSelectQuery($$[$0-1], $$[$0]); 
break;
case 216:
 this.$ = new select.BinarySelectQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 217: case 219:
 this.$ = $$[$0-2]; 
break;
case 220:
 this.$ = new select.ScalarSelection($$[$0]); 
break;
case 221:
 this.$ = new select.AllSelection(); 
break;
case 224:
 this.$ = select.JoinType.LEFT; 
break;
case 225:
 this.$ = select.JoinType.RIGHT; 
break;
case 226:
 this.$ = select.JoinType.FULL; 
break;
case 227:
 this.$ = select.JoinType.INNER; 
break;
case 230:
 this.$ = new select.JoinRef($$[$0-3], $$[$0-2], $$[$0-1]); 
break;
case 240:
 this.$ = new select.NamedFromTableRef($$[$0-1], $$[$0]); 
break;
case 242:
 this.$ = new select.QueryFromTableRef($$[$0-1], $$[$0]); 
break;
case 255:
 this.$ = new order.OrderBy($$[$0-1], $$[$0]); 
break;
case 257:
 this.$ = order.OrderByDirection.ASC; 
break;
case 258:
 this.$ = order.OrderByDirection.DESC; 
break;
case 259:
 this.$ = new when.GotoWhenAction($$[$0]); 
break;
case 260:
 this.$ = new when.ContinueWhenAction(); 
break;
}
},
table: [{7:1,8:2,9:3,27:$V0,84:31,100:4,101:$V1,104:17,105:6,106:$V2,110:$V3,147:$V4,148:$V5,149:$V6,150:$V7,155:9,156:10,157:11,158:12,159:13,160:14,161:15,162:16,163:18,164:19,165:20,166:$V8,167:$V9,175:$Va,182:$Vb,183:$Vc,198:28},{1:[3]},o($Vd,[2,1],{3:33,4:[1,34]}),o($Ve,[2,6]),o($Ve,[2,108]),{19:$Vf,20:35},o($Ve,[2,110]),{57:[1,37],109:[1,38]},{111:[1,39]},o($Ve,[2,169]),o($Ve,[2,170]),o($Ve,[2,171]),o($Ve,[2,172]),o($Ve,[2,173]),o($Ve,[2,174]),o($Ve,[2,175]),o($Ve,[2,176]),o($Ve,[2,177]),o($Ve,[2,178]),o($Ve,[2,179]),o($Ve,[2,180]),{19:$Vf,20:40},o($Ve,$Vg,{153:41,154:$Vh}),{168:[1,43]},{19:$Vf,20:44},{176:[1,45]},{19:$Vf,20:46},o($Ve,$Vg,{153:47,154:$Vh}),o($Ve,$Vi,{189:48,194:49,195:$Vj,196:$Vk,197:$Vl,217:$Vm}),o($Vn,$Vo,{184:54,73:$Vp,96:$Vq}),{19:$Vr,97:58,169:57},o($Vs,[2,215]),{27:$V0,84:31,147:$Vt,198:60},{1:[2,3],5:62,6:[1,63]},o($Vd,[2,2],{100:4,105:6,155:9,156:10,157:11,158:12,159:13,160:14,161:15,162:16,104:17,163:18,164:19,165:20,198:28,84:31,9:64,27:$V0,101:$V1,106:$V2,110:$V3,147:$V4,148:$V5,149:$V6,150:$V7,166:$V8,167:$V9,175:$Va,182:$Vb,183:$Vc}),{102:[1,65]},o([1,4,6,102,176],[2,15]),{107:[1,66]},{108:67,223:$Vu,224:$Vv},{112:[1,70]},o($Ve,[2,181]),o($Ve,[2,182]),o($Ve,[2,168]),{19:$Vr,97:58,169:71},{176:[1,72]},{19:$Vr,97:73},o($Ve,[2,193]),o($Ve,[2,194]),o($Ve,[2,214]),{27:$Vw,84:75,147:$Vt,199:74},{214:[1,77]},o($Vx,[2,210],{73:[1,78]}),o($Vx,[2,212]),o($Vx,[2,213]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:83,78:87,85:$VE,86:$VF,87:$VG,89:88,90:82,92:80,93:90,95:$VH,185:79},o($Vn,[2,196]),o($Vn,[2,197]),{170:101,192:$VI,202:104,203:$VJ,204:$VK,205:$VL,206:$VM,208:103,211:102},o($VN,$VO,{212:109,23:111,19:$VP,91:$VQ}),o($VR,[2,101],{98:[1,113]}),{28:[1,114],194:49,195:$Vj,196:$Vk,197:$Vl},o($Vn,$Vo,{184:115,73:$Vp,96:$Vq}),{1:[2,5]},{1:[2,4]},o($Ve,[2,7]),{103:[1,116]},{108:117,223:$Vu,224:$Vv},o($Ve,[2,112]),{19:[1,118]},o($Ve,[2,260]),{19:$VS,24:119},o([1,4,6,171],$VI,{211:102,208:103,202:104,170:121,203:$VJ,204:$VK,205:$VL,206:$VM}),{21:94,22:$VC,93:124,177:122,193:123},o([147,179],$VT,{134:125,27:$VU}),o($Vs,[2,216]),o($Vs,[2,218]),{27:$Vw,84:75,147:$Vt,199:127},{12:132,13:$Vy,19:$VB,78:131,99:130,218:128,219:129},o($Vx,[2,211]),{168:$VV,176:[1,133]},o($VW,[2,220],{30:[1,135]}),o($VW,[2,221]),o($VX,[2,90]),o($VX,[2,87],{25:136,19:$VY,85:$VZ,86:$V_,87:$V$,88:$V01,91:[1,137]}),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:143,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:144,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},o($V11,[2,82]),o($V11,$V21),o($V11,[2,84]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:146,78:87,84:145,85:$VE,86:$VF,89:88,93:90,95:$VH,147:$Vt},o($V11,[2,92]),o($V11,[2,93]),o($V31,[2,103],{98:[1,147]}),{27:[1,148]},o($V11,[2,94],{21:149,22:$VC,94:[1,150]}),o($V41,[2,11]),o($V41,[2,12]),o($V41,[2,13]),o([1,4,6,19,22,28,30,34,55,56,57,65,66,67,68,69,70,76,77,81,85,86,87,88,91,94,110,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217],[2,16]),o([1,4,6,19,28,30,34,55,56,57,65,66,67,68,69,70,76,77,80,81,85,86,87,88,91,110,126,127,129,130,131,138,168,171,176,192,195,196,197,203,204,205,206,213,216,217,221,222],[2,9]),o($V41,[2,10]),{192:[1,151]},o([1,4,6,28,34,110,138,171,192,195,196,197,213,216,217],[2,234],{202:104,208:152,203:$VJ,204:$VK,205:$VL,206:$VM}),o($V51,[2,231]),{209:[1,153]},{200:154,201:$V61,209:$V71},{200:156,201:$V61,209:$V71},{200:157,201:$V61,209:$V71},{209:[2,227]},o($VN,[2,240]),{19:$VP,23:158},o($VN,[2,239]),o($VN,[2,17]),{19:[1,159]},o($Vs,[2,217]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:83,78:87,85:$VE,86:$VF,87:$VG,89:88,90:82,92:80,93:90,95:$VH,185:160},{27:$V0,84:31,104:161,147:$Vt,198:28},o($Ve,[2,111]),o($Ve,[2,259]),o($Ve,[2,114],{113:162,114:163,115:164,116:165,117:166,118:167,110:$V81,138:$V91}),o($Va1,[2,18]),o($Ve,$Vb1,{174:171,171:[1,170]}),o($Ve,[2,185],{30:[1,172]}),o($Vc1,[2,207]),o($Vc1,[2,209]),{84:175,147:$Vt,178:173,179:[1,174]},{18:177,19:$Vd1,132:176},{28:[1,179]},o($Ve,[2,252],{30:[1,180]}),o($Vc1,[2,253]),o($Vc1,[2,256],{220:181,221:[1,182],222:[1,183]}),o($Ve1,[2,106]),o($Ve1,[2,107]),{19:$Vr,97:58,169:184},{19:$Vr,27:$Vf1,82:188,97:58,169:187,186:185,210:186},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:83,78:87,85:$VE,86:$VF,89:88,90:190,93:90,95:$VH},o($VX,[2,88]),{19:$VY,25:191},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:192,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:193,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:194,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:195,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},o($VX,[2,19]),o($V11,[2,80]),o($V11,[2,81]),{28:[1,196]},{28:$Vg1,85:$VZ,86:$V_,87:$V$,88:$V01},{19:[1,198]},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,73:[1,201],75:202,78:87,85:$VE,86:$VF,87:[1,199],89:88,93:90,95:$VH,96:[1,200]},o($V11,[2,95]),{21:203,22:$VC},o($Vh1,[2,200],{190:204,191:205,18:206,19:$Vd1}),o($V51,[2,232]),{19:$Vr,27:$Vf1,82:188,97:58,169:187,210:207},{209:[2,224]},{209:[2,223]},{209:[2,225]},{209:[2,226]},o($VN,[2,238]),o($VR,[2,102]),{168:$VV},o($Ve,[2,109]),o($Ve,[2,113]),o($Ve,[2,115],{116:165,117:166,118:167,115:208,110:$V81,138:$V91}),o($Vi1,[2,116]),o($Vi1,[2,118]),o($Vi1,[2,119]),o($Vi1,[2,120]),{119:[1,209],135:[1,210]},{73:[1,212],131:$Vj1,139:211,145:213,146:214,147:$Vk1,148:$Vl1,149:$Vm1,150:$Vn1},o($Vo1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,54:221,58:224,75:225,78:226,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH,172:[1,220]}),o($Ve,[2,184]),{21:94,22:$VC,93:124,193:228},o($Ve,[2,186]),{27:[1,229]},o($Ve,[2,188]),{28:[1,230],30:$Vt1},o($Vu1,[2,143]),o([28,30,37,38,39,40,41,42,43,44,45,46,47,48,49,51,52,53,65],[2,14]),o($Vs,[2,219]),{12:132,13:$Vy,19:$VB,78:131,99:130,219:232},o($Vc1,[2,255]),o($Vc1,[2,257]),o($Vc1,[2,258]),{168:[1,233]},o([1,4,6,28,34,110,138,171,195,196,197,213,216,217],$VI,{211:102,208:103,202:104,170:234,30:$Vv1,203:$VJ,204:$VK,205:$VL,206:$VM}),o($Vw1,[2,235]),o($Vx1,[2,241]),o($Vx1,$VO,{23:111,212:236,19:$VP,91:$VQ}),{27:$Vf1,82:238,84:237,147:$Vt},o($VX,[2,91]),o($VX,[2,89]),o($Vy1,[2,76],{87:$V$,88:$V01}),o($Vy1,[2,77],{87:$V$,88:$V01}),o($V11,[2,78]),o($V11,[2,79]),o($V11,[2,85]),o($V11,[2,86]),o($V31,[2,104],{98:[1,239]}),{28:[1,240]},{19:$VB,78:241},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:242,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{28:[1,243],85:$VZ,86:$V_,87:$V$,88:$V01},o($V11,[2,96]),o($Ve,$Vb1,{174:245,30:[1,246],171:[1,244]}),o($Vh1,[2,201]),{65:[1,247]},o($V51,[2,228],{207:248,140:[1,249]}),o($Vi1,[2,117]),{19:$Vr,97:250},{19:$Vr,97:251},{140:[1,252]},{140:[2,154],144:[1,253]},{30:[1,254],140:[2,155]},o($Vz1,[2,156]),o($Vz1,[2,158]),o($Vz1,[2,159]),o($Vz1,[2,160]),o($Vz1,$VT,{134:255,27:$VU}),o($Vz1,$VT,{134:256,27:$VU}),{173:[1,257]},o($VA1,[2,244],{55:$VB1,56:$VC1}),o($VD1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:260,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($VE1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,84:145,58:224,78:226,54:261,75:262,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH,147:$Vt}),o($VD1,[2,50]),o($VF1,$VG1,{64:263,59:264,57:$VH1,65:$VI1,66:$VJ1,67:$VK1,68:$VL1,69:$VM1,70:$VN1,85:$VZ,86:$V_,87:$V$,88:$V01}),o([28,57,65,66,67,68,69,70,76,77,81,85,86,87,88],$V21,{79:[1,272]}),{27:$Vf1,82:273},o($Vc1,[2,208]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,21:94,22:$VC,63:276,80:$VO1,93:90,180:274,181:275},o([30,91,140,147,179],[2,146]),{18:278,19:$Vd1},o($Vc1,[2,254]),{19:$Vr,27:$Vf1,82:188,97:58,169:187,186:279,210:186},o($VA1,$Vb1,{174:280,171:$VP1}),{19:$Vr,27:$Vf1,82:188,97:58,169:187,210:282},o($Vx1,[2,242]),{28:[1,283]},{28:[1,284]},{19:[1,285]},o($V11,[2,97]),{28:[1,286]},{28:[1,287],85:$VZ,86:$V_,87:$V$,88:$V01},o($V11,[2,100]),o($Vo1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,54:221,58:224,75:225,78:226,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH,172:[1,288]}),o($Ve,[2,206]),{18:206,19:$Vd1,191:289},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:290,78:87,80:[1,291],85:$VE,86:$VF,89:88,93:90,95:$VH},o($V51,[2,230]),o($VD1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:292,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),{27:[1,293]},{27:$VU,91:$VT,134:294},{19:$Vr,97:295},{140:[2,153]},{131:$Vj1,146:296,147:$Vk1,148:$Vl1,149:$Vm1,150:$Vn1},o($Vz1,[2,161]),o($Vz1,[2,162]),{19:$Vf,20:297},o($VD1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:298,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($VD1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:299,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($VD1,[2,48]),{28:[1,300],55:$VB1,56:$VC1},o($VF1,$VG1,{64:263,59:264,28:$Vg1,57:$VH1,65:$VI1,66:$VJ1,67:$VK1,68:$VL1,69:$VM1,70:$VN1,85:$VZ,86:$V_,87:$V$,88:$V01}),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,71:302,72:[1,303],73:[1,304],74:[1,305],75:301,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{76:[1,306],77:[1,307],81:[1,308]},o($VQ1,[2,57]),o($VQ1,[2,58]),o($VQ1,[2,59]),o($VQ1,[2,60]),o($VQ1,[2,61]),o($VQ1,[2,62]),o([76,77,80,81],[2,52]),{57:$VH1,59:309,80:$VG1},o($VD1,[2,73]),{28:[1,310],30:[1,311]},o($Vu1,[2,191]),o($Vu1,[2,189]),o($Vu1,[2,190]),o($Vu1,[2,144]),o([1,4,6,171,213,216,217],$VI,{211:102,208:103,202:104,170:312,30:$Vv1,203:$VJ,204:$VK,205:$VL,206:$VM}),o($VR1,$VS1,{187:313,213:$VT1}),o([1,4,6,28,34,55,56,110,138,195,196,197,213,216,217],$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,54:221,58:224,75:225,78:226,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($Vw1,[2,236]),o($VU1,[2,74]),o($VU1,[2,75]),o($V31,[2,105]),o($V11,[2,98]),o($V11,[2,99]),{173:[1,315]},o($Vh1,[2,202]),o($Vh1,[2,203],{85:$VZ,86:$V_,87:$V$,88:$V01}),o($Vh1,[2,204]),o($V51,[2,229],{55:$VB1,56:$VC1}),{18:320,19:$Vd1,120:316,121:317,122:318,123:319,126:$VV1,127:$VW1,130:$VX1,133:$VY1},{91:[1,325]},{141:[1,326]},o($Vz1,[2,157]),o($Ve,[2,183]),o([1,4,6,28,34,55,110,138,171,192,195,196,197,203,204,205,206,213,216,217],[2,46],{56:$VC1}),o($VD1,[2,47]),o($VD1,[2,49]),o($VD1,[2,66],{85:$VZ,86:$V_,87:$V$,88:$V01}),{27:$Vf1,82:327},{27:[2,63]},{27:[2,64]},{27:[2,65]},{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:328,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},{10:329,11:$VZ1},{27:[1,332],82:331},{80:[1,333]},o($Ve,[2,187]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,21:94,22:$VC,63:276,80:$VO1,93:90,181:334},o([1,4,6,213,216,217],$Vb1,{174:335,171:$VP1}),o($V_1,$V$1,{188:336,216:$V02}),{214:[1,338]},{19:$Vf,20:339},{28:[1,340],30:[1,341]},o($Vu1,[2,122]),o($Vu1,[2,124]),o($Vu1,[2,125]),{36:342,37:[1,343],38:[1,344],39:[1,345],40:[1,346],41:[1,347],42:[1,348],43:[1,349],44:[1,350],45:[1,351],46:[1,352],47:[1,353],48:[1,354],49:[1,355],51:[1,356],52:[1,357],53:[1,358]},{27:[1,359]},{128:[1,360]},{128:[1,361]},{27:[1,362]},{84:363,147:$Vt},{19:$VS,24:367,142:364,151:365,152:$V12},o($VD1,[2,72]),{56:[1,368],85:$VZ,86:$V_,87:$V$,88:$V01},o($VD1,[2,53],{60:369,61:[1,370]}),o([1,4,6,28,34,55,56,61,110,138,171,192,195,196,197,203,204,205,206,213,216,217],[2,8]),o($VD1,[2,70]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,21:94,22:$VC,27:$Vf1,62:371,63:372,82:238,84:237,93:90,147:$Vt},o($VD1,[2,69]),o($Vu1,[2,192]),o([1,4,6,216,217],$VS1,{187:373,213:$VT1}),o($V_1,[2,199]),o([1,4,6,28,34,55,56,110,138,195,196,197,217],$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:374,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),{12:132,13:$Vy,19:$VB,78:131,99:376,215:375},o($Ve,[2,205]),o($Vi1,[2,121]),{18:320,19:$Vd1,121:377,122:318,123:319,126:$VV1,127:$VW1,130:$VX1,133:$VY1},o($V22,[2,127],{124:378}),o($V32,$V42,{31:379,32:$V52}),o($V22,$V62,{26:381,27:$V72}),o($V32,$V42,{31:383,32:$V52}),o($V22,$V62,{26:384,27:$V72}),o($V22,$V82,{29:385,27:$V92}),o($V22,$V82,{29:387,27:$V92}),o($V22,$V62,{26:388,27:$V72}),o($V22,[2,36]),o($V22,[2,37]),o($V22,[2,38]),o($V22,$V62,{26:389,27:$V72}),o($V22,[2,40]),{50:[1,390]},o($Va2,$V62,{26:391,27:$V72}),o($Va2,$V62,{26:392,27:$V72}),o($Va2,$V62,{26:393,27:$V72}),{18:177,19:$Vd1,132:394},{27:[1,395]},{27:[1,396]},o($VE1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:397,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($Vi1,[2,148],{136:398,34:[1,399]}),o($Vi1,[2,151],{143:400,30:[1,401],34:[1,402]}),o($Va1,[2,163]),o($Va1,[2,165]),o($Va1,[2,166]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,19:$VB,21:94,22:$VC,27:$VD,63:86,75:403,78:87,85:$VE,86:$VF,89:88,93:90,95:$VH},o($VD1,[2,68]),{10:404,11:$VZ1},{28:[1,405],30:[1,406]},o($Vu1,[2,55]),o([1,4,6,217],$V$1,{188:407,216:$V02}),o($V_1,[2,250],{55:$VB1,56:$VC1}),o($VR1,[2,246],{30:[1,408]}),o($Vb2,[2,247]),o($Vu1,[2,123]),o($Vu1,[2,126],{125:409,57:[1,410],80:[1,411],126:[1,412],127:[1,413],129:[1,414],130:[1,415],131:[1,416]}),o($V22,$V62,{26:417,27:$V72}),o($V32,[2,26]),o($V22,[2,30]),{12:418,13:$Vy},o($V22,$V62,{26:419,27:$V72}),o($V22,[2,32]),o($V22,[2,33]),{12:420,13:$Vy},o($V22,[2,34]),o($V22,[2,35]),o($V22,[2,39]),o($V22,[2,41]),o($V22,$Vc2,{33:421,34:$Vd2}),o($V22,$Vc2,{33:423,34:$Vd2}),o($V22,$Vc2,{33:424,34:$Vd2}),{28:[1,425],30:$Vt1},{18:177,19:$Vd1,132:426},{18:177,19:$Vd1,132:427},{28:[1,428],55:$VB1,56:$VC1},o($Vi1,[2,147]),{130:[1,429]},o($Vi1,[2,150]),{19:$VS,24:367,151:430,152:$V12},{138:[1,431]},o($VD1,[2,67],{85:$VZ,86:$V_,87:$V$,88:$V01}),o($VD1,[2,54]),o($VD1,[2,71]),{12:96,13:$Vy,14:97,15:$Vz,16:91,17:$VA,21:94,22:$VC,63:432,93:90},o($Ve,$Vi,{189:433,217:$Vm}),{12:132,13:$Vy,19:$VB,78:131,99:434},o($V22,[2,128]),{80:[1,435]},o($V22,[2,130]),o($V22,[2,131]),{128:[1,436]},{12:96,13:$Vy,14:97,15:$Vz,16:437,17:$VA,80:[1,438]},{27:[1,439]},{19:$Vr,97:440},o($V22,[2,29]),{28:[1,441]},o($V22,[2,31]),{28:[1,442],30:[1,443]},o($V22,[2,42]),{35:[1,444]},o($V22,[2,43]),o($V22,[2,44]),o($Vu1,[2,138]),{28:[1,445],30:$Vt1},{28:[1,446],30:$Vt1},o($Vu1,[2,142]),{137:[1,447]},o($Va1,[2,164]),{137:[1,448]},o($Vu1,[2,56]),o($Ve,[2,198]),o($Vb2,[2,248]),o($V22,[2,129]),o($V22,[2,132]),o($V22,[2,133]),o($V22,[2,134]),o($VE1,$Vp1,{63:86,89:88,93:90,16:91,21:94,12:96,14:97,58:224,75:225,78:226,54:449,13:$Vy,15:$Vz,17:$VA,19:$VB,22:$VC,27:$Vq1,57:$Vr1,83:$Vs1,85:$VE,86:$VF,95:$VH}),o($V22,[2,136],{27:[1,450]}),o($Va2,[2,21]),o($V22,[2,23]),{12:451,13:$Vy},o($V22,[2,28]),o($Vu1,[2,139]),{131:[1,452]},o($Vi1,[2,149]),o($Vi1,[2,152]),{28:[1,453],55:$VB1,56:$VC1},{18:177,19:$Vd1,132:454},{28:[1,455]},{19:$Vr,97:456},o($V22,[2,135]),{28:[1,457],30:$Vt1},o($V22,[2,24]),o($Vu1,[2,140],{27:[1,458]}),o($V22,[2,137]),{18:177,19:$Vd1,132:459},{28:[1,460],30:$Vt1},o($Vu1,[2,141])],
defaultActions: {62:[2,5],63:[2,4],108:[2,227],154:[2,224],155:[2,223],156:[2,225],157:[2,226],253:[2,153],303:[2,63],304:[2,64],305:[2,65]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


















/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 73;
break;
case 1:return 56;
break;
case 2:return 72;
break;
case 3:return 91;
break;
case 4:return 221;
break;
case 5:return 112;
break;
case 6:return 76;
break;
case 7:return 45;
break;
case 8:return 39;
break;
case 9:return 46;
break;
case 10:return 214;
break;
case 11:return 37;
break;
case 12:return 130;
break;
case 13:return 166;
break;
case 14:return 167;
break;
case 15:return 224;
break;
case 16:return 110;
break;
case 17:return 172;
break;
case 18:return 102;
break;
case 19:return 51;
break;
case 20:return 42;
break;
case 21:return 101;
break;
case 22:return 129;
break;
case 23:return 149;
break;
case 24:return 222;
break;
case 25:return 96;
break;
case 26:return 49;
break;
case 27:return 61;
break;
case 28:return 197;
break;
case 29:return 83;
break;
case 30:return 175;
break;
case 31:return 47;
break;
case 32:return 103;
break;
case 33:return 133;
break;
case 34:return 107;
break;
case 35:return 168;
break;
case 36:return 205;
break;
case 37:return 223;
break;
case 38:return 138;
break;
case 39:return 213;
break;
case 40:return 216;
break;
case 41:return 81;
break;
case 42:return 94;
break;
case 43:return 206;
break;
case 44:return 148;
break;
case 45:return 43;
break;
case 46:return 196;
break;
case 47:return 176;
break;
case 48:return 79;
break;
case 49:return 209;
break;
case 50:return 128;
break;
case 51:return 'LANGUAGE';
break;
case 52:return 77;
break;
case 53:return 203;
break;
case 54:return 57;
break;
case 55:return 80;
break;
case 56:return 41;
break;
case 57:return 173;
break;
case 58:return 140;
break;
case 59:return 182;
break;
case 60:return 137;
break;
case 61:return 55;
break;
case 62:return 217;
break;
case 63:return 201;
break;
case 64:return 50;
break;
case 65:return 127;
break;
case 66:return 144;
break;
case 67:return 'PROCEDURE';
break;
case 68:return 152;
break;
case 69:return 48;
break;
case 70:return 131;
break;
case 71:return 204;
break;
case 72:return 183;
break;
case 73:return 111;
break;
case 74:return 147;
break;
case 75:return 192;
break;
case 76:return 44;
break;
case 77:return 74;
break;
case 78:return 'SQLCODE';
break;
case 79:return 119;
break;
case 80:return 52;
break;
case 81:return 53;
break;
case 82:return 141;
break;
case 83:return 195;
break;
case 84:return 150;
break;
case 85:return 'USER';
break;
case 86:return 179;
break;
case 87:return 40;
break;
case 88:return 'VARCHAR';
break;
case 89:return 32;
break;
case 90:return 135;
break;
case 91:return 106;
break;
case 92:return 171;
break;
case 93:return 34;
break;
case 94:return 154;
break;
case 95:return 11;
break;
case 96:return 13;
break;
case 97:return 15;
break;
case 98:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 95;
	} else {
		return 19;
	}

break;
case 99:return 'COMMENTS';
break;
case 100:return 22;
break;
case 101:return 'DOUBLE_QUOTE';
break;
case 102:return 'PERCENT';
break;
case 103:return 'AMPERSAND';
break;
case 104:return 'QUOTE';
break;
case 105:return 27;
break;
case 106:return 28;
break;
case 107:return 98;
break;
case 108:return 'COLON';
break;
case 109:return 30;
break;
case 110:return 4;
break;
case 111:return 'VERTICAL_BAR';
break;
case 112:return 'QUESTION_MARK';
break;
case 113:return 'CARET';
break;
case 114:return 87;
break;
case 115:return 88;
break;
case 116:return 85;
break;
case 117:return 86;
break;
case 118:return 65;
break;
case 119:return 66;
break;
case 120:return 67;
break;
case 121:return 68;
break;
case 122:return 'LESS_THAN_OR_EQUAL';
break;
case 123:return 'GREATER_THAN_OR_EQUAL';
break;
case 124:/* Skip */;
break;
case 125:return 6;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BIGINT\b)/,/^(?:BINARY\b)/,/^(?:BOOLEAN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DATE\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXCEPT\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INNER\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTERSECTION\b)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:LEFT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:RIGHT\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TIME\b)/,/^(?:TIMESTAMP\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VARBINARY\b)/,/^(?:VARCHAR\b)/,/^(?:VARYING\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();