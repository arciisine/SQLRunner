import * as literal from '../common/literal';
import * as ref from '../common/ref';
import * as scalar from '../common/scalar';
import * as columnType from '../schema/column-type';
import * as grant from '../schema/grant';
import * as constraint from '../schema/constraint';
import * as create from '../schema/create';
import * as drop from '../schema/drop';
import * as cond from '../query/search-condition';
import * as pred from '../query/predicate';
import * as select from '../query/select';
import * as insert from '../query/insert';
import * as update from '../query/update';
import * as del from '../query/delete';
import * as cursor from '../statement/cursor';
import * as transaction from '../statement/transaction';
import * as order from '../query/orderby';
import * as when from '../statement/when';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,44],$V1=[1,25],$V2=[1,41],$V3=[1,39],$V4=[1,35],$V5=[1,33],$V6=[1,40],$V7=[1,42],$V8=[1,11],$V9=[1,31],$Va=[1,32],$Vb=[1,34],$Vc=[1,36],$Vd=[1,37],$Ve=[1,24],$Vf=[1,6],$Vg=[1,4,6],$Vh=[1,48],$Vi=[1,52],$Vj=[1,53],$Vk=[1,4,6,108,137],$Vl=[2,174],$Vm=[1,56],$Vn=[2,258],$Vo=[1,65],$Vp=[1,66],$Vq=[1,67],$Vr=[1,64],$Vs=[17,19,21,23,26,31,89,90,91,101],$Vt=[2,224],$Vu=[1,70],$Vv=[1,71],$Vw=[1,74],$Vx=[1,84],$Vy=[1,80],$Vz=[1,81],$VA=[1,82],$VB=[1,83],$VC=[1,4,6,32,201,202,203,224],$VD=[1,88],$VE=[1,95],$VF=[1,96],$VG=[1,105],$VH=[31,150],$VI=[1,109],$VJ=[1,129],$VK=[1,130],$VL=[1,125],$VM=[1,122],$VN=[1,128],$VO=[1,119],$VP=[1,114],$VQ=[1,115],$VR=[1,123],$VS=[2,240],$VT=[1,135],$VU=[1,136],$VV=[1,137],$VW=[1,138],$VX=[1,4,6,32,34,38,108,111,137,143,176,178,198,201,202,203,210,211,212,213,220,223,224],$VY=[2,244],$VZ=[1,142],$V_=[1,140],$V$=[1,4,6,23,31,32,34,38,61,84,95,108,111,125,126,128,129,130,137,143,144,150,176,178,186,198,201,202,203,210,211,212,213,220,223,224],$V01=[34,143],$V11=[2,146],$V21=[1,151],$V31=[1,179],$V41=[176,183],$V51=[34,176,183],$V61=[32,34,176,183],$V71=[1,187],$V81=[1,183],$V91=[1,184],$Va1=[1,185],$Vb1=[1,186],$Vc1=[1,4,6,23,32,34,38,59,60,61,69,70,71,72,73,74,80,81,85,89,90,91,92,95,108,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224],$Vd1=[2,87],$Ve1=[1,4,6,23,32,34,38,59,60,61,69,70,71,72,73,74,80,81,83,85,89,90,91,92,95,108,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224,228,229],$Vf1=[1,4,6,23,32,34,38,59,60,61,69,70,71,72,73,74,80,81,84,85,89,90,91,92,95,108,125,126,128,129,130,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224],$Vg1=[1,4,6,32,38,108,137,178,198,201,202,203,210,211,212,213,220,223,224],$Vh1=[1,200],$Vi1=[2,229],$Vj1=[1,210],$Vk1=[1,213],$Vl1=[1,219],$Vm1=[1,220],$Vn1=[1,222],$Vo1=[1,221],$Vp1=[2,250],$Vq1=[1,4,6,34],$Vr1=[1,4,6,32,34,38,108,137,201,202,203,223,224,228,229],$Vs1=[1,237],$Vt1=[1,4,6,32,34,38,108,137,178,201,202,203,210,211,212,213,220,223,224],$Vu1=[1,4,6,32,34,38,108,137,143,178,198,201,202,203,210,211,212,213,220,223,224],$Vv1=[1,248],$Vw1=[1,4,6,34,178],$Vx1=[1,260],$Vy1=[32,34],$Vz1=[1,263],$VA1=[1,4,6,34,38,108,137],$VB1=[1,4,6,59,60],$VC1=[2,49],$VD1=[1,291],$VE1=[1,290],$VF1=[1,295],$VG1=[1,4,6,32,38,108,137,201,202,203,220,223,224],$VH1=[1,301],$VI1=[1,4,6,23,32,34,38,59,60,61,69,70,71,72,73,74,80,81,85,89,90,95,108,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224],$VJ1=[1,317],$VK1=[32,34,61,84,125,126,128,129,130],$VL1=[31,32,34,61,84,125,126,128,129,130],$VM1=[2,29],$VN1=[1,324],$VO1=[2,24],$VP1=[1,326],$VQ1=[2,26],$VR1=[1,330],$VS1=[32,34,38,61,84,125,126,128,129,130],$VT1=[32,59,60],$VU1=[1,345],$VV1=[1,346],$VW1=[1,4,6,32,38,59,60,108,137,178,198,201,202,203,210,211,212,213,220,223,224],$VX1=[80,81,85],$VY1=[2,55],$VZ1=[1,358],$V_1=[1,352],$V$1=[1,353],$V02=[1,354],$V12=[1,355],$V22=[1,356],$V32=[1,357],$V42=[1,364],$V52=[1,4,6,32,38,108,137,201,202,203,223,224],$V62=[2,252],$V72=[1,367],$V82=[1,4,6,23,32,34,38,59,60,95,108,137,143,178,198,201,202,203,210,211,212,213,220,223,224],$V92=[2,31],$Va2=[1,388],$Vb2=[17,19,21,23,26,31,76,77,78,89,90,101],$Vc2=[1,4,6,32,38,108,137,201,202,203,224],$Vd2=[2,256],$Ve2=[1,413],$Vf2=[1,433],$Vg2=[1,4,6,32,34,38,108,137,201,202,203,223,224];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"opt_semicolon":3,"SEMICOLON":4,"opt_eof":5,"EOF":6,"program":7,"stmt_list":8,"stmt":9,"schema_stmt":10,"cursor_stmt":11,"manipulative_stmt":12,"when_stmt":13,"string_literal":14,"STRING_LITERAL":15,"number_literal":16,"NUMBER_LITERAL":17,"scientific_number_literal":18,"SCIENTIFIC_NUMBER_LITERAL":19,"literal":20,"scientific_literal":21,"column":22,"IDENTIFIER":23,"cursor":24,"parameter":25,"PARAMETER":26,"range_variable":27,"userName":28,"alias":29,"opt_size":30,"(":31,")":32,"opt_size_and_precision":33,",":34,"opt_varying":35,"VARYING":36,"opt_timezone":37,"WITH":38,"TIMEZONE":39,"data_type":40,"CHARACTER":41,"VARCHAR":42,"BINARY":43,"VARBINARY":44,"NUMERIC":45,"DECIMAL":46,"INTEGER":47,"SMALLINT":48,"BIGINT":49,"BOOLEAN":50,"FLOAT":51,"REAL":52,"DOUBLE":53,"PRECISION":54,"DATE":55,"TIME":56,"TIMESTAMP":57,"search_condition":58,"OR":59,"AND":60,"NOT":61,"predicate":62,"opt_not":63,"opt_escape":64,"ESCAPE":65,"atom_commalist":66,"atom":67,"comparison":68,"EQUAL":69,"NOT_EQUAL":70,"LESS_THAN":71,"GREATER_THAN":72,"LESS_THAN_EQUAL":73,"GREATER_THAN_EQUAL":74,"any_all_some":75,"ANY":76,"ALL":77,"SOME":78,"scalar_exp":79,"BETWEEN":80,"LIKE":81,"named_column_ref":82,"IS":83,"NULLX":84,"IN":85,"subquery":86,"EXISTS":87,"select_statement":88,"PLUS":89,"MINUS":90,"ASTERISK":91,"DIVIDE":92,"function_ref":93,"selection_scalar":94,"AS":95,"selection_commalist":96,"parameter_ref":97,"function_selection":98,"opt_distinct":99,"INDICATOR":100,"BUILTIN_FUNCTION":101,"table":102,"PERIOD":103,"column_ref_spec":104,"schema_authorize":105,"schema_create_element":106,"schema_drop_element":107,"CREATE":108,"SCHEMA":109,"table_ref":110,"AUTHORIZATION":111,"schema_create_element_list":112,"schema_table":113,"schema_view":114,"schema_privilege":115,"drop_table":116,"drop_view":117,"TABLE":118,"table_element_commalist":119,"table_element":120,"column_def":121,"table_constraint_def":122,"column_def_opt_list":123,"column_def_opt":124,"UNIQUE":125,"PRIMARY":126,"KEY":127,"DEFAULT":128,"CHECK":129,"REFERENCES":130,"column_commalist":131,"FOREIGN":132,"opt_column_commalist":133,"VIEW":134,"opt_with_check_option":135,"OPTION":136,"GRANT":137,"privilege_item":138,"opt_with_grant_option":139,"drop_privilege":140,"REVOKE":141,"privileges":142,"ON":143,"TO":144,"grantee_commalist":145,"opt_privilege_token":146,"PRIVILEGES":147,"operation_commalist":148,"operation":149,"SELECT":150,"INSERT":151,"DELETE":152,"UPDATE":153,"grantee":154,"PUBLIC":155,"DROP":156,"DECLARE":157,"CURSOR":158,"FOR":159,"select_expr_ordered":160,"opt_work":161,"WORK":162,"close_statement":163,"commit_statement":164,"delete_statement_positioned":165,"delete_statement_searched":166,"fetch_statement":167,"insert_statement":168,"open_statement":169,"rollback_statement":170,"select_into_statement":171,"update_statement_positioned":172,"update_statement_searched":173,"CLOSE":174,"COMMIT":175,"FROM":176,"opt_join_ref_list":177,"WHERE":178,"CURRENT":179,"OF":180,"opt_where_clause":181,"FETCH":182,"INTO":183,"target_commalist":184,"values_or_query_spec":185,"VALUES":186,"insert_atom_commalist":187,"insert_atom":188,"OPEN":189,"ROLLBACK":190,"selection":191,"dynamic_table_ref_commalist":192,"opt_group_by_clause":193,"opt_having_clause":194,"opt_order_by_clause":195,"assignment_commalist":196,"assignment":197,"SET":198,"target":199,"select_expr_op":200,"UNION":201,"INTERSECTION":202,"EXCEPT":203,"select_expr":204,"select_term":205,"DISTINCT":206,"opt_join_outer":207,"OUTER":208,"join_type":209,"LEFT":210,"RIGHT":211,"FULL":212,"INNER":213,"opt_join_on_clause":214,"join_ref":215,"JOIN":216,"dynamic_table_ref":217,"join_ref_list":218,"opt_alias":219,"GROUP":220,"BY":221,"column_ref_spec_commalist":222,"HAVING":223,"ORDER":224,"ordering_spec_commalist":225,"ordering_spec":226,"opt_asc_desc":227,"ASC":228,"DESC":229,"WHENEVER":230,"FOUND":231,"when_action":232,"SQLERROR":233,"GOTO":234,"CONTINUE":235,"$accept":0,"$end":1},
terminals_: {2:"error",4:"SEMICOLON",6:"EOF",15:"STRING_LITERAL",17:"NUMBER_LITERAL",19:"SCIENTIFIC_NUMBER_LITERAL",21:"scientific_literal",23:"IDENTIFIER",26:"PARAMETER",31:"(",32:")",34:",",36:"VARYING",38:"WITH",39:"TIMEZONE",41:"CHARACTER",42:"VARCHAR",43:"BINARY",44:"VARBINARY",45:"NUMERIC",46:"DECIMAL",47:"INTEGER",48:"SMALLINT",49:"BIGINT",50:"BOOLEAN",51:"FLOAT",52:"REAL",53:"DOUBLE",54:"PRECISION",55:"DATE",56:"TIME",57:"TIMESTAMP",59:"OR",60:"AND",61:"NOT",65:"ESCAPE",69:"EQUAL",70:"NOT_EQUAL",71:"LESS_THAN",72:"GREATER_THAN",73:"LESS_THAN_EQUAL",74:"GREATER_THAN_EQUAL",76:"ANY",77:"ALL",78:"SOME",80:"BETWEEN",81:"LIKE",83:"IS",84:"NULLX",85:"IN",87:"EXISTS",89:"PLUS",90:"MINUS",91:"ASTERISK",92:"DIVIDE",95:"AS",100:"INDICATOR",101:"BUILTIN_FUNCTION",103:"PERIOD",108:"CREATE",109:"SCHEMA",111:"AUTHORIZATION",118:"TABLE",125:"UNIQUE",126:"PRIMARY",127:"KEY",128:"DEFAULT",129:"CHECK",130:"REFERENCES",132:"FOREIGN",134:"VIEW",136:"OPTION",137:"GRANT",141:"REVOKE",143:"ON",144:"TO",147:"PRIVILEGES",150:"SELECT",151:"INSERT",152:"DELETE",153:"UPDATE",155:"PUBLIC",156:"DROP",157:"DECLARE",158:"CURSOR",159:"FOR",162:"WORK",174:"CLOSE",175:"COMMIT",176:"FROM",178:"WHERE",179:"CURRENT",180:"OF",182:"FETCH",183:"INTO",186:"VALUES",189:"OPEN",190:"ROLLBACK",198:"SET",201:"UNION",202:"INTERSECTION",203:"EXCEPT",206:"DISTINCT",208:"OUTER",210:"LEFT",211:"RIGHT",212:"FULL",213:"INNER",216:"JOIN",220:"GROUP",221:"BY",223:"HAVING",224:"ORDER",228:"ASC",229:"DESC",230:"WHENEVER",231:"FOUND",233:"SQLERROR",234:"GOTO",235:"CONTINUE"},
productions_: [0,[3,0],[3,1],[5,0],[5,1],[7,3],[8,1],[8,3],[9,1],[9,1],[9,1],[9,1],[14,1],[16,1],[18,1],[20,1],[20,1],[20,1],[22,1],[24,1],[25,1],[27,1],[28,1],[29,1],[30,0],[30,3],[33,0],[33,3],[33,5],[35,0],[35,1],[37,0],[37,2],[40,3],[40,2],[40,3],[40,2],[40,2],[40,2],[40,2],[40,1],[40,1],[40,1],[40,2],[40,1],[40,2],[40,3],[40,3],[40,3],[58,0],[58,3],[58,3],[58,2],[58,3],[58,1],[63,0],[63,1],[64,0],[64,2],[66,1],[66,3],[68,1],[68,1],[68,1],[68,1],[68,1],[68,1],[75,1],[75,1],[75,1],[62,3],[62,6],[62,5],[62,4],[62,4],[62,6],[62,4],[62,2],[86,3],[86,3],[79,3],[79,3],[79,3],[79,3],[79,2],[79,2],[79,1],[79,1],[79,1],[79,3],[79,3],[94,1],[94,2],[94,3],[96,1],[96,3],[67,1],[67,1],[98,2],[98,2],[97,1],[97,2],[97,3],[93,4],[102,1],[102,3],[82,1],[82,3],[82,5],[104,1],[104,1],[10,1],[10,1],[10,1],[105,6],[112,1],[112,2],[106,1],[106,1],[106,1],[107,1],[107,1],[113,6],[119,1],[119,3],[120,1],[120,1],[121,3],[123,0],[123,2],[124,2],[124,1],[124,1],[124,2],[124,2],[124,2],[124,4],[124,2],[124,5],[122,4],[122,5],[122,7],[122,10],[122,4],[131,1],[131,3],[133,0],[133,3],[114,7],[135,0],[135,3],[115,3],[140,2],[138,5],[139,0],[139,3],[146,0],[146,1],[142,2],[142,1],[148,1],[148,3],[149,1],[149,1],[149,1],[149,2],[149,2],[145,1],[145,3],[154,1],[154,1],[116,3],[117,3],[11,5],[161,0],[161,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[163,2],[164,2],[165,8],[166,5],[167,4],[168,5],[185,4],[185,1],[188,1],[188,1],[187,1],[187,3],[169,2],[170,2],[171,11],[88,8],[196,0],[196,1],[196,3],[197,3],[197,3],[172,9],[173,6],[184,1],[184,3],[199,1],[200,1],[200,2],[200,1],[200,1],[160,2],[204,1],[204,3],[204,3],[205,1],[205,3],[99,0],[99,1],[99,1],[191,2],[191,2],[207,0],[207,1],[209,2],[209,2],[209,2],[209,1],[214,0],[214,2],[215,4],[218,1],[218,2],[177,0],[177,1],[192,1],[192,3],[219,0],[219,2],[219,1],[110,2],[217,1],[217,2],[181,0],[181,2],[193,0],[193,3],[222,1],[222,3],[194,0],[194,2],[195,0],[195,3],[225,1],[225,3],[226,2],[227,0],[227,1],[227,1],[13,4],[13,3],[232,2],[232,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 5:
 return $$[$0-2]; 
break;
case 6: case 59: case 94: case 115: case 123: case 160: case 167: case 198: case 205: case 211: case 238: case 242: case 254: case 260:
 this.$ = [$$[$0]]; 
break;
case 7: case 60: case 95: case 124: case 145: case 161: case 168: case 206: case 212: case 243: case 255: case 261:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]); 
break;
case 12:
 this.$ = new literal.StringLiteral($$[$0]); 
break;
case 13:
 this.$ = new literal.NumberLiteral(parseFloat($$[$0]));  
break;
case 14:
 this.$ = literal.ScientificNumberLiteral.fromString($$[$0]); 
break;
case 25:
 this.$ = $$[$0-1].value 
break;
case 27:
 this.$ = [$$[$0-1].value] 
break;
case 28:
 this.$ = [$$[$0-3].value, $$[$0-1].value] 
break;
case 30: case 32: case 226:
 this.$ = true 
break;
case 33:
 this.$ = new columnType.CharacterColumnType($$[$0], !!$$[$0-1]) 
break;
case 34:
 this.$ = new columnType.CharacterColumnType($$[$0], true) 
break;
case 35:
 this.$ = new columnType.BinaryColumnType($$[$0], !!$$[$0-1]) 
break;
case 36:
 this.$ = new columnType.BinaryColumnType($$[$0], true) 
break;
case 37:
 this.$ = new columnType.NumericColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 38:
 this.$ = new columnType.DecimalColumnType($$[$0] && $$[$0][0], $$[$0] && $$[$0][1]); 
break;
case 39:
 this.$ = new columnType.IntegerColumnType($$[$0]); 
break;
case 40:
 this.$ = new columnType.SmallIntegerColumnType(); 
break;
case 41:
 this.$ = new columnType.BigIntegerColumnType(); 
break;
case 42:
 this.$ = new columnType.BooleanColumnType(); 
break;
case 43:
 this.$ = new columnType.FloatColumnType($$[$0]); 
break;
case 44:
 this.$ = new columnType.RealColumnType(); 
break;
case 45:
 this.$ = new columnType.DoubleColumnType(); 
break;
case 46:
 this.$ = new columnType.DateColumnType($$[$0-1], $$[$0]); 
break;
case 47:
 this.$ = new columnType.TimeColumnType($$[$0-1], $$[$0]); 
break;
case 48:
 this.$ = new columnType.TimestampColumnType($$[$0-1], $$[$0]); 
break;
case 50:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.OR, $$[$0]) 
break;
case 51:
 this.$ = new cond.BinarySearchCondition($$[$0-2], cond.SearchConditionOperator.AND, $$[$0]) 
break;
case 52:
 this.$ = new cond.NotSearchCondition($$[$0]); 
break;
case 53: case 90: case 147:
 this.$ = $$[$0-1]; 
break;
case 54: case 96: case 97: case 109: case 125: case 126: case 159: case 213: case 219: case 222: case 236: case 241: case 245: case 246: case 248: case 251: case 253: case 257: case 259:
 this.$ = $$[$0]; 
break;
case 56: case 150: case 155: case 175:
 this.$ = true; 
break;
case 58:
 this.$ = $$[$0] 
break;
case 61:
 this.$ = scalar.ComparisonExprOperator.EQUAL 
break;
case 62:
 this.$ = scalar.ComparisonExprOperator.NOT_EQUAL 
break;
case 63:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN 
break;
case 64:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN 
break;
case 65:
 this.$ = scalar.ComparisonExprOperator.LESS_THAN_EQUAL 
break;
case 66:
 this.$ = scalar.ComparisonExprOperator.GREATER_THAN_EQUAL 
break;
case 67:
 this.$ = pred.QueryComparisonOperator.ANY;  
break;
case 68:
 this.$ = pred.QueryComparisonOperator.ALL; 
break;
case 69:
 this.$ = pred.QueryComparisonOperator.SOME; 
break;
case 70:
 this.$ = new pred.ComparisonPredicate($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 71:
 this.$ = new pred.BetweenPredicate($$[$0-5], $$[$0-2], $$[$0-1], !!$$[$0-4]); 
break;
case 72:
 this.$ = new pred.LikePredicate($$[$0-4], $$[$0-1], $$[$0], !!$$[$0-3]); 
break;
case 73:
 this.$ = new pred.NullCheckPredicate($$[$0-3], !!$$[$0-1]); 
break;
case 74:
 this.$ = new pred.InQueryPredicate($$[$0-3], $$[$0], !!$$[$0-2]); 
break;
case 75:
 this.$ = new pred.InArrayPredicate($$[$0-5], $$[$0-1], !!$$[$0-4]); 
break;
case 76:
 this.$ = new pred.QueryComparisonPredicate($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
break;
case 77:
 this.$ = new pred.ExistenceCheckPredicate($$[$0]); 
break;
case 78: case 79:
 this.$ = $$[$0-1] 
break;
case 80:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.PLUS, $$[$0-1]); 
break;
case 81:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MINUS, $$[$0-1]); 
break;
case 82:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.MULTIPLY, $$[$0-1]); 
break;
case 83:
 this.$ = new scalar.BinaryExpr($$[$0-2], scalar.BinaryExprOperator.DIVIDE, $$[$0-1]); 
break;
case 84:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.PLUS); 
break;
case 85:
 this.$ = new scalar.UnaryExpr($$[$0-1], scalar.UnaryExprOperator.MINUS); 
break;
case 86:
 this.$ = new scalar.AtomExpr($$[$0]); 
break;
case 87:
 this.$ = new scalar.NamedColumnRefExpr($$[$0]); 
break;
case 88:
 this.$ = new scalar.FunctionExpr($$[$0]); 
break;
case 89:
 this.$ = new scalar.QueryExpr($$[$0-2]); 
break;
case 91:
 this.$ = new select.ScalarSelectionExpr($$[$0]); 
break;
case 92:
 this.$ = new select.ScalarSelectionExpr($$[$0-1], $$[$0]); 
break;
case 93:
 this.$ = new select.ScalarSelectionExpr($$[$0-2], $$[$0]); 
break;
case 98:
 this.$ = new select.SingleScalarSelection($$[$0], $$[$0-1]); 
break;
case 99: case 228:
 this.$ = new select.AllSelection($$[$0-1]); 
break;
case 100:
 this.$ = new ref.ParameterRef($$[$0]); 
break;
case 101:
 this.$ = new ref.ParameterRef($$[$0-1], $$[$0]); 
break;
case 102:
 this.$ = new ref.ParameterRef($$[$0-2], $$[$0]); 
break;
case 103:
 this.$ = new scalar.FunctionInvocation($$[$0-3], $$[$0-1]); 
break;
case 104:
 this.$ = new ref.TableRef($$[$0], null); 
break;
case 105:
 this.$ = new ref.TableRef($$[$0-1], $$[$0-2]); 
break;
case 106:
 this.$ = new ref.NamedColumnRef($$[$0]); 
break;
case 107:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2]); 
break;
case 108:
 this.$ = new ref.NamedColumnRef($$[$0], $$[$0-2], $$[$0-4]); 
break;
case 110:
 this.$ = new ref.NumberColumnRef($$[$0].value); 
break;
case 114:
 this.$ = new create.AuthorizationSchema($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 116: case 129: case 239:
 this.$ = $$[$0-1]; this.$ = this.$.concat([$$[$0]]); 
break;
case 122:
 this.$ = new create.TableSchema($$[$0-3], $$[$0-1]); 
break;
case 127:
 this.$ = new create.ColumnSchema($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 128:
 this.$ = []; 
break;
case 130:
 this.$ = new constraint.NotNullConstraint(); 
break;
case 131:
 this.$ = new constraint.NullConstraint(); 
break;
case 132:
 this.$ = new constraint.UniqueKeyConstraint(); 
break;
case 133:
 this.$ = new constraint.PrimaryKeyConstraint(); 
break;
case 134:
 this.$ = new constraint.DefaultConstraint($$[$0-1]); 
break;
case 135:
 this.$ = new constraint.DefaultNullConstraint(); 
break;
case 136:
 this.$ = new constraint.CheckConstraint($$[$0-1]); 
break;
case 137:
 this.$ = new constraint.ForeignKeyConstraint($$[$0]); 
break;
case 138:
 this.$ = new constraint.ForeignKeyConstraint($$[$0-3], $$[$0-1]); 
break;
case 139:
 this.$ = new constraint.UniqueKeyTableConstraint($$[$0-1]); 
break;
case 140:
 this.$ = new constraint.PrimaryKeyTableConstraint($$[$0-1]); 
break;
case 141:
 this.$ = new constraint.ForeignKeyTableConstraint($$[$0-3], $$[$0]); 
break;
case 142:
 
		this.$ = new constraint.ForeignKeyTableConstraint($$[$0-6], $$[$0-3], $$[$0-1]);
	
break;
case 143:
 this.$ = new constraint.CheckTableConstraint($$[$0-1]); 
break;
case 144:
 this.$ = [$$[$0]] 
break;
case 148:

			this.$ = new create.ViewSchema($$[$0-4], $$[$0-3], $$[$0-1], !!$$[$0])
		
break;
case 151:
 this.$ = $$[$0-1]; this.$.withGrant = !!$$[$0] 
break;
case 152:
 this.$ = new drop.DropPrivilegeSchema($$[$0]); 
break;
case 153:
 this.$ = new grant.PrivilegeSchema($$[$0-4], $$[$0-2], $$[$0]); 
break;
case 158:
 this.$ = [new grant.AllGrantOperation()]; 
break;
case 162:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.SELECT); 
break;
case 163:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.INSERT); 
break;
case 164:
 this.$ = new grant.BasicQueryGrantOperation(grant.BasicQueryGrantOperationType.DELETE); 
break;
case 165:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.UPDATE, $$[$0]); 
break;
case 166:
 this.$ = new grant.ComplexQueryGrantOperation(grant.ComplexQueryGrantOperationType.REFERENCES, $$[$0]); 
break;
case 169:
 this.$ = new grant.PublicGrantee(); 
break;
case 170:
 this.$ = new grant.UserGrantee($$[$0]); 
break;
case 171:
 this.$ = new drop.DropTableSchema($$[$0-2]); 
break;
case 172:
 this.$ = new drop.DropViewSchema($$[$0-2]); 
break;
case 173:
 this.$ = new cursor.CursorDefinitionStatement($$[$0-3], $$[$0]); 
break;
case 188:
 this.$ = new cursor.CloseStatement($$[$0]); 
break;
case 189:
 this.$ = new transaction.CommitStatement(); 
break;
case 190:
 this.$ = new cursor.DeleteCursorQuery($$[$0-5], $$[$0-4], $$[$0]); 
break;
case 191:
 this.$ = new del.DeleteQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 192:
 this.$ = new cursor.FetchStatement($$[$0-2], $$[$0]); 
break;
case 193:
 this.$ = new insert.InsertQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 194:
 this.$ = new insert.AtomValues($$[$0-1]); 
break;
case 195:
 this.$ = new insert.QueryValues($$[$0]); 
break;
case 199:
 this.$ = $$[$0-2]; this.$ = this.$.concat([$$[$0]]);  
break;
case 200:
 this.$ = new cursor.OpenStatement($$[$0]); 
break;
case 201:
 this.$ = new transaction.RollbackStatement(); 
break;
case 202:
 
		this.$ = new select.WritableSelectQuery(new select.SingleSelectQuery($$[$0-9], $$[$0-5], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1]), $$[$0-7], $$[$0]);
	
break;
case 203:
 
		this.$ = new select.SingleSelectQuery($$[$0-6], $$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]); 
	
break;
case 207:
 this.$ = new update.Assignment($$[$0-2], $$[$0]); 
break;
case 208:
 this.$ = new update.Assignment($$[$0-2], null); 
break;
case 209:

			this.$ = new cursor.UpdateCursorQuery($$[$0-7], $$[$0-6], $$[$0-4], $$[$0]); 
		
break;
case 210:

			this.$ = new update.UpdateQuery($$[$0-4], $$[$0-3], $$[$0-1], $$[$0]);
		
break;
case 214: case 215:
 this.$ = select.BinaryQueryOperator.UNION; 
break;
case 216:
 this.$ = select.BinaryQueryOperator.INTERSECTION; 
break;
case 217:
 this.$ = select.BinaryQueryOperator.EXCEPT; 
break;
case 218:
 this.$ = new select.SortableSelectQuery($$[$0-1], $$[$0]); 
break;
case 220:
 this.$ = new select.BinarySelectQuery($$[$0-2], $$[$0-1], $$[$0]); 
break;
case 221: case 223:
 this.$ = $$[$0-2]; 
break;
case 224: case 225:
 this.$ = false 
break;
case 227:
 this.$ = new select.ScalarSelection($$[$0], $$[$0-1]); 
break;
case 231:
 this.$ = select.JoinType.LEFT; 
break;
case 232:
 this.$ = select.JoinType.RIGHT; 
break;
case 233:
 this.$ = select.JoinType.FULL; 
break;
case 234:
 this.$ = select.JoinType.INNER; 
break;
case 237:
 this.$ = new select.JoinRef($$[$0-3], $$[$0-1], $$[$0]); 
break;
case 247:
 this.$ = new select.NamedFromTableRef($$[$0-1], $$[$0]); 
break;
case 249:
 this.$ = new select.QueryFromTableRef($$[$0-1], $$[$0]); 
break;
case 262:
 this.$ = new order.OrderBy($$[$0-1], $$[$0]); 
break;
case 264:
 this.$ = order.OrderByDirection.ASC; 
break;
case 265:
 this.$ = order.OrderByDirection.DESC; 
break;
case 266:
 this.$ = new when.WheneverNotFound($$[$0]); 
break;
case 267:
 this.$ = new when.WheneverSQLError($$[$0]); 
break;
case 268:
 this.$ = new when.GotoWhenAction($$[$0]); 
break;
case 269:
 this.$ = new when.ContinueWhenAction(); 
break;
}
},
table: [{7:1,8:2,9:3,10:4,11:5,12:6,13:7,31:$V0,88:43,105:8,106:9,107:10,108:$V1,113:26,114:27,115:28,116:29,117:30,137:$V2,150:$V3,151:$V4,152:$V5,153:$V6,156:$V7,157:$V8,160:20,163:12,164:13,165:14,166:15,167:16,168:17,169:18,170:19,171:21,172:22,173:23,174:$V9,175:$Va,182:$Vb,189:$Vc,190:$Vd,204:38,230:$Ve},{1:[3]},o($Vf,[2,1],{3:45,4:[1,46]}),o($Vg,[2,6]),o($Vg,[2,8]),o($Vg,[2,9]),o($Vg,[2,10]),o($Vg,[2,11]),o($Vg,[2,111]),o($Vg,[2,112]),o($Vg,[2,113]),{23:$Vh,24:47},o($Vg,[2,176]),o($Vg,[2,177]),o($Vg,[2,178]),o($Vg,[2,179]),o($Vg,[2,180]),o($Vg,[2,181]),o($Vg,[2,182]),o($Vg,[2,183]),o($Vg,[2,184]),o($Vg,[2,185]),o($Vg,[2,186]),o($Vg,[2,187]),{61:[1,49],233:[1,50]},{109:[1,51],118:$Vi,134:$Vj},o($Vk,[2,117]),o($Vk,[2,118]),o($Vk,[2,119]),o($Vg,[2,120]),o($Vg,[2,121]),{23:$Vh,24:54},o($Vg,$Vl,{161:55,162:$Vm}),{176:[1,57]},{23:$Vh,24:58},{183:[1,59]},{23:$Vh,24:60},o($Vg,$Vl,{161:61,162:$Vm}),o($Vg,$Vn,{195:62,200:63,201:$Vo,202:$Vp,203:$Vq,224:$Vr}),o($Vs,$Vt,{191:68,99:69,77:$Vu,206:$Vv}),{23:$Vw,102:73,110:72},{77:[1,77],130:$Vx,138:75,142:76,148:78,149:79,150:$Vy,151:$Vz,152:$VA,153:$VB},{118:[1,85],134:[1,86]},o($VC,[2,219]),{31:$V0,88:43,150:$VD,204:87},{1:[2,3],5:89,6:[1,90]},o($Vf,[2,2],{10:4,11:5,12:6,13:7,105:8,106:9,107:10,163:12,164:13,165:14,166:15,167:16,168:17,169:18,170:19,160:20,171:21,172:22,173:23,113:26,114:27,115:28,116:29,117:30,204:38,88:43,9:91,31:$V0,108:$V1,137:$V2,150:$V3,151:$V4,152:$V5,153:$V6,156:$V7,157:$V8,174:$V9,175:$Va,182:$Vb,189:$Vc,190:$Vd,230:$Ve}),{158:[1,92]},o([1,4,6,158,183],[2,19]),{231:[1,93]},{232:94,234:$VE,235:$VF},{23:$Vw,102:73,110:97},{23:$Vw,102:98},{23:$Vw,102:99},o($Vg,[2,188]),o($Vg,[2,189]),o($Vg,[2,175]),{23:$Vw,102:73,110:100},{183:[1,101]},{23:$Vw,102:102},o($Vg,[2,200]),o($Vg,[2,201]),o($Vg,[2,218]),{31:$VG,88:104,150:$VD,205:103},{221:[1,106]},o($VH,[2,214],{77:[1,107]}),o($VH,[2,216]),o($VH,[2,217]),{176:$VI,183:[1,108]},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:113,82:117,89:$VP,90:$VQ,91:[1,111],93:118,94:112,96:110,97:120,101:$VR},o($Vs,[2,225]),o($Vs,[2,226]),{177:131,198:$VS,209:134,210:$VT,211:$VU,212:$VV,213:$VW,215:133,218:132},o($VX,$VY,{219:139,27:141,23:$VZ,95:$V_}),o($V$,[2,104],{103:[1,143]}),o($Vk,[2,154],{139:144,38:[1,145]}),{143:[1,146]},{143:[2,156],146:147,147:[1,148]},{34:[1,149],143:[2,159]},o($V01,[2,160]),o($V01,[2,162]),o($V01,[2,163]),o($V01,[2,164]),o($V01,$V11,{133:150,31:$V21}),o($V01,$V11,{133:152,31:$V21}),{23:$Vw,102:73,110:153},{23:$Vw,102:73,110:154},{32:[1,155],200:63,201:$Vo,202:$Vp,203:$Vq},o($Vs,$Vt,{99:69,191:156,77:$Vu,206:$Vv}),{1:[2,5]},{1:[2,4]},o($Vg,[2,7]),{159:[1,157]},{232:158,234:$VE,235:$VF},o($Vg,[2,267]),{23:[1,159]},o($Vg,[2,269]),{111:[1,160]},{31:[1,161]},{31:$V21,95:$V11,133:162},o([1,4,6,178],$VS,{218:132,215:133,209:134,177:163,210:$VT,211:$VU,212:$VV,213:$VW}),{25:124,26:$VN,97:166,184:164,199:165},o([150,186],$V11,{133:167,31:$V21}),o($VC,[2,220]),o($VC,[2,222]),{31:$VG,88:104,150:$VD,205:168},{16:173,17:$VJ,23:$VM,82:172,104:171,225:169,226:170},o($VH,[2,215]),{23:$Vw,102:73,110:174},{23:$Vw,31:$V31,86:178,102:73,110:177,192:175,217:176},o($V41,[2,227],{34:[1,180]}),o($V41,[2,228]),o($V51,[2,94]),o($V61,[2,91],{29:181,23:$V71,89:$V81,90:$V91,91:$Va1,92:$Vb1,95:[1,182]}),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:188,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:189,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},o($Vc1,[2,86]),o($Vc1,$Vd1),o($Vc1,[2,88]),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:191,82:117,88:190,89:$VP,90:$VQ,93:118,97:120,101:$VR,150:$VD},o($Vc1,[2,96]),o($Vc1,[2,97]),o($Ve1,[2,106],{103:[1,192]}),{31:[1,193]},o($Vc1,[2,100],{25:194,26:$VN,100:[1,195]}),o($Vf1,[2,15]),o($Vf1,[2,16]),o($Vf1,[2,17]),o([1,4,6,23,26,32,34,38,59,60,61,69,70,71,72,73,74,80,81,85,89,90,91,92,95,100,108,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224],[2,20]),o([1,4,6,23,32,34,38,59,60,61,69,70,71,72,73,74,80,81,84,85,89,90,91,92,95,108,125,126,128,129,130,137,176,178,183,198,201,202,203,210,211,212,213,220,223,224,228,229],[2,13]),o($Vf1,[2,14]),{198:[1,196]},o([1,4,6,32,38,108,137,178,198,201,202,203,220,223,224],[2,241],{209:134,215:197,210:$VT,211:$VU,212:$VV,213:$VW}),o($Vg1,[2,238]),{216:[1,198]},{207:199,208:$Vh1,216:$Vi1},{207:201,208:$Vh1,216:$Vi1},{207:202,208:$Vh1,216:$Vi1},{216:[2,234]},o($VX,[2,247]),{23:$VZ,27:203},o($VX,[2,246]),o($VX,[2,21]),{23:[1,204]},o($Vk,[2,151]),{137:[1,205]},{23:$Vw,102:206},{143:[2,158]},{143:[2,157]},{130:$Vx,149:207,150:$Vy,151:$Vz,152:$VA,153:$VB},o($V01,[2,165]),{22:209,23:$Vj1,131:208},o($V01,[2,166]),o($Vg,[2,171]),o($Vg,[2,172]),o($VC,[2,221]),{176:$VI},{31:$V0,88:43,150:$VD,160:211,204:38},o($Vg,[2,266]),o($Vg,[2,268]),{23:$Vk1,28:212},{22:218,23:$Vj1,119:214,120:215,121:216,122:217,125:$Vl1,126:$Vm1,129:$Vn1,132:$Vo1},{95:[1,223]},o($Vg,$Vp1,{181:225,178:[1,224]}),o($Vg,[2,192],{34:[1,226]}),o($Vq1,[2,211]),o($Vq1,[2,213]),{88:229,150:$VD,185:227,186:[1,228]},{32:[1,230]},o($Vg,[2,259],{34:[1,231]}),o($Vq1,[2,260]),o($Vq1,[2,263],{227:232,228:[1,233],229:[1,234]}),o($Vr1,[2,109]),o($Vr1,[2,110]),{176:[1,235]},o([1,4,6,32,38,108,137,178,201,202,203,220,223,224],$VS,{218:132,215:133,209:134,177:236,34:$Vs1,210:$VT,211:$VU,212:$VV,213:$VW}),o($Vt1,[2,242]),o($Vu1,[2,248]),o($Vu1,$VY,{27:141,219:238,23:$VZ,95:$V_}),{31:$V31,86:240,88:239,150:$VD},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:113,82:117,89:$VP,90:$VQ,93:118,94:241,97:120,101:$VR},o($V61,[2,92]),{23:$V71,29:242},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:243,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:244,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:245,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:246,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},o($V61,[2,23]),o($Vc1,[2,84]),o($Vc1,[2,85]),{32:[1,247]},{32:$Vv1,89:$V81,90:$V91,91:$Va1,92:$Vb1},{23:[1,249]},o($Vs,$Vt,{98:250,99:251,77:$Vu,206:$Vv}),o($Vc1,[2,101]),{25:252,26:$VN},o($Vw1,[2,204],{196:253,197:254,22:255,23:$Vj1}),o($Vg1,[2,239]),{23:$Vw,31:$V31,86:178,102:73,110:177,217:256},{216:[2,231]},{216:[2,230]},{216:[2,232]},{216:[2,233]},o($VX,[2,245]),o($V$,[2,105]),{136:[1,257]},{144:[1,258]},o($V01,[2,161]),{32:[1,259],34:$Vx1},o($Vy1,[2,144]),o([32,34,41,42,43,44,45,46,47,48,49,50,51,52,53,55,56,57,69],[2,18]),o($Vg,[2,173]),{106:262,108:$Vz1,112:261,113:26,114:27,115:28,137:$V2},o($VA1,[2,22]),{32:[1,264],34:[1,265]},o($Vy1,[2,123]),o($Vy1,[2,125]),o($Vy1,[2,126]),{40:266,41:[1,267],42:[1,268],43:[1,269],44:[1,270],45:[1,271],46:[1,272],47:[1,273],48:[1,274],49:[1,275],50:[1,276],51:[1,277],52:[1,278],53:[1,279],55:[1,280],56:[1,281],57:[1,282]},{31:[1,283]},{127:[1,284]},{127:[1,285]},{31:[1,286]},{88:287,150:$VD},o($VB1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,58:289,62:292,79:293,82:294,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR,179:[1,288]}),o($Vg,[2,191]),{25:124,26:$VN,97:166,199:296},o($Vg,[2,193]),{31:[1,297]},o($Vg,[2,195]),o($VC,[2,223]),{16:173,17:$VJ,23:$VM,82:172,104:171,226:298},o($Vq1,[2,262]),o($Vq1,[2,264]),o($Vq1,[2,265]),{23:$Vw,31:$V31,86:178,102:73,110:177,192:299,217:176},o($VG1,$Vp1,{181:300,178:$VH1}),{23:$Vw,31:$V31,86:178,102:73,110:177,217:302},o($Vu1,[2,249]),{32:[1,303]},{32:[1,304]},o($V51,[2,95]),o($V61,[2,93]),o($VI1,[2,80],{91:$Va1,92:$Vb1}),o($VI1,[2,81],{91:$Va1,92:$Vb1}),o($Vc1,[2,82]),o($Vc1,[2,83]),o($Vc1,[2,89]),o($Vc1,[2,90]),o($Ve1,[2,107],{103:[1,305]}),{32:[1,306]},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:113,82:117,89:$VP,90:$VQ,91:[1,308],93:118,94:307,97:120,101:$VR},o($Vc1,[2,102]),o($Vg,$Vp1,{181:310,34:[1,311],178:[1,309]}),o($Vw1,[2,205]),{69:[1,312]},o($Vg1,[2,235],{214:313,143:[1,314]}),o($Vk,[2,155]),{23:$Vk1,28:318,145:315,154:316,155:$VJ1},o([34,95,143,150,186],[2,147]),{22:319,23:$Vj1},o($Vg,[2,114],{113:26,114:27,115:28,106:320,108:$Vz1,137:$V2}),o($Vk,[2,115]),{118:$Vi,134:$Vj},o($Vk,[2,122]),{22:218,23:$Vj1,120:321,121:216,122:217,125:$Vl1,126:$Vm1,129:$Vn1,132:$Vo1},o($VK1,[2,128],{123:322}),o($VL1,$VM1,{35:323,36:$VN1}),o($VK1,$VO1,{30:325,31:$VP1}),o($VL1,$VM1,{35:327,36:$VN1}),o($VK1,$VO1,{30:328,31:$VP1}),o($VK1,$VQ1,{33:329,31:$VR1}),o($VK1,$VQ1,{33:331,31:$VR1}),o($VK1,$VO1,{30:332,31:$VP1}),o($VK1,[2,40]),o($VK1,[2,41]),o($VK1,[2,42]),o($VK1,$VO1,{30:333,31:$VP1}),o($VK1,[2,44]),{54:[1,334]},o($VS1,$VO1,{30:335,31:$VP1}),o($VS1,$VO1,{30:336,31:$VP1}),o($VS1,$VO1,{30:337,31:$VP1}),{22:209,23:$Vj1,131:338},{31:[1,339]},{31:[1,340]},o($VT1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:341,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($Vk,[2,149],{135:342,38:[1,343]}),{180:[1,344]},o($VG1,[2,251],{59:$VU1,60:$VV1}),o($VW1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:347,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($VT1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,88:190,62:292,82:294,58:348,79:349,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR,150:$VD}),o($VW1,[2,54]),o($VX1,$VY1,{68:350,63:351,61:$VZ1,69:$V_1,70:$V$1,71:$V02,72:$V12,73:$V22,74:$V32,89:$V81,90:$V91,91:$Va1,92:$Vb1}),o([32,61,69,70,71,72,73,74,80,81,85,89,90,91,92],$Vd1,{83:[1,359]}),{31:$V31,86:360},o($Vq1,[2,212]),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,25:124,26:$VN,67:363,84:$V42,97:120,187:361,188:362},o($Vq1,[2,261]),o([1,4,6,178,220,223,224],$VS,{218:132,215:133,209:134,177:365,34:$Vs1,210:$VT,211:$VU,212:$VV,213:$VW}),o($V52,$V62,{193:366,220:$V72}),o([1,4,6,32,38,59,60,108,137,201,202,203,220,223,224],$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,58:289,62:292,79:293,82:294,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($Vt1,[2,243]),o($V82,[2,78]),o($V82,[2,79]),{23:[1,368]},o($Vc1,[2,103]),{32:[2,98]},{32:[2,99]},o($VB1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,58:289,62:292,79:293,82:294,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR,179:[1,369]}),o($Vg,[2,210]),{22:255,23:$Vj1,197:370},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:371,82:117,84:[1,372],89:$VP,90:$VQ,93:118,97:120,101:$VR},o($Vg1,[2,237]),o($VW1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:373,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o([1,4,6,38,108,137],[2,153],{34:[1,374]}),o($VA1,[2,167]),o($VA1,[2,169]),o($VA1,[2,170]),o($Vy1,[2,145]),o($Vk,[2,116]),o($Vy1,[2,124]),o($Vy1,[2,127],{124:375,61:[1,376],84:[1,377],125:[1,378],126:[1,379],128:[1,380],129:[1,381],130:[1,382]}),o($VK1,$VO1,{30:383,31:$VP1}),o($VL1,[2,30]),o($VK1,[2,34]),{16:384,17:$VJ},o($VK1,$VO1,{30:385,31:$VP1}),o($VK1,[2,36]),o($VK1,[2,37]),{16:386,17:$VJ},o($VK1,[2,38]),o($VK1,[2,39]),o($VK1,[2,43]),o($VK1,[2,45]),o($VK1,$V92,{37:387,38:$Va2}),o($VK1,$V92,{37:389,38:$Va2}),o($VK1,$V92,{37:390,38:$Va2}),{32:[1,391],34:$Vx1},{22:209,23:$Vj1,131:392},{22:209,23:$Vj1,131:393},{32:[1,394],59:$VU1,60:$VV1},o($Vk,[2,148]),{129:[1,395]},{23:$Vh,24:396},o($VW1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:397,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($VW1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:398,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($VW1,[2,52]),{32:[1,399],59:$VU1,60:$VV1},o($VX1,$VY1,{68:350,63:351,32:$Vv1,61:$VZ1,69:$V_1,70:$V$1,71:$V02,72:$V12,73:$V22,74:$V32,89:$V81,90:$V91,91:$Va1,92:$Vb1}),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,75:401,76:[1,402],77:[1,403],78:[1,404],79:400,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{80:[1,405],81:[1,406],85:[1,407]},o($Vb2,[2,61]),o($Vb2,[2,62]),o($Vb2,[2,63]),o($Vb2,[2,64]),o($Vb2,[2,65]),o($Vb2,[2,66]),o([80,81,84,85],[2,56]),{61:$VZ1,63:408,84:$VY1},o($VW1,[2,77]),{32:[1,409],34:[1,410]},o($Vy1,[2,198]),o($Vy1,[2,196]),o($Vy1,[2,197]),o([1,4,6,220,223,224],$Vp1,{181:411,178:$VH1}),o($Vc2,$Vd2,{194:412,223:$Ve2}),{221:[1,414]},o($Ve1,[2,108]),{180:[1,415]},o($Vw1,[2,206]),o($Vw1,[2,207],{89:$V81,90:$V91,91:$Va1,92:$Vb1}),o($Vw1,[2,208]),o($Vg1,[2,236],{59:$VU1,60:$VV1}),{23:$Vk1,28:318,154:416,155:$VJ1},o($VK1,[2,129]),{84:[1,417]},o($VK1,[2,131]),o($VK1,[2,132]),{127:[1,418]},{16:126,17:$VJ,18:127,19:$VK,20:419,21:$VL,84:[1,420]},{31:[1,421]},{23:$Vw,102:422},o($VK1,[2,33]),{32:[1,423]},o($VK1,[2,35]),{32:[1,424],34:[1,425]},o($VK1,[2,46]),{39:[1,426]},o($VK1,[2,47]),o($VK1,[2,48]),o($Vy1,[2,139]),{32:[1,427],34:$Vx1},{32:[1,428],34:$Vx1},o($Vy1,[2,143]),{136:[1,429]},o($Vg,[2,190]),o([1,4,6,32,38,59,108,137,178,198,201,202,203,210,211,212,213,220,223,224],[2,50],{60:$VV1}),o($VW1,[2,51]),o($VW1,[2,53]),o($VW1,[2,70],{89:$V81,90:$V91,91:$Va1,92:$Vb1}),{31:$V31,86:430},{31:[2,67]},{31:[2,68]},{31:[2,69]},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:431,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},{14:432,15:$Vf2},{31:[1,435],86:434},{84:[1,436]},o($Vg,[2,194]),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,25:124,26:$VN,67:363,84:$V42,97:120,188:437},o([1,4,6,223,224],$V62,{193:438,220:$V72}),o($Vc2,[2,203]),o([1,4,6,32,38,59,60,108,137,201,202,203,224],$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:439,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),{16:173,17:$VJ,23:$VM,82:172,104:441,222:440},{23:$Vh,24:442},o($VA1,[2,168]),o($VK1,[2,130]),o($VK1,[2,133]),o($VK1,[2,134]),o($VK1,[2,135]),o($VT1,$VC1,{67:116,93:118,97:120,20:121,25:124,16:126,18:127,62:292,79:293,82:294,58:443,17:$VJ,19:$VK,21:$VL,23:$VM,26:$VN,31:$VD1,61:$VE1,87:$VF1,89:$VP,90:$VQ,101:$VR}),o($VK1,[2,137],{31:[1,444]}),o($VS1,[2,25]),o($VK1,[2,27]),{16:445,17:$VJ},o($VK1,[2,32]),o($Vy1,[2,140]),{130:[1,446]},o($Vk,[2,150]),o($VW1,[2,76]),{60:[1,447],89:$V81,90:$V91,91:$Va1,92:$Vb1},o($VW1,[2,57],{64:448,65:[1,449]}),o([1,4,6,32,38,59,60,65,108,137,178,198,201,202,203,210,211,212,213,220,223,224],[2,12]),o($VW1,[2,74]),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,25:124,26:$VN,31:$V31,66:450,67:451,86:240,88:239,97:120,150:$VD},o($VW1,[2,73]),o($Vy1,[2,199]),o([1,4,6,224],$Vd2,{194:452,223:$Ve2}),o($Vc2,[2,257],{59:$VU1,60:$VV1}),o($V52,[2,253],{34:[1,453]}),o($Vg2,[2,254]),o($Vg,[2,209]),{32:[1,454],59:$VU1,60:$VV1},{22:209,23:$Vj1,131:455},{32:[1,456]},{23:$Vw,102:457},{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,23:$VM,25:124,26:$VN,31:$VO,67:116,79:458,82:117,89:$VP,90:$VQ,93:118,97:120,101:$VR},o($VW1,[2,72]),{14:459,15:$Vf2},{32:[1,460],34:[1,461]},o($Vy1,[2,59]),o($Vg,$Vn,{195:462,224:$Vr}),{16:173,17:$VJ,23:$VM,82:172,104:463},o($VK1,[2,136]),{32:[1,464],34:$Vx1},o($VK1,[2,28]),o($Vy1,[2,141],{31:[1,465]}),o($VW1,[2,71],{89:$V81,90:$V91,91:$Va1,92:$Vb1}),o($VW1,[2,58]),o($VW1,[2,75]),{16:126,17:$VJ,18:127,19:$VK,20:121,21:$VL,25:124,26:$VN,67:466,97:120},o($Vg,[2,202]),o($Vg2,[2,255]),o($VK1,[2,138]),{22:209,23:$Vj1,131:467},o($Vy1,[2,60]),{32:[1,468],34:$Vx1},o($Vy1,[2,142])],
defaultActions: {89:[2,5],90:[2,4],138:[2,234],147:[2,158],148:[2,157],199:[2,231],200:[2,230],201:[2,232],202:[2,233],307:[2,98],308:[2,99],402:[2,67],403:[2,68],404:[2,69]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};




















/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 77;
break;
case 1:return 60;
break;
case 2:return 76;
break;
case 3:return 95;
break;
case 4:return 228;
break;
case 5:return 111;
break;
case 6:return 80;
break;
case 7:return 49;
break;
case 8:return 43;
break;
case 9:return 50;
break;
case 10:return 221;
break;
case 11:return 41;
break;
case 12:return 129;
break;
case 13:return 174;
break;
case 14:return 175;
break;
case 15:return 235;
break;
case 16:return 108;
break;
case 17:return 179;
break;
case 18:return 158;
break;
case 19:return 55;
break;
case 20:return 46;
break;
case 21:return 157;
break;
case 22:return 128;
break;
case 23:return 152;
break;
case 24:return 229;
break;
case 25:return 206;
break;
case 26:return 53;
break;
case 27:return 156;
break;
case 28:return 65;
break;
case 29:return 203;
break;
case 30:return 87;
break;
case 31:return 182;
break;
case 32:return 51;
break;
case 33:return 159;
break;
case 34:return 132;
break;
case 35:return 231;
break;
case 36:return 176;
break;
case 37:return 212;
break;
case 38:return 234;
break;
case 39:return 137;
break;
case 40:return 220;
break;
case 41:return 223;
break;
case 42:return 85;
break;
case 43:return 100;
break;
case 44:return 213;
break;
case 45:return 151;
break;
case 46:return 47;
break;
case 47:return 202;
break;
case 48:return 183;
break;
case 49:return 83;
break;
case 50:return 216;
break;
case 51:return 127;
break;
case 52:return 'LANGUAGE';
break;
case 53:return 81;
break;
case 54:return 210;
break;
case 55:return 61;
break;
case 56:return 84;
break;
case 57:return 45;
break;
case 58:return 180;
break;
case 59:return 143;
break;
case 60:return 189;
break;
case 61:return 136;
break;
case 62:return 59;
break;
case 63:return 224;
break;
case 64:return 208;
break;
case 65:return 54;
break;
case 66:return 126;
break;
case 67:return 147;
break;
case 68:return 'PROCEDURE';
break;
case 69:return 155;
break;
case 70:return 52;
break;
case 71:return 130;
break;
case 72:return 211;
break;
case 73:return 190;
break;
case 74:return 109;
break;
case 75:return 150;
break;
case 76:return 198;
break;
case 77:return 48;
break;
case 78:return 78;
break;
case 79:return 'SQLCODE';
break;
case 80:return 118;
break;
case 81:return 56;
break;
case 82:return 57;
break;
case 83:return 144;
break;
case 84:return 201;
break;
case 85:return 153;
break;
case 86:return 'USER';
break;
case 87:return 186;
break;
case 88:return 44;
break;
case 89:return 42;
break;
case 90:return 36;
break;
case 91:return 134;
break;
case 92:return 230;
break;
case 93:return 178;
break;
case 94:return 38;
break;
case 95:return 162;
break;
case 96:return 15;
break;
case 97:return 17;
break;
case 98:return 19;
break;
case 99:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 101;
	} else {
		return 23;
	}

break;
case 100:return 'COMMENTS';
break;
case 101:return 26;
break;
case 102:return 'DOUBLE_QUOTE';
break;
case 103:return 'PERCENT';
break;
case 104:return 'AMPERSAND';
break;
case 105:return 'QUOTE';
break;
case 106:return 31;
break;
case 107:return 32;
break;
case 108:return 103;
break;
case 109:return 'COLON';
break;
case 110:return 34;
break;
case 111:return 4;
break;
case 112:return 'VERTICAL_BAR';
break;
case 113:return 'QUESTION_MARK';
break;
case 114:return 'CARET';
break;
case 115:return 91;
break;
case 116:return 92;
break;
case 117:return 89;
break;
case 118:return 90;
break;
case 119:return 69;
break;
case 120:return 70;
break;
case 121:return 71;
break;
case 122:return 72;
break;
case 123:return 'LESS_THAN_OR_EQUAL';
break;
case 124:return 'GREATER_THAN_OR_EQUAL';
break;
case 125:/* Skip */;
break;
case 126:return 6;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BIGINT\b)/,/^(?:BINARY\b)/,/^(?:BOOLEAN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DATE\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:DROP\b)/,/^(?:ESCAPE\b)/,/^(?:EXCEPT\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INNER\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTERSECTION\b)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:LEFT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:RIGHT\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TIME\b)/,/^(?:TIMESTAMP\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VARBINARY\b)/,/^(?:VARCHAR\b)/,/^(?:VARYING\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t\n]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();