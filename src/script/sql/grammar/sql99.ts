import {Atom} from '../common/literal';
import {ParameterRef} from '../common/ref';
/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$):any,
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
export var parser = (function(){
var o=function(k,v,o=undefined,l=undefined){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,33],$V1=[1,7],$V2=[1,8],$V3=[1,30],$V4=[1,26],$V5=[1,24],$V6=[1,31],$V7=[1,9],$V8=[1,22],$V9=[1,23],$Va=[1,25],$Vb=[1,27],$Vc=[1,28],$Vd=[6,7],$Ve=[1,41],$Vf=[2,250],$Vg=[1,52],$Vh=[1,53],$Vi=[1,54],$Vj=[1,51],$Vk=[9,10,11,13,16,22,71,72,73,80,82],$Vl=[2,191],$Vm=[1,56],$Vn=[1,57],$Vo=[1,59],$Vp=[6,7,23,181,182,183,208],$Vq=[1,61],$Vr=[1,22,89,93,131,132,133,134,137,152,153,162,169,170],$Vs=[1,66],$Vt=[1,67],$Vu=[1,76],$Vv=[22,131],$Vw=[1,96],$Vx=[1,97],$Vy=[1,98],$Vz=[1,93],$VA=[1,99],$VB=[1,89],$VC=[1,84],$VD=[1,85],$VE=[1,81],$VF=[1,92],$VG=[1,94],$VH=[2,231],$VI=[1,104],$VJ=[1,105],$VK=[1,106],$VL=[1,107],$VM=[6,7,13,22,23,25,36,77,93,112,113,114,120,122,124,125,131,158,166,175,181,182,183,193,194,195,196,203,207,208],$VN=[1,114],$VO=[6,7,23,25,93,120,122,124,158,175,181,182,183,193,194,195,196,203,207,208],$VP=[2,235],$VQ=[1,120],$VR=[1,118],$VS=[2,141],$VT=[1,125],$VU=[1,129],$VV=[1,134],$VW=[155,163],$VX=[25,155,163],$VY=[1,142],$VZ=[1,138],$V_=[1,139],$V$=[1,140],$V01=[1,141],$V11=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,53,54,61,71,72,73,74,77,93,120,122,155,158,163,175,181,182,183,193,194,195,196,203,207,208],$V21=[2,77],$V31=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,53,54,58,61,71,72,73,74,77,93,120,122,155,158,163,175,181,182,183,193,194,195,196,203,207,208,212,213],$V41=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,53,54,61,71,72,73,74,77,93,112,113,114,120,122,155,158,163,175,181,182,183,193,194,195,196,203,207,208],$V51=[6,7,23,93,120,122,158,175,181,182,183,193,194,195,196,203,207,208],$V61=[1,155],$V71=[2,220],$V81=[1,166],$V91=[1,167],$Va1=[6,7,25,93,120,122],$Vb1=[2,204],$Vc1=[1,173],$Vd1=[6,7,25,155],$Ve1=[1,179],$Vf1=[6,7,25],$Vg1=[2,256],$Vh1=[1,183],$Vi1=[1,184],$Vj1=[6,7,23,93,120,122,181,182,183,208],$Vk1=[6,7,23,93,120,122,181,182,183,203,207,208],$Vl1=[1,193],$Vm1=[1,201],$Vn1=[6,7,25,158],$Vo1=[6,7,93,122],$Vp1=[1,223],$Vq1=[1,219],$Vr1=[1,220],$Vs1=[1,221],$Vt1=[1,222],$Vu1=[6,7,34,35],$Vv1=[2,29],$Vw1=[1,227],$Vx1=[1,226],$Vy1=[1,238],$Vz1=[1,242],$VA1=[23,25],$VB1=[6,7,23,93,120,122,181,182,183,207,208],$VC1=[6,7,23,93,120,122,158,181,182,183,203,207,208],$VD1=[6,7,23,25,93,120,122,158,181,182,183,193,194,195,196,203,207,208],$VE1=[6,7,13,23,25,34,35,36,46,47,48,49,50,51,53,54,61,71,72,77,93,120,122,155,158,163,175,181,182,183,193,194,195,196,203,207,208],$VF1=[25,124],$VG1=[1,271],$VH1=[1,272],$VI1=[6,7,23,34,35,93,120,122,158,175,181,182,183,193,194,195,196,203,207,208],$VJ1=[23,34,35],$VK1=[1,277],$VL1=[1,281],$VM1=[1,282],$VN1=[1,283],$VO1=[1,284],$VP1=[1,285],$VQ1=[1,286],$VR1=[1,278],$VS1=[1,279],$VT1=[2,57],$VU1=[1,292],$VV1=[9,10,11,13,16,22,66,67,68,71,72,80,82],$VW1=[1,335],$VX1=[6,7,13,23,25,34,35,77,93,120,122,124,158,175,181,182,183,193,194,195,196,203,207,208],$VY1=[1,342],$VZ1=[1,343],$V_1=[1,345],$V$1=[1,344],$V02=[2,53],$V12=[1,353],$V22=[6,7,23,25,93,120,122,181,182,183,207,208],$V32=[1,378],$V42=[23,25,36,112,113,114];
var parser = {lexer:undefined, Parser:undefined, trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"stmt_list":4,"stmt":5,"SEMICOLON":6,"EOF":7,"literal":8,"STRING_LITERAL":9,"NUMBER_LITERAL":10,"SCIENTIFIC_NUMBER_LITERAL":11,"column":12,"IDENTIFIER":13,"cursor":14,"parameter":15,"PARAMETER":16,"range_variable":17,"userName":18,"alias":19,"data_type":20,"CHARACTER":21,"LEFT_PAREN":22,"RIGHT_PAREN":23,"NUMERIC":24,"COMMA":25,"DECIMAL":26,"INTEGER":27,"SMALLINT":28,"FLOAT":29,"REAL":30,"DOUBLE":31,"PRECISION":32,"search_condition":33,"OR":34,"AND":35,"NOT":36,"predicate":37,"comparison_predicate":38,"between_predicate":39,"like_predicate":40,"test_for_null":41,"in_predicate":42,"all_or_any_predicate":43,"existence_test":44,"comparison":45,"EQUAL":46,"NOT_EQUAL":47,"LESS_THAN":48,"GREATER_THAN":49,"LESS_THAN_EQUAL":50,"GREATER_THAN_EQUAL":51,"scalar_exp":52,"BETWEEN":53,"LIKE":54,"opt_escape":55,"ESCAPE":56,"column_ref":57,"IS":58,"NULLX":59,"opt_not":60,"IN":61,"subquery":62,"atom_commalist":63,"atom":64,"any_all_some":65,"ANY":66,"ALL":67,"SOME":68,"EXISTS":69,"select_statement":70,"PLUS":71,"MINUS":72,"ASTERISK":73,"DIVIDE":74,"function_ref":75,"selection_scalar":76,"AS":77,"selection_commalist":78,"parameter_ref":79,"USER":80,"INDICATOR":81,"BUILTIN_FUNCTION":82,"DISTINCT":83,"table":84,"PERIOD":85,"schema":86,"cursor_def":87,"manipulative_statement":88,"WHENEVER":89,"FOUND":90,"when_action":91,"SQLERROR":92,"CREATE":93,"SCHEMA":94,"AUTHORIZATION":95,"opt_schema_element_list":96,"schema_element_list":97,"schema_element":98,"base_table_def":99,"view_def":100,"privilege_def":101,"TABLE":102,"base_table_element_commalist":103,"base_table_element":104,"column_def":105,"table_constraint_def":106,"column_def_opt_list":107,"column_def_opt":108,"UNIQUE":109,"PRIMARY":110,"KEY":111,"DEFAULT":112,"CHECK":113,"REFERENCES":114,"column_commalist":115,"FOREIGN":116,"VIEW":117,"opt_column_commalist":118,"opt_with_check_option":119,"WITH":120,"OPTION":121,"GRANT":122,"privileges":123,"ON":124,"TO":125,"grantee_commalist":126,"opt_with_grant_option":127,"PRIVILEGES":128,"operation_commalist":129,"operation":130,"SELECT":131,"INSERT":132,"DELETE":133,"UPDATE":134,"grantee":135,"PUBLIC":136,"DECLARE":137,"CURSOR":138,"FOR":139,"select_expr_ordered":140,"close_statement":141,"commit_statement":142,"delete_statement_positioned":143,"delete_statement_searched":144,"fetch_statement":145,"insert_statement":146,"open_statement":147,"rollback_statement":148,"select_into_statement":149,"update_statement_positioned":150,"update_statement_searched":151,"CLOSE":152,"COMMIT":153,"WORK":154,"FROM":155,"table_ref":156,"opt_join_ref_list":157,"WHERE":158,"CURRENT":159,"OF":160,"opt_where_clause":161,"FETCH":162,"INTO":163,"target_commalist":164,"values_or_query_spec":165,"VALUES":166,"insert_atom_commalist":167,"insert_atom":168,"OPEN":169,"ROLLBACK":170,"opt_all_distinct":171,"selection":172,"table_exp":173,"opt_order_by_clause":174,"SET":175,"assignment_commalist":176,"assignment":177,"target":178,"where_clause":179,"select_expr_op":180,"UNION":181,"INTERSECTION":182,"EXCEPT":183,"select_expr":184,"select_term":185,"from_clause":186,"opt_group_by_clause":187,"opt_having_clause":188,"dynamic_table_ref_commalist":189,"opt_join_outer":190,"OUTER":191,"join_type":192,"LEFT":193,"RIGHT":194,"FULL":195,"INNER":196,"opt_join_on_clause":197,"join_ref":198,"JOIN":199,"dynamic_table_ref":200,"join_ref_list":201,"opt_alias":202,"GROUP":203,"BY":204,"column_ref_commalist":205,"column_ref_spec":206,"HAVING":207,"ORDER":208,"ordering_spec_commalist":209,"ordering_spec":210,"opt_asc_desc":211,"ASC":212,"DESC":213,"GOTO":214,"CONTINUE":215,"$accept":0,"$end":1},
terminals_: {2:"error",6:"SEMICOLON",7:"EOF",9:"STRING_LITERAL",10:"NUMBER_LITERAL",11:"SCIENTIFIC_NUMBER_LITERAL",13:"IDENTIFIER",16:"PARAMETER",21:"CHARACTER",22:"LEFT_PAREN",23:"RIGHT_PAREN",24:"NUMERIC",25:"COMMA",26:"DECIMAL",27:"INTEGER",28:"SMALLINT",29:"FLOAT",30:"REAL",31:"DOUBLE",32:"PRECISION",34:"OR",35:"AND",36:"NOT",46:"EQUAL",47:"NOT_EQUAL",48:"LESS_THAN",49:"GREATER_THAN",50:"LESS_THAN_EQUAL",51:"GREATER_THAN_EQUAL",53:"BETWEEN",54:"LIKE",56:"ESCAPE",58:"IS",59:"NULLX",61:"IN",66:"ANY",67:"ALL",68:"SOME",69:"EXISTS",71:"PLUS",72:"MINUS",73:"ASTERISK",74:"DIVIDE",77:"AS",80:"USER",81:"INDICATOR",82:"BUILTIN_FUNCTION",83:"DISTINCT",85:"PERIOD",89:"WHENEVER",90:"FOUND",92:"SQLERROR",93:"CREATE",94:"SCHEMA",95:"AUTHORIZATION",102:"TABLE",109:"UNIQUE",110:"PRIMARY",111:"KEY",112:"DEFAULT",113:"CHECK",114:"REFERENCES",116:"FOREIGN",117:"VIEW",120:"WITH",121:"OPTION",122:"GRANT",124:"ON",125:"TO",128:"PRIVILEGES",131:"SELECT",132:"INSERT",133:"DELETE",134:"UPDATE",136:"PUBLIC",137:"DECLARE",138:"CURSOR",139:"FOR",152:"CLOSE",153:"COMMIT",154:"WORK",155:"FROM",158:"WHERE",159:"CURRENT",160:"OF",162:"FETCH",163:"INTO",166:"VALUES",169:"OPEN",170:"ROLLBACK",175:"SET",181:"UNION",182:"INTERSECTION",183:"EXCEPT",191:"OUTER",193:"LEFT",194:"RIGHT",195:"FULL",196:"INNER",199:"JOIN",203:"GROUP",204:"BY",207:"HAVING",208:"ORDER",212:"ASC",213:"DESC",214:"GOTO",215:"CONTINUE"},
productions_: [0,[3,1],[4,2],[4,3],[4,2],[4,3],[8,1],[8,1],[8,1],[12,1],[14,1],[15,1],[17,1],[18,1],[19,1],[20,1],[20,4],[20,1],[20,4],[20,6],[20,1],[20,4],[20,6],[20,1],[20,1],[20,1],[20,4],[20,1],[20,2],[33,0],[33,3],[33,3],[33,2],[33,3],[33,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[37,1],[45,1],[45,1],[45,1],[45,1],[45,1],[45,1],[38,3],[39,6],[39,5],[40,5],[40,4],[55,0],[55,2],[41,4],[41,3],[60,0],[60,1],[42,4],[42,6],[63,1],[63,3],[43,4],[65,1],[65,1],[65,1],[44,2],[62,3],[62,3],[52,3],[52,3],[52,3],[52,3],[52,2],[52,2],[52,1],[52,1],[52,1],[52,3],[52,3],[76,1],[76,2],[76,3],[78,1],[78,3],[64,1],[64,1],[64,1],[79,1],[79,2],[79,3],[75,4],[75,5],[75,5],[75,4],[84,1],[84,3],[57,1],[57,3],[57,5],[5,1],[5,1],[5,1],[5,4],[5,3],[86,5],[96,0],[96,1],[97,1],[97,2],[98,1],[98,1],[98,1],[99,6],[103,1],[103,3],[104,1],[104,1],[105,3],[107,0],[107,2],[108,2],[108,3],[108,4],[108,2],[108,2],[108,2],[108,4],[108,2],[108,5],[106,4],[106,5],[106,7],[106,10],[106,4],[115,1],[115,3],[100,7],[119,0],[119,3],[118,0],[118,3],[101,7],[127,0],[127,3],[123,2],[123,1],[123,1],[129,1],[129,3],[130,1],[130,1],[130,1],[130,2],[130,2],[126,1],[126,3],[135,1],[135,1],[87,5],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[88,1],[141,2],[142,2],[142,1],[143,8],[144,5],[145,4],[146,5],[165,4],[165,1],[167,1],[167,3],[168,1],[168,1],[147,2],[148,2],[148,1],[149,7],[70,4],[171,0],[171,1],[171,1],[150,9],[176,0],[176,1],[176,3],[177,3],[177,3],[151,6],[164,1],[164,3],[178,1],[161,0],[161,1],[180,1],[180,2],[180,1],[180,1],[140,2],[184,1],[184,3],[184,3],[185,1],[185,3],[172,1],[172,1],[173,4],[186,3],[190,0],[190,1],[192,2],[192,2],[192,2],[192,1],[197,0],[197,2],[198,4],[201,1],[201,2],[157,0],[157,1],[189,1],[189,3],[202,0],[202,2],[202,1],[156,2],[200,1],[200,2],[179,2],[187,0],[187,3],[206,1],[206,1],[205,1],[205,3],[188,0],[188,2],[174,0],[174,3],[209,1],[209,3],[210,2],[210,2],[211,0],[211,1],[211,1],[91,2],[91,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */):any {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 91:

		let ref = new ParameterRef();
		ref.name = $$[$0-2];
		ref.indicator = $$[$0] || $$[$0-1];
		return ref;
	
break;
}
},
table: [{3:1,4:2,5:3,22:$V0,70:32,86:4,87:5,88:6,89:$V1,93:$V2,131:$V3,132:$V4,133:$V5,134:$V6,137:$V7,140:18,141:10,142:11,143:12,144:13,145:14,146:15,147:16,148:17,149:19,150:20,151:21,152:$V8,153:$V9,162:$Va,169:$Vb,170:$Vc,184:29},{1:[3]},{1:[2,1],5:34,22:$V0,70:32,86:4,87:5,88:6,89:$V1,93:$V2,131:$V3,132:$V4,133:$V5,134:$V6,137:$V7,140:18,141:10,142:11,143:12,144:13,145:14,146:15,147:16,148:17,149:19,150:20,151:21,152:$V8,153:$V9,162:$Va,169:$Vb,170:$Vc,184:29},{6:[1,35],7:[1,36]},o($Vd,[2,101]),o($Vd,[2,102]),o($Vd,[2,103]),{36:[1,37],92:[1,38]},{94:[1,39]},{13:$Ve,14:40},o($Vd,[2,161]),o($Vd,[2,162]),o($Vd,[2,163]),o($Vd,[2,164]),o($Vd,[2,165]),o($Vd,[2,166]),o($Vd,[2,167]),o($Vd,[2,168]),o($Vd,[2,169]),o($Vd,[2,170]),o($Vd,[2,171]),o($Vd,[2,172]),{13:$Ve,14:42},o($Vd,[2,175],{154:[1,43]}),{155:[1,44]},{13:$Ve,14:45},{163:[1,46]},{13:$Ve,14:47},o($Vd,[2,188],{154:[1,48]}),o($Vd,$Vf,{174:49,180:50,181:$Vg,182:$Vh,183:$Vi,208:$Vj}),o($Vk,$Vl,{171:55,67:$Vm,83:$Vn}),{13:$Vo,84:58},o($Vp,[2,211]),{22:$V0,70:32,131:$Vq,184:60},{6:[1,62]},o($Vr,[2,2],{7:[1,63]}),o($Vr,[2,4]),{90:[1,64]},{91:65,214:$Vs,215:$Vt},{95:[1,68]},{138:[1,69]},o([6,7,138,163],[2,10]),o($Vd,[2,173]),o($Vd,[2,174]),{13:$Vo,84:71,156:70},{163:[1,72]},{13:$Vo,84:73},o($Vd,[2,186]),o($Vd,[2,187]),o($Vd,[2,210]),{22:$Vu,70:75,131:$Vq,185:74},{204:[1,77]},o($Vv,[2,206],{67:[1,78]}),o($Vv,[2,208]),o($Vv,[2,209]),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:83,57:87,64:86,71:$VC,72:$VD,73:$VE,75:88,76:82,78:80,79:90,80:$VF,82:$VG,172:79},o($Vk,[2,192]),o($Vk,[2,193]),{157:100,175:$VH,192:103,193:$VI,194:$VJ,195:$VK,196:$VL,198:102,201:101},o($VM,[2,96],{85:[1,108]}),{23:[1,109],180:50,181:$Vg,182:$Vh,183:$Vi},o($Vk,$Vl,{171:110,67:$Vm,83:$Vn}),o($Vr,[2,5]),o($Vr,[2,3]),{91:111,214:$Vs,215:$Vt},o($Vd,[2,105]),{13:[1,112]},o($Vd,[2,260]),{13:$VN,18:113},{139:[1,115]},o([6,7,158],$VH,{201:101,198:102,192:103,157:116,193:$VI,194:$VJ,195:$VK,196:$VL}),o($VO,$VP,{202:117,17:119,13:$VQ,77:$VR}),{15:95,16:$VA,79:123,164:121,178:122},o([131,166],$VS,{118:124,22:$VT}),o($Vp,[2,212]),o($Vp,[2,214]),{22:$Vu,70:75,131:$Vq,185:126},{10:$VU,13:$Vz,57:130,209:127,210:128},o($Vv,[2,207]),{155:$VV,163:[1,131],173:132,186:133},o($VW,[2,216],{25:[1,135]}),o($VW,[2,217]),o($VX,[2,84]),o($VX,[2,81],{19:136,13:$VY,71:$VZ,72:$V_,73:$V$,74:$V01,77:[1,137]}),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:143,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:144,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},o($V11,[2,76]),o($V11,$V21),o($V11,[2,78]),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:146,57:87,64:86,70:145,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG,131:$Vq},o($V11,[2,86]),o($V11,[2,87]),o($V11,[2,88]),o($V31,[2,98],{85:[1,147]}),{22:[1,148]},o($V11,[2,89],{15:149,16:$VA,81:[1,150]}),o($V41,[2,6]),o($V41,[2,7]),o($V41,[2,8]),o([6,7,13,16,23,25,34,35,36,46,47,48,49,50,51,53,54,61,71,72,73,74,77,81,93,120,122,155,158,163,175,181,182,183,193,194,195,196,203,207,208],[2,11]),{175:[1,151]},o([6,7,23,93,120,122,158,175,181,182,183,203,207,208],[2,232],{192:103,198:152,193:$VI,194:$VJ,195:$VK,196:$VL}),o($V51,[2,229]),{199:[1,153]},{190:154,191:$V61,199:$V71},{190:156,191:$V61,199:$V71},{190:157,191:$V61,199:$V71},{199:[2,225]},{13:[1,158]},o($Vp,[2,213]),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:83,57:87,64:86,71:$VC,72:$VD,73:$VE,75:88,76:82,78:80,79:90,80:$VF,82:$VG,172:159},o($Vd,[2,104]),o($Vd,[2,259]),o($Vd,[2,107],{96:160,97:161,98:162,99:163,100:164,101:165,93:$V81,122:$V91}),o($Va1,[2,13]),{22:$V0,70:32,131:$Vq,140:168,184:29},o($Vd,$Vb1,{161:170,179:171,158:[1,169]}),o($VO,[2,238]),{13:$VQ,17:172},o($VO,[2,237]),o($VO,[2,12]),o($Vd,[2,178],{25:$Vc1}),o($Vd1,[2,201]),o($Vd1,[2,203]),{70:176,131:$Vq,165:174,166:[1,175]},{12:178,13:$Ve1,115:177},{23:[1,180]},o($Vd,[2,251],{25:[1,181]}),o($Vf1,[2,252]),o($Vf1,$Vg1,{211:182,212:$Vh1,213:$Vi1}),o($Vf1,$Vg1,{211:185,212:$Vh1,213:$Vi1}),{15:95,16:$VA,79:123,164:186,178:122},o($Vj1,[2,190]),o($Vk1,$Vb1,{179:171,161:187,158:[1,188]}),{13:$Vo,22:$Vl1,62:192,84:71,156:191,189:189,200:190},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:83,57:87,64:86,71:$VC,72:$VD,75:88,76:194,79:90,80:$VF,82:$VG},o($VX,[2,82]),{13:$VY,19:195},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:196,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:197,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:198,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:199,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},o($VX,[2,14]),o($V11,[2,74]),o($V11,[2,75]),{23:[1,200]},{23:$Vm1,71:$VZ,72:$V_,73:$V$,74:$V01},{13:[1,202]},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:206,57:87,64:86,67:[1,205],71:$VC,72:$VD,73:[1,203],75:88,79:90,80:$VF,82:$VG,83:[1,204]},o($V11,[2,90]),{15:207,16:$VA},o($Vn1,[2,195],{176:208,177:209,12:210,13:$Ve1}),o($V51,[2,230]),{13:$Vo,22:$Vl1,62:192,84:71,156:191,200:211},{199:[2,222]},{199:[2,221]},{199:[2,223]},{199:[2,224]},o($VM,[2,97]),{155:$VV,173:132,186:133},o($Vd,[2,106]),o($Vd,[2,108],{99:163,100:164,101:165,98:212,93:$V81,122:$V91}),o($Vo1,[2,109]),o($Vo1,[2,111]),o($Vo1,[2,112]),o($Vo1,[2,113]),{102:[1,213],117:[1,214]},{67:[1,216],114:$Vp1,123:215,129:217,130:218,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1},o($Vd,[2,160]),o($Vu1,$Vv1,{64:86,75:88,79:90,8:91,15:95,33:225,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG,159:[1,224]}),o($Vd,[2,177]),o($Vk1,[2,205]),o($VO,[2,236]),{15:95,16:$VA,79:123,178:239},o($Vd,[2,179]),{22:[1,240]},o($Vd,[2,181]),{23:[1,241],25:$Vz1},o($VA1,[2,136]),o([21,23,24,25,26,27,28,29,30,31,46],[2,9]),o($Vp,[2,215]),{10:$VU,13:$Vz,57:130,210:243},o($Vf1,[2,254]),o($Vf1,[2,257]),o($Vf1,[2,258]),o($Vf1,[2,255]),{25:$Vc1,155:$VV,173:244,186:133},o($VB1,[2,242],{187:245,203:[1,246]}),o([6,7,23,34,35,93,120,122,181,182,183,203,207,208],$Vv1,{64:86,75:88,79:90,8:91,15:95,33:225,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($VC1,$VH,{201:101,198:102,192:103,157:247,25:[1,248],193:$VI,194:$VJ,195:$VK,196:$VL}),o($VD1,[2,233]),o($VO,[2,239]),o($VO,$VP,{17:119,202:249,13:$VQ,77:$VR}),{22:$Vl1,62:251,70:250,131:$Vq},o($VX,[2,85]),o($VX,[2,83]),o($VE1,[2,70],{73:$V$,74:$V01}),o($VE1,[2,71],{73:$V$,74:$V01}),o($V11,[2,72]),o($V11,[2,73]),o($V11,[2,79]),o($V11,[2,80]),o($V31,[2,99],{85:[1,252]}),{23:[1,253]},{13:$Vz,57:254},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:255,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{23:[1,256],71:$VZ,72:$V_,73:$V$,74:$V01},o($V11,[2,91]),o($Vd,$Vb1,{179:171,161:258,25:[1,259],158:[1,257]}),o($Vn1,[2,196]),{46:[1,260]},o($V51,[2,226],{197:261,124:[1,262]}),o($Vo1,[2,110]),{13:$Vo,84:263},{13:$Vo,84:264},{124:[1,265]},{124:[2,147],128:[1,266]},{25:[1,267],124:[2,148]},o($VF1,[2,149]),o($VF1,[2,151]),o($VF1,[2,152]),o($VF1,[2,153]),o($VF1,$VS,{118:268,22:$VT}),o($VF1,$VS,{118:269,22:$VT}),{160:[1,270]},o($Vk1,[2,241],{34:$VG1,35:$VH1}),o($VI1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:273,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($VJ1,$Vv1,{64:86,75:88,79:90,8:91,15:95,70:145,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,57:237,33:274,52:275,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG,131:$Vq}),o($VI1,[2,34]),o($VI1,[2,35]),o($VI1,[2,36]),o($VI1,[2,37]),o($VI1,[2,38]),o($VI1,[2,39]),o($VI1,[2,40]),o($VI1,[2,41]),{36:$VK1,45:276,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,53:$VR1,54:$VS1,60:280,61:$VT1,71:$VZ,72:$V_,73:$V$,74:$V01},o([23,36,46,47,48,49,50,51,53,54,61,71,72,73,74],$V21,{58:[1,287]}),{22:$Vl1,62:288},o($Vd1,[2,202]),{8:91,9:$Vw,10:$Vx,11:$Vy,15:95,16:$VA,59:$VU1,64:291,79:90,80:$VF,167:289,168:290},o([25,77,124,131,166],[2,142]),{12:293,13:$Ve1},o($Vf1,[2,253]),o($Vd,$Vf,{174:294,208:$Vj}),o($Vj1,[2,248],{188:295,207:[1,296]}),{204:[1,297]},o($VC1,[2,219]),{13:$Vo,22:$Vl1,62:192,84:71,156:191,200:298},o($VO,[2,240]),{23:[1,299]},{23:[1,300]},{13:[1,301]},o($V11,[2,92]),{23:[1,302]},{23:[1,303],71:$VZ,72:$V_,73:$V$,74:$V01},o($V11,[2,95]),o($Vu1,$Vv1,{64:86,75:88,79:90,8:91,15:95,33:225,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG,159:[1,304]}),o($Vd,[2,200]),{12:210,13:$Ve1,177:305},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:306,57:87,59:[1,307],64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},o($V51,[2,228]),o($VI1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:308,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),{22:[1,309]},{22:$VT,77:$VS,118:310},{13:$Vo,84:311},{124:[2,146]},{114:$Vp1,130:312,131:$Vq1,132:$Vr1,133:$Vs1,134:$Vt1},o($VF1,[2,154]),o($VF1,[2,155]),{13:$Ve,14:313},o($VI1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:314,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($VI1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:315,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($VI1,[2,32]),{23:[1,316],34:$VG1,35:$VH1},{23:$Vm1,36:$VK1,45:276,46:$VL1,47:$VM1,48:$VN1,49:$VO1,50:$VP1,51:$VQ1,53:$VR1,54:$VS1,60:280,61:$VT1,71:$VZ,72:$V_,73:$V$,74:$V01},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:317,57:87,64:86,65:318,66:[1,319],67:[1,320],68:[1,321],71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{53:[1,322],54:[1,323],61:[2,58]},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:324,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{9:[1,325]},{61:[1,326]},o($VV1,[2,42]),o($VV1,[2,43]),o($VV1,[2,44]),o($VV1,[2,45]),o($VV1,[2,46]),o($VV1,[2,47]),{36:[1,327],59:[1,328]},o($VI1,[2,67]),{23:[1,329],25:[1,330]},o($VA1,[2,182]),o($VA1,[2,184]),o($VA1,[2,185]),o($VA1,[2,137]),o($Vd,[2,189]),o($Vj1,[2,218]),o([6,7,23,34,35,93,120,122,181,182,183,208],$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:331,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),{10:$VW1,13:$Vz,57:334,205:332,206:333},o($VD1,[2,234]),o($VX1,[2,68]),o($VX1,[2,69]),o($V31,[2,100]),o($V11,[2,93]),o($V11,[2,94]),{160:[1,336]},o($Vn1,[2,197]),o($Vn1,[2,198],{71:$VZ,72:$V_,73:$V$,74:$V01}),o($Vn1,[2,199]),o($V51,[2,227],{34:$VG1,35:$VH1}),{12:341,13:$Ve1,103:337,104:338,105:339,106:340,109:$VY1,110:$VZ1,113:$V_1,116:$V$1},{77:[1,346]},{125:[1,347]},o($VF1,[2,150]),o($Vd,[2,176]),o([6,7,23,34,93,120,122,158,175,181,182,183,193,194,195,196,203,207,208],[2,30],{35:$VH1}),o($VI1,[2,31]),o($VI1,[2,33]),o($VI1,[2,48],{71:$VZ,72:$V_,73:$V$,74:$V01}),{22:$Vl1,62:348},{22:[2,64]},{22:[2,65]},{22:[2,66]},{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:349,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},{9:[1,350]},{35:[1,351],71:$VZ,72:$V_,73:$V$,74:$V01},o($VI1,$V02,{55:352,56:$V12}),{22:[1,355],62:354},{59:[1,356]},o($VI1,[2,56]),o($Vd,[2,180]),{8:91,9:$Vw,10:$Vx,11:$Vy,15:95,16:$VA,59:$VU1,64:291,79:90,80:$VF,168:357},o($Vj1,[2,249],{34:$VG1,35:$VH1}),o($VB1,[2,243],{25:[1,358]}),o($V22,[2,246]),o($V22,[2,244]),o($V22,[2,245]),{13:$Ve,14:359},{23:[1,360],25:[1,361]},o($VA1,[2,115]),o($VA1,[2,117]),o($VA1,[2,118]),{20:362,21:[1,363],24:[1,364],26:[1,365],27:[1,366],28:[1,367],29:[1,368],30:[1,369],31:[1,370]},{22:[1,371]},{111:[1,372]},{111:[1,373]},{22:[1,374]},{70:375,131:$Vq},{13:$VN,18:379,126:376,135:377,136:$V32},o($VI1,[2,63]),{35:[1,380],71:$VZ,72:$V_,73:$V$,74:$V01},o($VI1,$V02,{55:381,56:$V12}),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:382,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},o($VI1,[2,52]),{9:[1,383]},o($VI1,[2,59]),{8:91,9:$Vw,10:$Vx,11:$Vy,15:95,16:$VA,22:$Vl1,62:251,63:384,64:385,70:250,79:90,80:$VF,131:$Vq},o($VI1,[2,55]),o($VA1,[2,183]),{10:$VW1,13:$Vz,57:334,206:386},o($Vd,[2,194]),o($Vo1,[2,114]),{12:341,13:$Ve1,104:387,105:339,106:340,109:$VY1,110:$VZ1,113:$V_1,116:$V$1},o($V42,[2,120],{107:388}),o($V42,[2,15],{22:[1,389]}),o($V42,[2,17],{22:[1,390]}),o($V42,[2,20],{22:[1,391]}),o($V42,[2,23]),o($V42,[2,24]),o($V42,[2,25],{22:[1,392]}),o($V42,[2,27]),{32:[1,393]},{12:178,13:$Ve1,115:394},{22:[1,395]},{22:[1,396]},o($VJ1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:397,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($Vo1,[2,139],{119:398,120:[1,399]}),o($Vo1,[2,144],{127:400,25:[1,401],120:[1,402]}),o($Va1,[2,156]),o($Va1,[2,158]),o($Va1,[2,159]),{8:91,9:$Vw,10:$Vx,11:$Vy,13:$Vz,15:95,16:$VA,22:$VB,52:403,57:87,64:86,71:$VC,72:$VD,75:88,79:90,80:$VF,82:$VG},o($VI1,[2,51]),o($VI1,[2,50],{71:$VZ,72:$V_,73:$V$,74:$V01}),o($VI1,[2,54]),{23:[1,404],25:[1,405]},o($VA1,[2,61]),o($V22,[2,247]),o($VA1,[2,116]),o($VA1,[2,119],{108:406,36:[1,407],112:[1,408],113:[1,409],114:[1,410]}),{10:[1,411]},{10:[1,412]},{10:[1,413]},{10:[1,414]},o($V42,[2,28]),{23:[1,415],25:$Vz1},{12:178,13:$Ve1,115:416},{12:178,13:$Ve1,115:417},{23:[1,418],34:$VG1,35:$VH1},o($Vo1,[2,138]),{113:[1,419]},o($Vo1,[2,143]),{13:$VN,18:379,135:420,136:$V32},{122:[1,421]},o($VI1,[2,49],{71:$VZ,72:$V_,73:$V$,74:$V01}),o($VI1,[2,60]),{8:91,9:$Vw,10:$Vx,11:$Vy,15:95,16:$VA,64:422,79:90,80:$VF},o($V42,[2,121]),{59:[1,423]},{8:424,9:$Vw,10:$Vx,11:$Vy,59:[1,425],80:[1,426]},{22:[1,427]},{13:$Vo,84:428},{23:[1,429]},{23:[1,430],25:[1,431]},{23:[1,432],25:[1,433]},{23:[1,434]},o($VA1,[2,131]),{23:[1,435],25:$Vz1},{23:[1,436],25:$Vz1},o($VA1,[2,135]),{121:[1,437]},o($Va1,[2,157]),{121:[1,438]},o($VA1,[2,62]),o($V42,[2,122],{109:[1,439],110:[1,440]}),o($V42,[2,125]),o($V42,[2,126]),o($V42,[2,127]),o($VJ1,$Vv1,{64:86,75:88,79:90,8:91,15:95,37:228,38:229,39:230,40:231,41:232,42:233,43:234,44:235,52:236,57:237,33:441,9:$Vw,10:$Vx,11:$Vy,13:$Vz,16:$VA,22:$Vw1,36:$Vx1,69:$Vy1,71:$VC,72:$VD,80:$VF,82:$VG}),o($V42,[2,129],{22:[1,442]}),o($V42,[2,16]),o($V42,[2,18]),{10:[1,443]},o($V42,[2,21]),{10:[1,444]},o($V42,[2,26]),o($VA1,[2,132]),{114:[1,445]},o($Vo1,[2,140]),o($Vo1,[2,145]),o($V42,[2,123]),{111:[1,446]},{23:[1,447],34:$VG1,35:$VH1},{12:178,13:$Ve1,115:448},{23:[1,449]},{23:[1,450]},{13:$Vo,84:451},o($V42,[2,124]),o($V42,[2,128]),{23:[1,452],25:$Vz1},o($V42,[2,19]),o($V42,[2,22]),o($VA1,[2,133],{22:[1,453]}),o($V42,[2,130]),{12:178,13:$Ve1,115:454},{23:[1,455],25:$Vz1},o($VA1,[2,134])],
defaultActions: {107:[2,225],154:[2,222],155:[2,221],156:[2,223],157:[2,224],266:[2,146],319:[2,64],320:[2,65],321:[2,66]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    let sharedState:{ yy : { lexer? : any, parser?: any, parseError? : any }} = { yy :  {} }
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval:{$?:any, _$?:any} = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};



/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START):any {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:return 67;
break;
case 1:return 35;
break;
case 2:return 66;
break;
case 3:return 77;
break;
case 4:return 212;
break;
case 5:return 95;
break;
case 6:return 53;
break;
case 7:return 204;
break;
case 8:return 21;
break;
case 9:return 113;
break;
case 10:return 152;
break;
case 11:return 153;
break;
case 12:return 215;
break;
case 13:return 93;
break;
case 14:return 159;
break;
case 15:return 138;
break;
case 16:return 26;
break;
case 17:return 137;
break;
case 18:return 112;
break;
case 19:return 133;
break;
case 20:return 213;
break;
case 21:return 83;
break;
case 22:return 31;
break;
case 23:return 56;
break;
case 24:return 183;
break;
case 25:return 69;
break;
case 26:return 162;
break;
case 27:return 29;
break;
case 28:return 139;
break;
case 29:return 116;
break;
case 30:return 90;
break;
case 31:return 155;
break;
case 32:return 195;
break;
case 33:return 214;
break;
case 34:return 122;
break;
case 35:return 203;
break;
case 36:return 207;
break;
case 37:return 61;
break;
case 38:return 81;
break;
case 39:return 196;
break;
case 40:return 132;
break;
case 41:return 27;
break;
case 42:return 182;
break;
case 43:return 163;
break;
case 44:return 58;
break;
case 45:return 199;
break;
case 46:return 111;
break;
case 47:return 'LANGUAGE';
break;
case 48:return 54;
break;
case 49:return 193;
break;
case 50:return 36;
break;
case 51:return 59;
break;
case 52:return 24;
break;
case 53:return 160;
break;
case 54:return 124;
break;
case 55:return 169;
break;
case 56:return 121;
break;
case 57:return 34;
break;
case 58:return 208;
break;
case 59:return 191;
break;
case 60:return 32;
break;
case 61:return 110;
break;
case 62:return 128;
break;
case 63:return 'PROCEDURE';
break;
case 64:return 136;
break;
case 65:return 30;
break;
case 66:return 114;
break;
case 67:return 194;
break;
case 68:return 170;
break;
case 69:return 94;
break;
case 70:return 131;
break;
case 71:return 175;
break;
case 72:return 28;
break;
case 73:return 68;
break;
case 74:return 'SQLCODE';
break;
case 75:return 102;
break;
case 76:return 125;
break;
case 77:return 181;
break;
case 78:return 134;
break;
case 79:return 80;
break;
case 80:return 166;
break;
case 81:return 117;
break;
case 82:return 89;
break;
case 83:return 158;
break;
case 84:return 120;
break;
case 85:return 154;
break;
case 86:return 9;
break;
case 87:return 10;
break;
case 88:return 11;
break;
case 89:
	if (yy_.yytext.match(/^(ABS|AVG|MIN|MAX|SUM|COUNT|FLOOR|LOWER|UPPER)$/i)) {
		return 82;
	} else {
		return 13;
	}

break;
case 90:return 'COMMENTS';
break;
case 91:return 16;
break;
case 92:return 'DOUBLE_QUOTE';
break;
case 93:return 'PERCENT';
break;
case 94:return 'AMPERSAND';
break;
case 95:return 'QUOTE';
break;
case 96:return 22;
break;
case 97:return 23;
break;
case 98:return 85;
break;
case 99:return 'COLON';
break;
case 100:return 25;
break;
case 101:return 6;
break;
case 102:return 'VERTICAL_BAR';
break;
case 103:return 'QUESTION_MARK';
break;
case 104:return 'CARET';
break;
case 105:return 73;
break;
case 106:return 74;
break;
case 107:return 71;
break;
case 108:return 72;
break;
case 109:return 46;
break;
case 110:return 47;
break;
case 111:return 48;
break;
case 112:return 49;
break;
case 113:return 'LESS_THAN_OR_EQUAL';
break;
case 114:return 'GREATER_THAN_OR_EQUAL';
break;
case 115:/* Skip */;
break;
case 116:return 7;
break;
}
},
rules: [/^(?:ALL\b)/,/^(?:AND\b)/,/^(?:ANY\b)/,/^(?:AS\b)/,/^(?:ASC\b)/,/^(?:AUTHORIZATION\b)/,/^(?:BETWEEN\b)/,/^(?:BY\b)/,/^(?:CHAR(ACTER)?)/,/^(?:CHECK\b)/,/^(?:CLOSE\b)/,/^(?:COMMIT\b)/,/^(?:CONTINUE\b)/,/^(?:CREATE\b)/,/^(?:CURRENT\b)/,/^(?:CURSOR\b)/,/^(?:DECIMAL\b)/,/^(?:DECLARE\b)/,/^(?:DEFAULT\b)/,/^(?:DELETE\b)/,/^(?:DESC\b)/,/^(?:DISTINCT\b)/,/^(?:DOUBLE\b)/,/^(?:ESCAPE\b)/,/^(?:EXCEPT\b)/,/^(?:EXISTS\b)/,/^(?:FETCH\b)/,/^(?:FLOAT\b)/,/^(?:FOR\b)/,/^(?:FOREIGN\b)/,/^(?:FOUND\b)/,/^(?:FROM\b)/,/^(?:FULL\b)/,/^(?:GO[ \t]TO\b)/,/^(?:GRANT\b)/,/^(?:GROUP\b)/,/^(?:HAVING\b)/,/^(?:IN\b)/,/^(?:INDICATOR\b)/,/^(?:INNER\b)/,/^(?:INSERT\b)/,/^(?:INT(EGER)?)/,/^(?:INTERSECTION\b)/,/^(?:INTO\b)/,/^(?:IS\b)/,/^(?:JOIN\b)/,/^(?:KEY\b)/,/^(?:LANGUAGE\b)/,/^(?:LIKE\b)/,/^(?:LEFT\b)/,/^(?:NOT\b)/,/^(?:NULL\b)/,/^(?:NUMERIC\b)/,/^(?:OF\b)/,/^(?:ON\b)/,/^(?:OPEN\b)/,/^(?:OPTION\b)/,/^(?:OR\b)/,/^(?:ORDER\b)/,/^(?:OUTER\b)/,/^(?:PRECISION\b)/,/^(?:PRIMARY\b)/,/^(?:PRIVILEGES\b)/,/^(?:PROCEDURE\b)/,/^(?:PUBLIC\b)/,/^(?:REAL\b)/,/^(?:REFERENCES\b)/,/^(?:RIGHT\b)/,/^(?:ROLLBACK\b)/,/^(?:SCHEMA\b)/,/^(?:SELECT\b)/,/^(?:SET\b)/,/^(?:SMALLINT\b)/,/^(?:SOME\b)/,/^(?:SQLCODE\b)/,/^(?:TABLE\b)/,/^(?:TO\b)/,/^(?:UNION\b)/,/^(?:UPDATE\b)/,/^(?:USER\b)/,/^(?:VALUES\b)/,/^(?:VIEW\b)/,/^(?:WHENEVER\b)/,/^(?:WHERE\b)/,/^(?:WITH\b)/,/^(?:WORK\b)/,/^(?:'[^'\n]*')/,/^(?:\d+|\.\d+|\d\.\d*)/,/^(?:\d+[eE][+-]?\d+|\d\.\d*[eE][+-]?\d+|\.\d*[eE][+-]?\d+)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:--\.\*)/,/^(?:[A-Za-z][A-Za-z0-9_]*)/,/^(?:")/,/^(?:%)/,/^(?:&)/,/^(?:')/,/^(?:\()/,/^(?:\))/,/^(?:\.)/,/^(?::)/,/^(?:,)/,/^(?:;)/,/^(?:\|)/,/^(?:\?)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+)/,/^(?:-)/,/^(?:=)/,/^(?:<>)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:[ \r\t]+)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();